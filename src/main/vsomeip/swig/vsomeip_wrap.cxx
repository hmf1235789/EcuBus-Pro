/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040201
#define SWIGJAVASCRIPT
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#define SWIG_FromCharPtrAndSize(cptr, size) SWIG_Env_FromCharPtrAndSize(env, cptr, size)
#define SWIG_FromCharPtr(cptr)              SWIG_Env_FromCharPtrAndSize(env, cptr, strlen(cptr))


#define SWIG_NAPI_FROM_DECL_ARGS(arg1)              (Napi::Env env, arg1)
#define SWIG_NAPI_FROM_CALL_ARGS(arg1)              (env, arg1)



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



#if defined(_CPPUNWIND) || defined(__EXCEPTIONS)
#define NAPI_CPP_EXCEPTIONS
#else
#define NAPI_DISABLE_CPP_EXCEPTIONS
#define NODE_ADDON_API_ENABLE_MAYBE
#endif

// This gives us
// Branch Node.js v10.x - from v10.20.0
// Branch Node.js v12.x - from v12.17.0
// Everything from Node.js v14.0.0 on
// Our limiting feature is napi_set_instance_data
#ifndef NAPI_VERSION
#define NAPI_VERSION 6
#elif NAPI_VERSION < 6
#error NAPI_VERSION 6 is the minimum supported target (Node.js >=14, >=12.17, >=10.20)
#endif
#include <napi.h>

#include <errno.h>
#include <limits.h>
#include <stdlib.h>
#include <assert.h>
#include <map>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporary objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* ---------------------------------------------------------------------------
 * Error handling
 *
 * ---------------------------------------------------------------------------*/

/*
 * We support several forms:
 *
 * SWIG_Raise("Error message")
 * which creates an Error object with the error message
 *
 * SWIG_Raise(SWIG_TypeError, "Type error")
 * which creates the specified error type with the message
 *
 * SWIG_Raise(obj)
 * which throws the object itself
 *
 * SWIG_Raise(obj, "Exception const &", SWIGType_p_Exception)
 * which also throws the object itself and discards the unneeded extra type info
 *
 * These must be functions instead of macros to use the C++ overloading to
 * resolve the arguments
 */
#define SWIG_exception(code, msg)               SWIG_Error(code, msg)
#define SWIG_fail                               goto fail

#ifdef NAPI_CPP_EXCEPTIONS

#define SWIG_Error(code, msg)                   SWIG_NAPI_Raise(env, code, msg)
#define NAPI_CHECK_MAYBE(maybe)                 (maybe)
#define NAPI_CHECK_RESULT(maybe, result)        (result = maybe)

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, const char *msg) {
  throw Napi::Error::New(env, msg);
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, int type, const char *msg) {
  switch(type) {
    default:
    case SWIG_IOError:
    case SWIG_MemoryError:
    case SWIG_SystemError:
    case SWIG_RuntimeError:
    case SWIG_DivisionByZero:
    case SWIG_SyntaxError:
      throw Napi::Error::New(env, msg);
    case SWIG_OverflowError:
    case SWIG_IndexError:
      throw Napi::RangeError::New(env, msg);
    case SWIG_ValueError:
    case SWIG_TypeError:
      throw Napi::TypeError::New(env, msg);
  }
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, Napi::Value obj,
        const char *msg = nullptr, swig_type_info *info = nullptr) {
  throw Napi::Error(env, obj);
}

#else

#define SWIG_Error(code, msg)     do { SWIG_NAPI_Raise(env, code, msg); SWIG_fail; } while (0)
#define NAPI_CHECK_MAYBE(maybe)   do { if (maybe.IsNothing()) SWIG_fail; } while (0)
#define NAPI_CHECK_RESULT(maybe, result)          \
        do {                                      \
                auto r = maybe;                   \
                if (r.IsNothing()) SWIG_fail;     \
                result = r.Unwrap();              \
        } while (0)

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, const char *msg) {
  Napi::Error::New(env, msg).ThrowAsJavaScriptException();
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, int type, const char *msg) {
  switch(type) {
    default:
    case SWIG_IOError:
    case SWIG_MemoryError:
    case SWIG_SystemError:
    case SWIG_RuntimeError:
    case SWIG_DivisionByZero:
    case SWIG_SyntaxError:
      Napi::Error::New(env, msg).ThrowAsJavaScriptException();
      return;
    case SWIG_OverflowError:
    case SWIG_IndexError:
      Napi::RangeError::New(env, msg).ThrowAsJavaScriptException();
      return;
    case SWIG_ValueError:
    case SWIG_TypeError:
      Napi::TypeError::New(env, msg).ThrowAsJavaScriptException();
      return;
  }
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, Napi::Value obj,
        const char *msg = nullptr, swig_type_info *info = nullptr) {
  Napi::Error(env, obj).ThrowAsJavaScriptException();
}

#endif

void JS_veto_set_variable(const Napi::CallbackInfo &info) {
  SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

struct EnvInstanceData {
  Napi::Env env;
  // Base class per-environment constructor, used to check
  // if a JS object is a SWIG wrapper
  Napi::FunctionReference *SWIG_NAPI_ObjectWrapCtor;
  // Per-environment wrapper constructors, indexed by the number in
  // swig_type->clientdata
  Napi::FunctionReference **ctor;
  swig_module_info *swig_module;
  EnvInstanceData(Napi::Env, swig_module_info *);
  ~EnvInstanceData();
};

typedef size_t SWIG_NAPI_ClientData;

// Base class for all wrapped objects,
// used mostly when unwrapping unknown objects
template <typename SWIG_OBJ_WRAP>
class SWIG_NAPI_ObjectWrap_templ : public Napi::ObjectWrap<SWIG_OBJ_WRAP> {
  public:
    void *self;
    bool owned;
    size_t size;
    swig_type_info *info;
    SWIG_NAPI_ObjectWrap_templ(const Napi::CallbackInfo &info);
    SWIG_NAPI_ObjectWrap_templ(bool, const Napi::CallbackInfo &info) :
        Napi::ObjectWrap<SWIG_OBJ_WRAP>(info),
        self(nullptr),
        owned(true),
        size(0),
        info(nullptr)
        {}
    virtual ~SWIG_NAPI_ObjectWrap_templ() {};

    Napi::Value ToString(const Napi::CallbackInfo &info);
};

template <typename SWIG_OBJ_WRAP>
SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>::SWIG_NAPI_ObjectWrap_templ(const Napi::CallbackInfo &info) :
        Napi::ObjectWrap<SWIG_OBJ_WRAP>(info), size(0), info(nullptr) { 
  Napi::Env env = info.Env();
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object of unknown type in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
  } else {
    SWIG_Error(SWIG_ERROR, "This constructor is not accessible from JS");
  }
  return;
  goto fail;
fail:
  return;
}

template <typename SWIG_OBJ_WRAP>
Napi::Value SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>::ToString(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  static char repr[128];
  const char *name = SWIG_TypePrettyName(this->info);
  snprintf(repr, sizeof(repr), "{SwigObject %s (%s) at %p %s}",
    this->info ? this->info->name : "unknown",
    name ? name : "unknown",
    this->self,
    this->owned ? "[owned]" : "[copy]");
  return Napi::String::New(env, repr);
}

class SWIG_NAPI_ObjectWrap_inst : public SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst> {
public:
  using SWIG_NAPI_ObjectWrap_templ::SWIG_NAPI_ObjectWrap_templ;
  static Napi::Function GetClass(Napi::Env);
  static void GetMembers(
    Napi::Env,
    std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &,
    std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &
  );
};

void SWIG_NAPI_ObjectWrap_inst::GetMembers(
        Napi::Env env,
        std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &members,
        std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &
) {
  members.erase("toString");
  members.insert({"toString", SWIG_NAPI_ObjectWrap_templ::InstanceMethod("toString", &SWIG_NAPI_ObjectWrap_templ::ToString)});
}

Napi::Function SWIG_NAPI_ObjectWrap_inst::GetClass(Napi::Env env) {
  return Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::DefineClass(env, "SwigObject", {});
}

SWIGRUNTIME int SWIG_NAPI_ConvertInstancePtr(Napi::Object objRef, void **ptr, swig_type_info *info, int flags) {
  SWIG_NAPI_ObjectWrap_inst *ow;
  Napi::Env env = objRef.Env();
  if(!objRef.IsObject()) return SWIG_ERROR;

  // Check if this is a SWIG wrapper
  Napi::FunctionReference *ctor = env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor;
  bool instanceOf;
  NAPI_CHECK_RESULT(objRef.InstanceOf(ctor->Value()), instanceOf);
  if (!instanceOf) {
    return SWIG_TypeError;
  }

  ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(objRef);

  // Now check if the SWIG type is compatible unless the types match exactly or the type is unknown
  if(info && ow->info != info && ow->info != nullptr) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(ow->info, info);
    if (!tc && ow->info->name) {
      tc = SWIG_TypeCheck(ow->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
    int newmemory = 0;
    *ptr = SWIG_TypeCast(tc, ow->self, &newmemory);
    assert(!newmemory); /* newmemory handling not yet implemented */
  } else {
    *ptr = ow->self;
  }

  if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !ow->owned) {
    return SWIG_ERROR_RELEASE_NOT_OWNED;
  } else {
    if (flags & SWIG_POINTER_DISOWN) {
      ow->owned = false;
    }
    if (flags & SWIG_POINTER_CLEAR) {
      ow->self = nullptr;
    }
  }
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGRUNTIME int SWIG_NAPI_GetInstancePtr(Napi::Value valRef, void **ptr) {
  SWIG_NAPI_ObjectWrap_inst *ow;
  if(!valRef.IsObject()) {
    return SWIG_TypeError;
  }
  Napi::Object objRef;
  NAPI_CHECK_RESULT(valRef.ToObject(), objRef);
  ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(objRef);

  if(ow->self == nullptr) {
    return SWIG_ERROR;
  }

  *ptr = ow->self;
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGRUNTIME int SWIG_NAPI_ConvertPtr(Napi::Value valRef, void **ptr, swig_type_info *info, int flags) {
  // special case: JavaScript null => C NULL pointer
  if (valRef.IsNull()) {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  if (!valRef.IsObject()) {
    return SWIG_TypeError;
  }

  Napi::Object objRef;
  NAPI_CHECK_RESULT(valRef.ToObject(), objRef);
  return SWIG_NAPI_ConvertInstancePtr(objRef, ptr, info, flags);
  goto fail;
fail:
  return SWIG_ERROR;
}

SWIGRUNTIME Napi::Value SWIG_NAPI_NewPointerObj(Napi::Env env, void *ptr, swig_type_info *info, int flags) {
  Napi::External<void> native;
  Napi::FunctionReference *ctor;

  if (ptr == nullptr) {
    return env.Null();
  }
  native = Napi::External<void>::New(env, ptr);

  size_t *idx = info != nullptr ?
        reinterpret_cast<SWIG_NAPI_ClientData *>(info->clientdata) :
        nullptr;
  if (idx == nullptr) {
    // This type does not have a dedicated wrapper
    ctor = env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor;
  } else {
    ctor = env.GetInstanceData<EnvInstanceData>()->ctor[*idx];
  }

  Napi::Value wrapped;
  NAPI_CHECK_RESULT(ctor->New({native}), wrapped);

  // Preserve the type even if using the generic wrapper
  if (idx == nullptr && info != nullptr) {
    Napi::Object obj;
    NAPI_CHECK_RESULT(wrapped.ToObject(), obj);
    Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->info = info;
  }

  if ((flags & SWIG_POINTER_OWN) == SWIG_POINTER_OWN) {
    Napi::Object obj;
    NAPI_CHECK_RESULT(wrapped.ToObject(), obj);
    Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->owned = true;
  }

  return wrapped;
  goto fail;
fail:
  return Napi::Value();
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)          SWIG_NAPI_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)            SWIG_NAPI_NewPointerObj(env, ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_NAPI_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_NAPI_NewPointerObj(env, thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_NAPI_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NAPI_NewPointerObj(env, ptr, type, 0)

#define SWIG_GetInstancePtr(obj, ptr)                   SWIG_NAPI_GetInstancePtr(obj, ptr)

SWIGRUNTIME Napi::Value _SWIG_NAPI_wrap_equals(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  int res1;
  int res2;

  if(info.Length() != 1) SWIG_Error(SWIG_ERROR, "Illegal number of arguments for equals.");

  res1 = SWIG_GetInstancePtr(info.This(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_Error(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(info[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_Error(SWIG_ArgError(res2), " in method '" "equals" "', argument " "1"" of type '" "void *""'");
  }

  result = (bool)(arg1 == arg2);
  jsresult = Napi::Boolean::New(env, result);

  return jsresult;
  goto fail;
fail:
  return Napi::Value();
}

SWIGRUNTIME Napi::Value _wrap_getCPtr(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  void *arg1 = (void *) 0 ;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(info.This(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_Error(SWIG_ArgError(res1), " in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
  }

  result = (long)arg1;
  jsresult = Napi::Number::New(env, result);

  return jsresult;
  goto fail;
fail:
  return Napi::Value();
}


/* ---------------------------------------------------------------------------
 * PackedData object
 * (objects visible to JS that do not have a dedicated wrapper but must preserve type)
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME
Napi::Value SWIG_NAPI_NewPackedObj(Napi::Env env, void *data, size_t size, swig_type_info *type) {
  void *data_copy = new uint8_t[size];
  memcpy(data_copy, data, size);
  Napi::Value val = SWIG_NAPI_NewPointerObj(env, data_copy, type, SWIG_POINTER_OWN);
  Napi::Object obj;
  if (val.IsEmpty()) goto fail;

  NAPI_CHECK_RESULT(val.ToObject(), obj);
  Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->size = size;

fail:
  return val;
}

SWIGRUNTIME
int SWIG_NAPI_ConvertPacked(Napi::Value valRef, void *ptr, size_t size, swig_type_info *type) {
  void *tmp;
  if (!SWIG_IsOK(SWIG_NAPI_ConvertPtr(valRef, &tmp, type, 0))) {
    return SWIG_ERROR;
  }
  memcpy(ptr, tmp, size);
  return SWIG_OK;
}

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_NAPI_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_NAPI_NewPackedObj(env, ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME

Napi::Value SWIG_NAPI_AppendOutput(Napi::Env env, Napi::Value result, Napi::Value obj) {
  if (result.IsUndefined()) {
    result = Napi::Array::New(env);
  } else if (!result.IsArray()) {
    Napi::Array tmparr = Napi::Array::New(env);
    tmparr.Set(static_cast<uint32_t>(0), result);
    result = tmparr;
  }

  Napi::Array arr = result.As<Napi::Array>();
  arr.Set(arr.Length(), obj);
  return arr;
}


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p___int64 swig_types[0]
#define SWIGTYPE_p_available_t swig_types[1]
#define SWIGTYPE_p_char swig_types[2]
#define SWIGTYPE_p_float swig_types[3]
#define SWIGTYPE_p_int swig_types[4]
#define SWIGTYPE_p_long swig_types[5]
#define SWIGTYPE_p_long_long swig_types[6]
#define SWIGTYPE_p_p_char swig_types[7]
#define SWIGTYPE_p_p_unsigned_long swig_types[8]
#define SWIGTYPE_p_sd_acceptance_map_type_t swig_types[9]
#define SWIGTYPE_p_short swig_types[10]
#define SWIGTYPE_p_signed___int64 swig_types[11]
#define SWIGTYPE_p_signed_char swig_types[12]
#define SWIGTYPE_p_std__arrayT_unsigned_char_16_t swig_types[13]
#define SWIGTYPE_p_std__arrayT_unsigned_char_4_t swig_types[14]
#define SWIGTYPE_p_std__chrono__milliseconds swig_types[15]
#define SWIGTYPE_p_std__chrono__seconds swig_types[16]
#define SWIGTYPE_p_std__functionT_bool_fmessage_acceptance_t_const_RF_t swig_types[17]
#define SWIGTYPE_p_std__functionT_bool_fremote_info_t_const_RF_t swig_types[18]
#define SWIGTYPE_p_std__functionT_bool_fstd__shared_ptrT_payload_t_const_R_std__shared_ptrT_payload_t_const_RF_t swig_types[19]
#define SWIGTYPE_p_std__functionT_bool_funsigned_short___uid_t___uid_t_boolF_t swig_types[20]
#define SWIGTYPE_p_std__functionT_bool_funsigned_short___uid_t___uid_t_std__string_const_R_boolF_t swig_types[21]
#define SWIGTYPE_p_std__functionT_bool_funsigned_short_vsomeip_sec_client_t_const_p_std__string_const_R_boolF_t swig_types[22]
#define SWIGTYPE_p_std__functionT_void_fF_t swig_types[23]
#define SWIGTYPE_p_std__functionT_void_fip_address_t_const_RF_t swig_types[24]
#define SWIGTYPE_p_std__functionT_void_fstd__shared_ptrT_message_t_const_RF_t swig_types[25]
#define SWIGTYPE_p_std__functionT_void_fstd__vectorT_std__pairT_unsigned_short_unsigned_short_t_t_const_RF_t swig_types[26]
#define SWIGTYPE_p_std__functionT_void_funsigned_short___uid_t___uid_t_bool_std__functionT_void_fbool_constF_tF_t swig_types[27]
#define SWIGTYPE_p_std__functionT_void_funsigned_short___uid_t___uid_t_std__string_const_R_bool_std__functionT_void_fbool_constF_tF_t swig_types[28]
#define SWIGTYPE_p_std__functionT_void_funsigned_short_constF_t swig_types[29]
#define SWIGTYPE_p_std__functionT_void_funsigned_short_const_unsigned_short_const_unsigned_short_const_unsigned_short_const_unsigned_short_constF_t swig_types[30]
#define SWIGTYPE_p_std__functionT_void_funsigned_short_unsigned_short_boolF_t swig_types[31]
#define SWIGTYPE_p_std__functionT_void_funsigned_short_unsigned_short_vsomeip_v3__availability_state_eF_t swig_types[32]
#define SWIGTYPE_p_std__functionT_void_funsigned_short_vsomeip_sec_client_t_const_p_std__string_const_R_bool_std__functionT_void_fboolF_tF_t swig_types[33]
#define SWIGTYPE_p_std__functionT_void_fvsomeip_v3__routing_state_eF_t swig_types[34]
#define SWIGTYPE_p_std__functionT_void_fvsomeip_v3__security_update_state_eF_t swig_types[35]
#define SWIGTYPE_p_std__functionT_void_fvsomeip_v3__state_type_eF_t swig_types[36]
#define SWIGTYPE_p_std__mapT_std__size_t_unsigned_char_t swig_types[37]
#define SWIGTYPE_p_std__mapT_std__string_std__string_t swig_types[38]
#define SWIGTYPE_p_std__mapT_unsigned_short_std__mapT_unsigned_short_std__mapT_unsigned_char_unsigned_int_t_t_t swig_types[39]
#define SWIGTYPE_p_std__mapT_vsomeip_v3__remote_info_t_std__string_t swig_types[40]
#define SWIGTYPE_p_std__setT_unsigned_short_t swig_types[41]
#define SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__application_t swig_types[42]
#define SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__configuration_t swig_types[43]
#define SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__message_t swig_types[44]
#define SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__payload_t swig_types[45]
#define SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__policy_manager_t swig_types[46]
#define SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__policy_t swig_types[47]
#define SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__runtime_t swig_types[48]
#define SWIGTYPE_p_std__string swig_types[49]
#define SWIGTYPE_p_std__vectorT_unsigned_char_t swig_types[50]
#define SWIGTYPE_p_uid_t swig_types[51]
#define SWIGTYPE_p_unsigned___int64 swig_types[52]
#define SWIGTYPE_p_unsigned_char swig_types[53]
#define SWIGTYPE_p_unsigned_int swig_types[54]
#define SWIGTYPE_p_unsigned_long swig_types[55]
#define SWIGTYPE_p_unsigned_long_long swig_types[56]
#define SWIGTYPE_p_unsigned_short swig_types[57]
#define SWIGTYPE_p_vsomeip_sec_client_t swig_types[58]
#define SWIGTYPE_p_vsomeip_v3__application swig_types[59]
#define SWIGTYPE_p_vsomeip_v3__debounce_filter_t swig_types[60]
#define SWIGTYPE_p_vsomeip_v3__ip_address_t swig_types[61]
#define SWIGTYPE_p_vsomeip_v3__message swig_types[62]
#define SWIGTYPE_p_vsomeip_v3__message_acceptance_t swig_types[63]
#define SWIGTYPE_p_vsomeip_v3__message_base swig_types[64]
#define SWIGTYPE_p_vsomeip_v3__payload swig_types[65]
#define SWIGTYPE_p_vsomeip_v3__remote_info_t swig_types[66]
#define SWIGTYPE_p_vsomeip_v3__runtime swig_types[67]
static swig_type_info *swig_types[69];
static swig_module_info swig_module = {swig_types, 68, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <assert.h>


#include <windows.h>

#define VSOMEIP_INTERNAL_SUPPRESS_DEPRECATED
#include <vsomeip/vsomeip.hpp>


#include <stdint.h>		// Use the C99 official header


SWIGINTERNINLINE Napi::Value
SWIG_From_unsigned_SS_char(Napi::Env env, unsigned char c)
{
  return Napi::Number::New(env, static_cast<double>(c));
}


SWIGINTERN
Napi::Value SWIG_From_unsigned_SS_int(Napi::Env env, unsigned int val)
{
  return Napi::Number::New(env, val);
}


SWIGINTERN
Napi::Value SWIG_From_unsigned_SS_short(Napi::Env env, unsigned short val)
{
  return Napi::Number::New(env, val);
}


SWIGINTERN
Napi::Value SWIG_From_int(Napi::Env env, int val)
{
  return Napi::Number::New(env, val);
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_int (Napi::Value valRef, unsigned int* val)
{
  if (!valRef.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(valRef.ToNumber(), num);
    if (num.Int64Value() < 0) {
      return SWIG_TypeError;
    }
    *val = static_cast<unsigned int>(num.Uint32Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_short (Napi::Value valRef, unsigned short* val)
{
  if (!valRef.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(valRef.ToNumber(), num);
    if (num.Int64Value() < 0) {
      return SWIG_TypeError;
    }
    *val = static_cast<unsigned short>(num.Uint32Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN
int SWIG_AsVal_double (Napi::Value obj, double *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }

  if(val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<double>(num.DoubleValue());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx, cx, rd;
   errno = 0;
   fx = floor(x);
   cx = ceil(x);
   rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_long (Napi::Value obj, unsigned long *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    if (num.Int64Value() < 0) {
      return SWIG_TypeError;
    }
    *val = static_cast<unsigned long>(num.Int64Value());
  }
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (Napi::Value obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


SWIGINTERN
int SWIG_AsVal_int (Napi::Value valRef, int* val)
{
  if (!valRef.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(valRef.ToNumber(), num);
    *val = static_cast<int>(num.Int32Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN
Napi::Value SWIG_From_bool(Napi::Env env, bool val)
{
  return Napi::Boolean::New(env, val);
}


SWIGINTERN
int SWIG_AsVal_long (Napi::Value obj, long* val)
{
  if (!obj.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<long>(num.Int64Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN
int SWIG_AsVal_bool (Napi::Value obj, bool *val)
{
  if(!obj.IsBoolean()) {
    return SWIG_TypeError;
  }

  Napi::Boolean b;
  NAPI_CHECK_RESULT(obj.ToBoolean(), b);
  if (val) *val = b.Value();
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
int SWIG_AsVal_long_SS_long (Napi::Value obj, long long* val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }

  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<long long>(num.Int64Value());
  }
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
Napi::Value SWIG_From_long_SS_long(Napi::Env env, long long val)
{
  return Napi::Number::New(env, val);
}
#endif


#include <memory>


void LoadDll(const char* path) {
  SetDllDirectory(path);
}



SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(Napi::Value valRef, char** cptr, size_t* psize, int *alloc)
{
  if(valRef.IsString()) {
    Napi::String js_str;
    NAPI_CHECK_RESULT(valRef.ToString(), js_str);

    std::string str = js_str.Utf8Value();
    size_t len = str.size() + 1;
    char* cstr = (char*) (new char[len]());
    memcpy(cstr, str.data(), len);
    
    if(alloc) *alloc = SWIG_NEWOBJ;
    if(psize) *psize = len;
    if(cptr) *cptr = cstr;
    
    return SWIG_OK;
  } else {
    if(valRef.IsObject()) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      Napi::Object obj;
      NAPI_CHECK_RESULT(valRef.ToObject(), obj);
      // try if the object is a wrapped char[]
      if (pchar_descriptor) {
        void* vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr) *cptr = (char *) vptr;
          if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc) *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
    }
  }
  goto fail;
fail:
  return SWIG_TypeError;
}





#define SWIG_NAPI_INIT vsomeip_initialize


// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_message_base_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_message_base_templ(const Napi::CallbackInfo &);
_exports_message_base_templ(bool, const Napi::CallbackInfo &);
virtual ~_exports_message_base_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_get_message(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_set_message(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_get_service(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_set_service(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_get_instance(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_set_instance(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_get_method(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_set_method(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_get_length(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_get_request(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_get_client(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_set_client(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_get_session(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_set_session(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_get_protocol_version(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_get_interface_version(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_set_interface_version(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_get_message_type(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_set_message_type(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_get_return_code(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_set_return_code(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_is_reliable(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_set_reliable(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_is_initial(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_base_set_initial(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_message_base_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_message_base_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_message_base_inst : public _exports_message_base_templ<_exports_message_base_inst> {
public:
  using _exports_message_base_templ::_exports_message_base_templ;
  virtual ~_exports_message_base_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_message_base_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_message_base_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: message_base (_exports_message_base) */
// jsnapi_getclass
Napi::Function _exports_message_base_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_message_base_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_message_base_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_message_base_inst>::DefineClass(env, "message_base", symbolTable);
}

void _exports_message_base_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_message_base_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_message_base_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_member_function_descriptor
  members.erase("get_message");
  members.insert({
    "get_message",
      _exports_message_base_templ::InstanceMethod("get_message",
        &_exports_message_base_templ::_wrap_message_base_get_message,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_message");
  members.insert({
    "set_message",
      _exports_message_base_templ::InstanceMethod("set_message",
        &_exports_message_base_templ::_wrap_message_base_set_message,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_service");
  members.insert({
    "get_service",
      _exports_message_base_templ::InstanceMethod("get_service",
        &_exports_message_base_templ::_wrap_message_base_get_service,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_service");
  members.insert({
    "set_service",
      _exports_message_base_templ::InstanceMethod("set_service",
        &_exports_message_base_templ::_wrap_message_base_set_service,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_instance");
  members.insert({
    "get_instance",
      _exports_message_base_templ::InstanceMethod("get_instance",
        &_exports_message_base_templ::_wrap_message_base_get_instance,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_instance");
  members.insert({
    "set_instance",
      _exports_message_base_templ::InstanceMethod("set_instance",
        &_exports_message_base_templ::_wrap_message_base_set_instance,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_method");
  members.insert({
    "get_method",
      _exports_message_base_templ::InstanceMethod("get_method",
        &_exports_message_base_templ::_wrap_message_base_get_method,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_method");
  members.insert({
    "set_method",
      _exports_message_base_templ::InstanceMethod("set_method",
        &_exports_message_base_templ::_wrap_message_base_set_method,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_length");
  members.insert({
    "get_length",
      _exports_message_base_templ::InstanceMethod("get_length",
        &_exports_message_base_templ::_wrap_message_base_get_length,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_request");
  members.insert({
    "get_request",
      _exports_message_base_templ::InstanceMethod("get_request",
        &_exports_message_base_templ::_wrap_message_base_get_request,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_client");
  members.insert({
    "get_client",
      _exports_message_base_templ::InstanceMethod("get_client",
        &_exports_message_base_templ::_wrap_message_base_get_client,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_client");
  members.insert({
    "set_client",
      _exports_message_base_templ::InstanceMethod("set_client",
        &_exports_message_base_templ::_wrap_message_base_set_client,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_session");
  members.insert({
    "get_session",
      _exports_message_base_templ::InstanceMethod("get_session",
        &_exports_message_base_templ::_wrap_message_base_get_session,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_session");
  members.insert({
    "set_session",
      _exports_message_base_templ::InstanceMethod("set_session",
        &_exports_message_base_templ::_wrap_message_base_set_session,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_protocol_version");
  members.insert({
    "get_protocol_version",
      _exports_message_base_templ::InstanceMethod("get_protocol_version",
        &_exports_message_base_templ::_wrap_message_base_get_protocol_version,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_interface_version");
  members.insert({
    "get_interface_version",
      _exports_message_base_templ::InstanceMethod("get_interface_version",
        &_exports_message_base_templ::_wrap_message_base_get_interface_version,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_interface_version");
  members.insert({
    "set_interface_version",
      _exports_message_base_templ::InstanceMethod("set_interface_version",
        &_exports_message_base_templ::_wrap_message_base_set_interface_version,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_message_type");
  members.insert({
    "get_message_type",
      _exports_message_base_templ::InstanceMethod("get_message_type",
        &_exports_message_base_templ::_wrap_message_base_get_message_type,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_message_type");
  members.insert({
    "set_message_type",
      _exports_message_base_templ::InstanceMethod("set_message_type",
        &_exports_message_base_templ::_wrap_message_base_set_message_type,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_return_code");
  members.insert({
    "get_return_code",
      _exports_message_base_templ::InstanceMethod("get_return_code",
        &_exports_message_base_templ::_wrap_message_base_get_return_code,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_return_code");
  members.insert({
    "set_return_code",
      _exports_message_base_templ::InstanceMethod("set_return_code",
        &_exports_message_base_templ::_wrap_message_base_set_return_code,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("is_reliable");
  members.insert({
    "is_reliable",
      _exports_message_base_templ::InstanceMethod("is_reliable",
        &_exports_message_base_templ::_wrap_message_base_is_reliable,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_reliable");
  members.insert({
    "set_reliable",
      _exports_message_base_templ::InstanceMethod("set_reliable",
        &_exports_message_base_templ::_wrap_message_base_set_reliable,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("is_initial");
  members.insert({
    "is_initial",
      _exports_message_base_templ::InstanceMethod("is_initial",
        &_exports_message_base_templ::_wrap_message_base_is_initial,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_initial");
  members.insert({
    "set_initial",
      _exports_message_base_templ::InstanceMethod("set_initial",
        &_exports_message_base_templ::_wrap_message_base_set_initial,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_debounce_filter_t_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_debounce_filter_t_templ(const Napi::CallbackInfo &);
_exports_debounce_filter_t_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_debounce_filter_t__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_debounce_filter_t__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_debounce_filter_t_on_change__get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_debounce_filter_t_on_change__set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_debounce_filter_t_on_change_resets_interval__get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_debounce_filter_t_on_change_resets_interval__set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_debounce_filter_t_interval__get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_debounce_filter_t_interval__set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_debounce_filter_t_ignore__get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_debounce_filter_t_ignore__set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_debounce_filter_t_send_current_value_after__get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_debounce_filter_t_send_current_value_after__set(const Napi::CallbackInfo &, const Napi::Value &);
virtual ~_exports_debounce_filter_t_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_debounce_filter_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_debounce_filter_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_debounce_filter_t_inst : public _exports_debounce_filter_t_templ<_exports_debounce_filter_t_inst> {
public:
  using _exports_debounce_filter_t_templ::_exports_debounce_filter_t_templ;
  virtual ~_exports_debounce_filter_t_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_debounce_filter_t_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_debounce_filter_t_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: debounce_filter_t (_exports_debounce_filter_t) */
// jsnapi_getclass
Napi::Function _exports_debounce_filter_t_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_debounce_filter_t_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_debounce_filter_t_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_debounce_filter_t_inst>::DefineClass(env, "debounce_filter_t", symbolTable);
}

void _exports_debounce_filter_t_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_debounce_filter_t_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_debounce_filter_t_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("on_change_");
  members.insert({
    "on_change_",
      _exports_debounce_filter_t_templ::InstanceAccessor("on_change_",
        &_exports_debounce_filter_t_templ::_wrap_debounce_filter_t_on_change__get,
        &_exports_debounce_filter_t_templ::_wrap_debounce_filter_t_on_change__set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("on_change_resets_interval_");
  members.insert({
    "on_change_resets_interval_",
      _exports_debounce_filter_t_templ::InstanceAccessor("on_change_resets_interval_",
        &_exports_debounce_filter_t_templ::_wrap_debounce_filter_t_on_change_resets_interval__get,
        &_exports_debounce_filter_t_templ::_wrap_debounce_filter_t_on_change_resets_interval__set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("interval_");
  members.insert({
    "interval_",
      _exports_debounce_filter_t_templ::InstanceAccessor("interval_",
        &_exports_debounce_filter_t_templ::_wrap_debounce_filter_t_interval__get,
        &_exports_debounce_filter_t_templ::_wrap_debounce_filter_t_interval__set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("ignore_");
  members.insert({
    "ignore_",
      _exports_debounce_filter_t_templ::InstanceAccessor("ignore_",
        &_exports_debounce_filter_t_templ::_wrap_debounce_filter_t_ignore__get,
        &_exports_debounce_filter_t_templ::_wrap_debounce_filter_t_ignore__set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("send_current_value_after_");
  members.insert({
    "send_current_value_after_",
      _exports_debounce_filter_t_templ::InstanceAccessor("send_current_value_after_",
        &_exports_debounce_filter_t_templ::_wrap_debounce_filter_t_send_current_value_after__get,
        &_exports_debounce_filter_t_templ::_wrap_debounce_filter_t_send_current_value_after__set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_runtime_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_runtime_templ(const Napi::CallbackInfo &);
_exports_runtime_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_runtime_get_property(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_runtime_set_property(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_runtime_get(const Napi::CallbackInfo &);
virtual ~_exports_runtime_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_runtime_create_application__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_runtime_create_application__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_runtime_create_message__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_runtime_create_message__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_runtime__wrap_runtime_create_message(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_runtime_create_request__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_runtime_create_request__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_runtime__wrap_runtime_create_request(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_runtime_create_response(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_runtime_create_notification__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_runtime_create_notification__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_runtime__wrap_runtime_create_notification(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_runtime_create_payload__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_runtime_create_payload__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_runtime_create_payload__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_runtime__wrap_runtime_create_payload(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_runtime_get_application(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_runtime_remove_application(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_runtime_create_application__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_runtime__wrap_runtime_create_application(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_runtime_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_runtime_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_runtime_inst : public _exports_runtime_templ<_exports_runtime_inst> {
public:
  using _exports_runtime_templ::_exports_runtime_templ;
  virtual ~_exports_runtime_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_runtime_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_runtime_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: runtime (_exports_runtime) */
// jsnapi_getclass
Napi::Function _exports_runtime_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_runtime_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_runtime_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_runtime_inst>::DefineClass(env, "runtime", symbolTable);
}

void _exports_runtime_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_runtime_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_runtime_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_member_function_descriptor
  members.erase("create_message");
  members.insert({
    "create_message",
      _exports_runtime_templ::InstanceMethod("create_message",
        &_exports_runtime_templ::_wrap_runtime__wrap_runtime_create_message,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("create_request");
  members.insert({
    "create_request",
      _exports_runtime_templ::InstanceMethod("create_request",
        &_exports_runtime_templ::_wrap_runtime__wrap_runtime_create_request,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("create_response");
  members.insert({
    "create_response",
      _exports_runtime_templ::InstanceMethod("create_response",
        &_exports_runtime_templ::_wrap_runtime_create_response,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("create_notification");
  members.insert({
    "create_notification",
      _exports_runtime_templ::InstanceMethod("create_notification",
        &_exports_runtime_templ::_wrap_runtime__wrap_runtime_create_notification,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("create_payload");
  members.insert({
    "create_payload",
      _exports_runtime_templ::InstanceMethod("create_payload",
        &_exports_runtime_templ::_wrap_runtime__wrap_runtime_create_payload,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_application");
  members.insert({
    "get_application",
      _exports_runtime_templ::InstanceMethod("get_application",
        &_exports_runtime_templ::_wrap_runtime_get_application,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("remove_application");
  members.insert({
    "remove_application",
      _exports_runtime_templ::InstanceMethod("remove_application",
        &_exports_runtime_templ::_wrap_runtime_remove_application,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("create_application");
  members.insert({
    "create_application",
      _exports_runtime_templ::InstanceMethod("create_application",
        &_exports_runtime_templ::_wrap_runtime__wrap_runtime_create_application,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  // jsnapi_register_static_function
  staticMembers.erase("get_property");
  staticMembers.insert({
    "get_property",
      StaticMethod("get_property",
        &_exports_runtime_templ::_wrap_runtime_get_property,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_static_function
  staticMembers.erase("set_property");
  staticMembers.insert({
    "set_property",
      StaticMethod("set_property",
        &_exports_runtime_templ::_wrap_runtime_set_property,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_static_function
  staticMembers.erase("get");
  staticMembers.insert({
    "get",
      StaticMethod("get",
        &_exports_runtime_templ::_wrap_runtime_get,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_application_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_application_templ(const Napi::CallbackInfo &);
_exports_application_templ(bool, const Napi::CallbackInfo &);
virtual ~_exports_application_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_application_get_name(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_get_client(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_get_diagnosis(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_init(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_start(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_stop(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_process__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_process__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application__wrap_application_process(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_get_security_mode(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_offer_service__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_offer_service__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_offer_service__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application__wrap_application_offer_service(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_stop_offer_service__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_stop_offer_service__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_stop_offer_service__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application__wrap_application_stop_offer_service(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_offer_event__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_offer_event__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_offer_event__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_offer_event__SWIG_3(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_offer_event__SWIG_4(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_offer_event__SWIG_5(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_offer_event__SWIG_6(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application__wrap_application_offer_event(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_stop_offer_event(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_request_service__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_request_service__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_request_service__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application__wrap_application_request_service(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_release_service(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_request_event__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_request_event__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_request_event__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application__wrap_application_request_event(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_release_event(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_subscribe__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_subscribe__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_subscribe__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application__wrap_application_subscribe(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_unsubscribe__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_is_available__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_is_available__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_is_available__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application__wrap_application_is_available(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_are_available__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_are_available__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_are_available__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_are_available__SWIG_3(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_are_available__SWIG_4(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application__wrap_application_are_available(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_send(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_notify__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_notify__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application__wrap_application_notify(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_notify_one__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_notify_one__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application__wrap_application_notify_one(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_register_state_handler(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_unregister_state_handler(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_register_message_handler(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_unregister_message_handler(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_register_availability_handler__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_register_availability_handler__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_register_availability_handler__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_unregister_availability_handler__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_unregister_availability_handler__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_unregister_availability_handler__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application__wrap_application_unregister_availability_handler(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_register_subscription_handler__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_register_async_subscription_handler__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_unregister_subscription_handler(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_clear_all_handler(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_is_routing(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_set_routing_state(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_unsubscribe__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application__wrap_application_unsubscribe(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_register_subscription_status_handler__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_register_subscription_status_handler__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application__wrap_application_register_subscription_status_handler(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_unregister_subscription_status_handler(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_get_offered_services_async(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_set_watchdog_handler(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_set_sd_acceptance_required__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_set_sd_acceptance_required__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application__wrap_application_set_sd_acceptance_required(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_get_sd_acceptance_required(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_register_sd_acceptance_handler(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_register_reboot_notification_handler(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_register_routing_ready_handler(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_register_routing_state_handler(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_update_service_configuration(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_update_security_policy_configuration(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_remove_security_policy_configuration(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_register_subscription_handler__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_register_async_subscription_handler__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_subscribe_with_debounce(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_register_message_acceptance_handler(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_get_additional_data(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_register_availability_handler__SWIG_3(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_register_availability_handler__SWIG_4(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_register_availability_handler__SWIG_5(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application__wrap_application_register_availability_handler(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_register_subscription_handler__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application__wrap_application_register_subscription_handler(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_register_async_subscription_handler__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application__wrap_application_register_async_subscription_handler(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_register_message_handler_ext(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_get_configuration(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_application_get_policy_manager(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_application_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_application_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_application_inst : public _exports_application_templ<_exports_application_inst> {
public:
  using _exports_application_templ::_exports_application_templ;
  virtual ~_exports_application_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_application_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_application_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: application (_exports_application) */
// jsnapi_getclass
Napi::Function _exports_application_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_application_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_application_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_application_inst>::DefineClass(env, "application", symbolTable);
}

void _exports_application_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_application_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_application_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_member_function_descriptor
  members.erase("get_name");
  members.insert({
    "get_name",
      _exports_application_templ::InstanceMethod("get_name",
        &_exports_application_templ::_wrap_application_get_name,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_client");
  members.insert({
    "get_client",
      _exports_application_templ::InstanceMethod("get_client",
        &_exports_application_templ::_wrap_application_get_client,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_diagnosis");
  members.insert({
    "get_diagnosis",
      _exports_application_templ::InstanceMethod("get_diagnosis",
        &_exports_application_templ::_wrap_application_get_diagnosis,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("init");
  members.insert({
    "init",
      _exports_application_templ::InstanceMethod("init",
        &_exports_application_templ::_wrap_application_init,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("start");
  members.insert({
    "start",
      _exports_application_templ::InstanceMethod("start",
        &_exports_application_templ::_wrap_application_start,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("stop");
  members.insert({
    "stop",
      _exports_application_templ::InstanceMethod("stop",
        &_exports_application_templ::_wrap_application_stop,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("process");
  members.insert({
    "process",
      _exports_application_templ::InstanceMethod("process",
        &_exports_application_templ::_wrap_application__wrap_application_process,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_security_mode");
  members.insert({
    "get_security_mode",
      _exports_application_templ::InstanceMethod("get_security_mode",
        &_exports_application_templ::_wrap_application_get_security_mode,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("offer_service");
  members.insert({
    "offer_service",
      _exports_application_templ::InstanceMethod("offer_service",
        &_exports_application_templ::_wrap_application__wrap_application_offer_service,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("stop_offer_service");
  members.insert({
    "stop_offer_service",
      _exports_application_templ::InstanceMethod("stop_offer_service",
        &_exports_application_templ::_wrap_application__wrap_application_stop_offer_service,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("offer_event");
  members.insert({
    "offer_event",
      _exports_application_templ::InstanceMethod("offer_event",
        &_exports_application_templ::_wrap_application__wrap_application_offer_event,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("stop_offer_event");
  members.insert({
    "stop_offer_event",
      _exports_application_templ::InstanceMethod("stop_offer_event",
        &_exports_application_templ::_wrap_application_stop_offer_event,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("request_service");
  members.insert({
    "request_service",
      _exports_application_templ::InstanceMethod("request_service",
        &_exports_application_templ::_wrap_application__wrap_application_request_service,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("release_service");
  members.insert({
    "release_service",
      _exports_application_templ::InstanceMethod("release_service",
        &_exports_application_templ::_wrap_application_release_service,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("request_event");
  members.insert({
    "request_event",
      _exports_application_templ::InstanceMethod("request_event",
        &_exports_application_templ::_wrap_application__wrap_application_request_event,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("release_event");
  members.insert({
    "release_event",
      _exports_application_templ::InstanceMethod("release_event",
        &_exports_application_templ::_wrap_application_release_event,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("subscribe");
  members.insert({
    "subscribe",
      _exports_application_templ::InstanceMethod("subscribe",
        &_exports_application_templ::_wrap_application__wrap_application_subscribe,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("is_available");
  members.insert({
    "is_available",
      _exports_application_templ::InstanceMethod("is_available",
        &_exports_application_templ::_wrap_application__wrap_application_is_available,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("are_available");
  members.insert({
    "are_available",
      _exports_application_templ::InstanceMethod("are_available",
        &_exports_application_templ::_wrap_application__wrap_application_are_available,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("send");
  members.insert({
    "send",
      _exports_application_templ::InstanceMethod("send",
        &_exports_application_templ::_wrap_application_send,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("notify");
  members.insert({
    "notify",
      _exports_application_templ::InstanceMethod("notify",
        &_exports_application_templ::_wrap_application__wrap_application_notify,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("notify_one");
  members.insert({
    "notify_one",
      _exports_application_templ::InstanceMethod("notify_one",
        &_exports_application_templ::_wrap_application__wrap_application_notify_one,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("register_state_handler");
  members.insert({
    "register_state_handler",
      _exports_application_templ::InstanceMethod("register_state_handler",
        &_exports_application_templ::_wrap_application_register_state_handler,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("unregister_state_handler");
  members.insert({
    "unregister_state_handler",
      _exports_application_templ::InstanceMethod("unregister_state_handler",
        &_exports_application_templ::_wrap_application_unregister_state_handler,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("register_message_handler");
  members.insert({
    "register_message_handler",
      _exports_application_templ::InstanceMethod("register_message_handler",
        &_exports_application_templ::_wrap_application_register_message_handler,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("unregister_message_handler");
  members.insert({
    "unregister_message_handler",
      _exports_application_templ::InstanceMethod("unregister_message_handler",
        &_exports_application_templ::_wrap_application_unregister_message_handler,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("unregister_availability_handler");
  members.insert({
    "unregister_availability_handler",
      _exports_application_templ::InstanceMethod("unregister_availability_handler",
        &_exports_application_templ::_wrap_application__wrap_application_unregister_availability_handler,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("unregister_subscription_handler");
  members.insert({
    "unregister_subscription_handler",
      _exports_application_templ::InstanceMethod("unregister_subscription_handler",
        &_exports_application_templ::_wrap_application_unregister_subscription_handler,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("clear_all_handler");
  members.insert({
    "clear_all_handler",
      _exports_application_templ::InstanceMethod("clear_all_handler",
        &_exports_application_templ::_wrap_application_clear_all_handler,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("is_routing");
  members.insert({
    "is_routing",
      _exports_application_templ::InstanceMethod("is_routing",
        &_exports_application_templ::_wrap_application_is_routing,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_routing_state");
  members.insert({
    "set_routing_state",
      _exports_application_templ::InstanceMethod("set_routing_state",
        &_exports_application_templ::_wrap_application_set_routing_state,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("unsubscribe");
  members.insert({
    "unsubscribe",
      _exports_application_templ::InstanceMethod("unsubscribe",
        &_exports_application_templ::_wrap_application__wrap_application_unsubscribe,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("register_subscription_status_handler");
  members.insert({
    "register_subscription_status_handler",
      _exports_application_templ::InstanceMethod("register_subscription_status_handler",
        &_exports_application_templ::_wrap_application__wrap_application_register_subscription_status_handler,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("unregister_subscription_status_handler");
  members.insert({
    "unregister_subscription_status_handler",
      _exports_application_templ::InstanceMethod("unregister_subscription_status_handler",
        &_exports_application_templ::_wrap_application_unregister_subscription_status_handler,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_offered_services_async");
  members.insert({
    "get_offered_services_async",
      _exports_application_templ::InstanceMethod("get_offered_services_async",
        &_exports_application_templ::_wrap_application_get_offered_services_async,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_watchdog_handler");
  members.insert({
    "set_watchdog_handler",
      _exports_application_templ::InstanceMethod("set_watchdog_handler",
        &_exports_application_templ::_wrap_application_set_watchdog_handler,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_sd_acceptance_required");
  members.insert({
    "set_sd_acceptance_required",
      _exports_application_templ::InstanceMethod("set_sd_acceptance_required",
        &_exports_application_templ::_wrap_application__wrap_application_set_sd_acceptance_required,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_sd_acceptance_required");
  members.insert({
    "get_sd_acceptance_required",
      _exports_application_templ::InstanceMethod("get_sd_acceptance_required",
        &_exports_application_templ::_wrap_application_get_sd_acceptance_required,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("register_sd_acceptance_handler");
  members.insert({
    "register_sd_acceptance_handler",
      _exports_application_templ::InstanceMethod("register_sd_acceptance_handler",
        &_exports_application_templ::_wrap_application_register_sd_acceptance_handler,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("register_reboot_notification_handler");
  members.insert({
    "register_reboot_notification_handler",
      _exports_application_templ::InstanceMethod("register_reboot_notification_handler",
        &_exports_application_templ::_wrap_application_register_reboot_notification_handler,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("register_routing_ready_handler");
  members.insert({
    "register_routing_ready_handler",
      _exports_application_templ::InstanceMethod("register_routing_ready_handler",
        &_exports_application_templ::_wrap_application_register_routing_ready_handler,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("register_routing_state_handler");
  members.insert({
    "register_routing_state_handler",
      _exports_application_templ::InstanceMethod("register_routing_state_handler",
        &_exports_application_templ::_wrap_application_register_routing_state_handler,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("update_service_configuration");
  members.insert({
    "update_service_configuration",
      _exports_application_templ::InstanceMethod("update_service_configuration",
        &_exports_application_templ::_wrap_application_update_service_configuration,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("update_security_policy_configuration");
  members.insert({
    "update_security_policy_configuration",
      _exports_application_templ::InstanceMethod("update_security_policy_configuration",
        &_exports_application_templ::_wrap_application_update_security_policy_configuration,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("remove_security_policy_configuration");
  members.insert({
    "remove_security_policy_configuration",
      _exports_application_templ::InstanceMethod("remove_security_policy_configuration",
        &_exports_application_templ::_wrap_application_remove_security_policy_configuration,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("subscribe_with_debounce");
  members.insert({
    "subscribe_with_debounce",
      _exports_application_templ::InstanceMethod("subscribe_with_debounce",
        &_exports_application_templ::_wrap_application_subscribe_with_debounce,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("register_message_acceptance_handler");
  members.insert({
    "register_message_acceptance_handler",
      _exports_application_templ::InstanceMethod("register_message_acceptance_handler",
        &_exports_application_templ::_wrap_application_register_message_acceptance_handler,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_additional_data");
  members.insert({
    "get_additional_data",
      _exports_application_templ::InstanceMethod("get_additional_data",
        &_exports_application_templ::_wrap_application_get_additional_data,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("register_availability_handler");
  members.insert({
    "register_availability_handler",
      _exports_application_templ::InstanceMethod("register_availability_handler",
        &_exports_application_templ::_wrap_application__wrap_application_register_availability_handler,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("register_subscription_handler");
  members.insert({
    "register_subscription_handler",
      _exports_application_templ::InstanceMethod("register_subscription_handler",
        &_exports_application_templ::_wrap_application__wrap_application_register_subscription_handler,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("register_async_subscription_handler");
  members.insert({
    "register_async_subscription_handler",
      _exports_application_templ::InstanceMethod("register_async_subscription_handler",
        &_exports_application_templ::_wrap_application__wrap_application_register_async_subscription_handler,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("register_message_handler_ext");
  members.insert({
    "register_message_handler_ext",
      _exports_application_templ::InstanceMethod("register_message_handler_ext",
        &_exports_application_templ::_wrap_application_register_message_handler_ext,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_configuration");
  members.insert({
    "get_configuration",
      _exports_application_templ::InstanceMethod("get_configuration",
        &_exports_application_templ::_wrap_application_get_configuration,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_policy_manager");
  members.insert({
    "get_policy_manager",
      _exports_application_templ::InstanceMethod("get_policy_manager",
        &_exports_application_templ::_wrap_application_get_policy_manager,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_message_templ : public _exports_message_base_templ<SWIG_OBJ_WRAP> {
public:
  _exports_message_templ(const Napi::CallbackInfo &);
_exports_message_templ(bool, const Napi::CallbackInfo &);
virtual ~_exports_message_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_message_get_payload(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_set_payload(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_get_check_result(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_set_check_result(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_is_valid_crc(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_get_uid(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_get_gid(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_get_env(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_get_sec_client(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_message_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_message_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_message_inst : public _exports_message_templ<_exports_message_inst> {
public:
  using _exports_message_templ::_exports_message_templ;
  virtual ~_exports_message_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_message_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_message_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: message (_exports_message) */
// jsnapi_getclass
Napi::Function _exports_message_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_message_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_message_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_message_inst>::DefineClass(env, "message", symbolTable);
}

void _exports_message_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_message_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_message_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, _exports_message_base_templ<_exports_message_base_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  _exports_message_base_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_member_function_descriptor
  members.erase("get_message");
  members.insert({
    "get_message",
      _exports_message_base_templ::InstanceMethod("get_message",
        &_exports_message_base_templ::_wrap_message_base_get_message,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_message");
  members.insert({
    "set_message",
      _exports_message_base_templ::InstanceMethod("set_message",
        &_exports_message_base_templ::_wrap_message_base_set_message,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_service");
  members.insert({
    "get_service",
      _exports_message_base_templ::InstanceMethod("get_service",
        &_exports_message_base_templ::_wrap_message_base_get_service,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_service");
  members.insert({
    "set_service",
      _exports_message_base_templ::InstanceMethod("set_service",
        &_exports_message_base_templ::_wrap_message_base_set_service,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_instance");
  members.insert({
    "get_instance",
      _exports_message_base_templ::InstanceMethod("get_instance",
        &_exports_message_base_templ::_wrap_message_base_get_instance,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_instance");
  members.insert({
    "set_instance",
      _exports_message_base_templ::InstanceMethod("set_instance",
        &_exports_message_base_templ::_wrap_message_base_set_instance,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_method");
  members.insert({
    "get_method",
      _exports_message_base_templ::InstanceMethod("get_method",
        &_exports_message_base_templ::_wrap_message_base_get_method,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_method");
  members.insert({
    "set_method",
      _exports_message_base_templ::InstanceMethod("set_method",
        &_exports_message_base_templ::_wrap_message_base_set_method,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_length");
  members.insert({
    "get_length",
      _exports_message_base_templ::InstanceMethod("get_length",
        &_exports_message_base_templ::_wrap_message_base_get_length,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_request");
  members.insert({
    "get_request",
      _exports_message_base_templ::InstanceMethod("get_request",
        &_exports_message_base_templ::_wrap_message_base_get_request,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_client");
  members.insert({
    "get_client",
      _exports_message_base_templ::InstanceMethod("get_client",
        &_exports_message_base_templ::_wrap_message_base_get_client,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_client");
  members.insert({
    "set_client",
      _exports_message_base_templ::InstanceMethod("set_client",
        &_exports_message_base_templ::_wrap_message_base_set_client,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_session");
  members.insert({
    "get_session",
      _exports_message_base_templ::InstanceMethod("get_session",
        &_exports_message_base_templ::_wrap_message_base_get_session,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_session");
  members.insert({
    "set_session",
      _exports_message_base_templ::InstanceMethod("set_session",
        &_exports_message_base_templ::_wrap_message_base_set_session,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_protocol_version");
  members.insert({
    "get_protocol_version",
      _exports_message_base_templ::InstanceMethod("get_protocol_version",
        &_exports_message_base_templ::_wrap_message_base_get_protocol_version,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_interface_version");
  members.insert({
    "get_interface_version",
      _exports_message_base_templ::InstanceMethod("get_interface_version",
        &_exports_message_base_templ::_wrap_message_base_get_interface_version,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_interface_version");
  members.insert({
    "set_interface_version",
      _exports_message_base_templ::InstanceMethod("set_interface_version",
        &_exports_message_base_templ::_wrap_message_base_set_interface_version,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_message_type");
  members.insert({
    "get_message_type",
      _exports_message_base_templ::InstanceMethod("get_message_type",
        &_exports_message_base_templ::_wrap_message_base_get_message_type,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_message_type");
  members.insert({
    "set_message_type",
      _exports_message_base_templ::InstanceMethod("set_message_type",
        &_exports_message_base_templ::_wrap_message_base_set_message_type,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_return_code");
  members.insert({
    "get_return_code",
      _exports_message_base_templ::InstanceMethod("get_return_code",
        &_exports_message_base_templ::_wrap_message_base_get_return_code,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_return_code");
  members.insert({
    "set_return_code",
      _exports_message_base_templ::InstanceMethod("set_return_code",
        &_exports_message_base_templ::_wrap_message_base_set_return_code,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("is_reliable");
  members.insert({
    "is_reliable",
      _exports_message_base_templ::InstanceMethod("is_reliable",
        &_exports_message_base_templ::_wrap_message_base_is_reliable,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_reliable");
  members.insert({
    "set_reliable",
      _exports_message_base_templ::InstanceMethod("set_reliable",
        &_exports_message_base_templ::_wrap_message_base_set_reliable,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("is_initial");
  members.insert({
    "is_initial",
      _exports_message_base_templ::InstanceMethod("is_initial",
        &_exports_message_base_templ::_wrap_message_base_is_initial,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_initial");
  members.insert({
    "set_initial",
      _exports_message_base_templ::InstanceMethod("set_initial",
        &_exports_message_base_templ::_wrap_message_base_set_initial,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_payload");
  members.insert({
    "get_payload",
      _exports_message_templ::InstanceMethod("get_payload",
        &_exports_message_templ::_wrap_message_get_payload,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_payload");
  members.insert({
    "set_payload",
      _exports_message_templ::InstanceMethod("set_payload",
        &_exports_message_templ::_wrap_message_set_payload,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_check_result");
  members.insert({
    "get_check_result",
      _exports_message_templ::InstanceMethod("get_check_result",
        &_exports_message_templ::_wrap_message_get_check_result,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_check_result");
  members.insert({
    "set_check_result",
      _exports_message_templ::InstanceMethod("set_check_result",
        &_exports_message_templ::_wrap_message_set_check_result,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("is_valid_crc");
  members.insert({
    "is_valid_crc",
      _exports_message_templ::InstanceMethod("is_valid_crc",
        &_exports_message_templ::_wrap_message_is_valid_crc,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_uid");
  members.insert({
    "get_uid",
      _exports_message_templ::InstanceMethod("get_uid",
        &_exports_message_templ::_wrap_message_get_uid,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_gid");
  members.insert({
    "get_gid",
      _exports_message_templ::InstanceMethod("get_gid",
        &_exports_message_templ::_wrap_message_get_gid,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_env");
  members.insert({
    "get_env",
      _exports_message_templ::InstanceMethod("get_env",
        &_exports_message_templ::_wrap_message_get_env,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_sec_client");
  members.insert({
    "get_sec_client",
      _exports_message_templ::InstanceMethod("get_sec_client",
        &_exports_message_templ::_wrap_message_get_sec_client,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_payload_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_payload_templ(const Napi::CallbackInfo &);
_exports_payload_templ(bool, const Napi::CallbackInfo &);
virtual ~_exports_payload_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_payload_get_data__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_payload_get_data__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_payload__wrap_payload_get_data(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_payload_set_data__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_payload_set_data__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_payload_get_length(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_payload_set_capacity(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_payload_set_data__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_payload__wrap_payload_set_data(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_payload_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_payload_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_payload_inst : public _exports_payload_templ<_exports_payload_inst> {
public:
  using _exports_payload_templ::_exports_payload_templ;
  virtual ~_exports_payload_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_payload_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_payload_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: payload (_exports_payload) */
// jsnapi_getclass
Napi::Function _exports_payload_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_payload_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_payload_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_payload_inst>::DefineClass(env, "payload", symbolTable);
}

void _exports_payload_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_payload_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_payload_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_member_function_descriptor
  members.erase("get_data");
  members.insert({
    "get_data",
      _exports_payload_templ::InstanceMethod("get_data",
        &_exports_payload_templ::_wrap_payload__wrap_payload_get_data,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("get_length");
  members.insert({
    "get_length",
      _exports_payload_templ::InstanceMethod("get_length",
        &_exports_payload_templ::_wrap_payload_get_length,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_capacity");
  members.insert({
    "set_capacity",
      _exports_payload_templ::InstanceMethod("set_capacity",
        &_exports_payload_templ::_wrap_payload_set_capacity,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("set_data");
  members.insert({
    "set_data",
      _exports_payload_templ::InstanceMethod("set_data",
        &_exports_payload_templ::_wrap_payload__wrap_payload_set_data,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ip_address_t_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ip_address_t_templ(const Napi::CallbackInfo &);
_exports_ip_address_t_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ip_address_t_is_v4__get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ip_address_t_is_v4__set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ip_address_t(const Napi::CallbackInfo &);
virtual ~_exports_ip_address_t_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ip_address_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ip_address_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ip_address_t_inst : public _exports_ip_address_t_templ<_exports_ip_address_t_inst> {
public:
  using _exports_ip_address_t_templ::_exports_ip_address_t_templ;
  virtual ~_exports_ip_address_t_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ip_address_t_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ip_address_t_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ip_address_t (_exports_ip_address_t) */
// jsnapi_getclass
Napi::Function _exports_ip_address_t_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ip_address_t_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ip_address_t_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ip_address_t_inst>::DefineClass(env, "ip_address_t", symbolTable);
}

void _exports_ip_address_t_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ip_address_t_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ip_address_t_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("is_v4_");
  members.insert({
    "is_v4_",
      _exports_ip_address_t_templ::InstanceAccessor("is_v4_",
        &_exports_ip_address_t_templ::_wrap_ip_address_t_is_v4__get,
        &_exports_ip_address_t_templ::_wrap_ip_address_t_is_v4__set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_remote_info_t_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_remote_info_t_templ(const Napi::CallbackInfo &);
_exports_remote_info_t_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_remote_info_t_ip__get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_remote_info_t_ip__set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_remote_info_t_first__get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_remote_info_t_first__set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_remote_info_t_last__get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_remote_info_t_last__set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_remote_info_t_is_range__get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_remote_info_t_is_range__set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_remote_info_t_is_reliable__get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_remote_info_t_is_reliable__set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_remote_info_t(const Napi::CallbackInfo &);
virtual ~_exports_remote_info_t_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_remote_info_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_remote_info_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_remote_info_t_inst : public _exports_remote_info_t_templ<_exports_remote_info_t_inst> {
public:
  using _exports_remote_info_t_templ::_exports_remote_info_t_templ;
  virtual ~_exports_remote_info_t_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_remote_info_t_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_remote_info_t_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: remote_info_t (_exports_remote_info_t) */
// jsnapi_getclass
Napi::Function _exports_remote_info_t_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_remote_info_t_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_remote_info_t_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_remote_info_t_inst>::DefineClass(env, "remote_info_t", symbolTable);
}

void _exports_remote_info_t_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_remote_info_t_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_remote_info_t_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("ip_");
  members.insert({
    "ip_",
      _exports_remote_info_t_templ::InstanceAccessor("ip_",
        &_exports_remote_info_t_templ::_wrap_remote_info_t_ip__get,
        &_exports_remote_info_t_templ::_wrap_remote_info_t_ip__set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("first_");
  members.insert({
    "first_",
      _exports_remote_info_t_templ::InstanceAccessor("first_",
        &_exports_remote_info_t_templ::_wrap_remote_info_t_first__get,
        &_exports_remote_info_t_templ::_wrap_remote_info_t_first__set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("last_");
  members.insert({
    "last_",
      _exports_remote_info_t_templ::InstanceAccessor("last_",
        &_exports_remote_info_t_templ::_wrap_remote_info_t_last__get,
        &_exports_remote_info_t_templ::_wrap_remote_info_t_last__set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("is_range_");
  members.insert({
    "is_range_",
      _exports_remote_info_t_templ::InstanceAccessor("is_range_",
        &_exports_remote_info_t_templ::_wrap_remote_info_t_is_range__get,
        &_exports_remote_info_t_templ::_wrap_remote_info_t_is_range__set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("is_reliable_");
  members.insert({
    "is_reliable_",
      _exports_remote_info_t_templ::InstanceAccessor("is_reliable_",
        &_exports_remote_info_t_templ::_wrap_remote_info_t_is_reliable__get,
        &_exports_remote_info_t_templ::_wrap_remote_info_t_is_reliable__set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_message_acceptance_t_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_message_acceptance_t_templ(const Napi::CallbackInfo &);
_exports_message_acceptance_t_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_acceptance_t_remote_address__get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_message_acceptance_t_remote_address__set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_acceptance_t_local_port__get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_message_acceptance_t_local_port__set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_acceptance_t_is_local__get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_message_acceptance_t_is_local__set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_acceptance_t_service__get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_message_acceptance_t_service__set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_message_acceptance_t_instance__get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_message_acceptance_t_instance__set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_message_acceptance_t(const Napi::CallbackInfo &);
virtual ~_exports_message_acceptance_t_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_message_acceptance_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_message_acceptance_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_message_acceptance_t_inst : public _exports_message_acceptance_t_templ<_exports_message_acceptance_t_inst> {
public:
  using _exports_message_acceptance_t_templ::_exports_message_acceptance_t_templ;
  virtual ~_exports_message_acceptance_t_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_message_acceptance_t_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_message_acceptance_t_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: message_acceptance_t (_exports_message_acceptance_t) */
// jsnapi_getclass
Napi::Function _exports_message_acceptance_t_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_message_acceptance_t_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_message_acceptance_t_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_message_acceptance_t_inst>::DefineClass(env, "message_acceptance_t", symbolTable);
}

void _exports_message_acceptance_t_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_message_acceptance_t_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_message_acceptance_t_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("remote_address_");
  members.insert({
    "remote_address_",
      _exports_message_acceptance_t_templ::InstanceAccessor("remote_address_",
        &_exports_message_acceptance_t_templ::_wrap_message_acceptance_t_remote_address__get,
        &_exports_message_acceptance_t_templ::_wrap_message_acceptance_t_remote_address__set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("local_port_");
  members.insert({
    "local_port_",
      _exports_message_acceptance_t_templ::InstanceAccessor("local_port_",
        &_exports_message_acceptance_t_templ::_wrap_message_acceptance_t_local_port__get,
        &_exports_message_acceptance_t_templ::_wrap_message_acceptance_t_local_port__set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("is_local_");
  members.insert({
    "is_local_",
      _exports_message_acceptance_t_templ::InstanceAccessor("is_local_",
        &_exports_message_acceptance_t_templ::_wrap_message_acceptance_t_is_local__get,
        &_exports_message_acceptance_t_templ::_wrap_message_acceptance_t_is_local__set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("service_");
  members.insert({
    "service_",
      _exports_message_acceptance_t_templ::InstanceAccessor("service_",
        &_exports_message_acceptance_t_templ::_wrap_message_acceptance_t_service__get,
        &_exports_message_acceptance_t_templ::_wrap_message_acceptance_t_service__set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("instance_");
  members.insert({
    "instance_",
      _exports_message_acceptance_t_templ::InstanceAccessor("instance_",
        &_exports_message_acceptance_t_templ::_wrap_message_acceptance_t_instance__get,
        &_exports_message_acceptance_t_templ::_wrap_message_acceptance_t_instance__set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}





// js_global_getter
Napi::Value _wrap_DEFAULT_MAJOR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::major_version_t result;
  
  result = (vsomeip_v3::major_version_t)vsomeip_v3::DEFAULT_MAJOR;
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_DEFAULT_MINOR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::minor_version_t result;
  
  result = (vsomeip_v3::minor_version_t)vsomeip_v3::DEFAULT_MINOR;
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_DEFAULT_TTL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::ttl_t result;
  
  result = (vsomeip_v3::ttl_t)vsomeip_v3::DEFAULT_TTL;
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_DEFAULT_MULTICAST_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::string result;
  
  result = (std::string)vsomeip_v3::DEFAULT_MULTICAST;
  jsresult = SWIG_NewPointerObj((new std::string(result)), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_DEFAULT_PORT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  uint16_t result;
  
  result = (uint16_t)vsomeip_v3::DEFAULT_PORT;
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_ILLEGAL_PORT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  uint16_t result;
  
  result = (uint16_t)vsomeip_v3::ILLEGAL_PORT;
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_ANY_PORT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  uint16_t result;
  
  result = (uint16_t)vsomeip_v3::ANY_PORT;
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_NO_TRACE_FILTER_EXPRESSION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  uint16_t result;
  
  result = (uint16_t)vsomeip_v3::NO_TRACE_FILTER_EXPRESSION;
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_ANY_SERVICE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::service_t result;
  
  result = (vsomeip_v3::service_t)vsomeip_v3::ANY_SERVICE;
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_ANY_INSTANCE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::instance_t result;
  
  result = (vsomeip_v3::instance_t)vsomeip_v3::ANY_INSTANCE;
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_ANY_EVENTGROUP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::eventgroup_t result;
  
  result = (vsomeip_v3::eventgroup_t)vsomeip_v3::ANY_EVENTGROUP;
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_ANY_METHOD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::method_t result;
  
  result = (vsomeip_v3::method_t)vsomeip_v3::ANY_METHOD;
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_ANY_MAJOR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::major_version_t result;
  
  result = (vsomeip_v3::major_version_t)vsomeip_v3::ANY_MAJOR;
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_ANY_MINOR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::minor_version_t result;
  
  result = (vsomeip_v3::minor_version_t)vsomeip_v3::ANY_MINOR;
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_DEFAULT_EVENTGROUP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::eventgroup_t result;
  
  result = (vsomeip_v3::eventgroup_t)vsomeip_v3::DEFAULT_EVENTGROUP;
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_ILLEGAL_CLIENT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::client_t result;
  
  result = (vsomeip_v3::client_t)vsomeip_v3::ILLEGAL_CLIENT;
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_INVALID_METHOD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::method_t result;
  
  result = (vsomeip_v3::method_t)vsomeip_v3::INVALID_METHOD;
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_MAGIC_COOKIE_CLIENT_MESSAGE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::byte_t result;
  
  result = (vsomeip_v3::byte_t)vsomeip_v3::MAGIC_COOKIE_CLIENT_MESSAGE;
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_MAGIC_COOKIE_SERVICE_MESSAGE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::byte_t result;
  
  result = (vsomeip_v3::byte_t)vsomeip_v3::MAGIC_COOKIE_SERVICE_MESSAGE;
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_MAGIC_COOKIE_SIZE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::length_t result;
  
  result = (vsomeip_v3::length_t)vsomeip_v3::MAGIC_COOKIE_SIZE;
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_MAGIC_COOKIE_REQUEST_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::request_t result;
  
  result = (vsomeip_v3::request_t)vsomeip_v3::MAGIC_COOKIE_REQUEST;
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_MAGIC_COOKIE_CLIENT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::client_t result;
  
  result = (vsomeip_v3::client_t)vsomeip_v3::MAGIC_COOKIE_CLIENT;
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_MAGIC_COOKIE_PROTOCOL_VERSION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::protocol_version_t result;
  
  result = (vsomeip_v3::protocol_version_t)vsomeip_v3::MAGIC_COOKIE_PROTOCOL_VERSION;
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_MAGIC_COOKIE_INTERFACE_VERSION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::interface_version_t result;
  
  result = (vsomeip_v3::interface_version_t)vsomeip_v3::MAGIC_COOKIE_INTERFACE_VERSION;
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_MAGIC_COOKIE_CLIENT_MESSAGE_TYPE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_type_e result;
  
  result = (vsomeip_v3::message_type_e)vsomeip_v3::MAGIC_COOKIE_CLIENT_MESSAGE_TYPE;
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_MAGIC_COOKIE_SERVICE_MESSAGE_TYPE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_type_e result;
  
  result = (vsomeip_v3::message_type_e)vsomeip_v3::MAGIC_COOKIE_SERVICE_MESSAGE_TYPE;
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_MAGIC_COOKIE_RETURN_CODE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::return_code_e result;
  
  result = (vsomeip_v3::return_code_e)vsomeip_v3::MAGIC_COOKIE_RETURN_CODE;
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_CLIENT_COOKIE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::byte_t *result = 0 ;
  
  result = (vsomeip_v3::byte_t *)(vsomeip_v3::byte_t *)vsomeip_v3::CLIENT_COOKIE;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_SERVICE_COOKIE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::byte_t *result = 0 ;
  
  result = (vsomeip_v3::byte_t *)(vsomeip_v3::byte_t *)vsomeip_v3::SERVICE_COOKIE;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_ANY_EVENT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::event_t result;
  
  result = (vsomeip_v3::event_t)vsomeip_v3::ANY_EVENT;
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_ANY_CLIENT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::client_t result;
  
  result = (vsomeip_v3::client_t)vsomeip_v3::ANY_CLIENT;
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_VSOMEIP_ALL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  int result;
  
  result = (int)vsomeip_v3::VSOMEIP_ALL;
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value _wrap_DEFAULT_SECURITY_UPDATE_ID_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::pending_security_update_id_t result;
  
  result = (vsomeip_v3::pending_security_update_id_t)vsomeip_v3::DEFAULT_SECURITY_UPDATE_ID;
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_state_type_e_ST_REGISTERED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::state_type_e::ST_REGISTERED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_state_type_e_ST_DEREGISTERED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::state_type_e::ST_DEREGISTERED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_message_type_e_MT_REQUEST_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::message_type_e::MT_REQUEST));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_message_type_e_MT_REQUEST_NO_RETURN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::message_type_e::MT_REQUEST_NO_RETURN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_message_type_e_MT_NOTIFICATION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::message_type_e::MT_NOTIFICATION));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_message_type_e_MT_REQUEST_ACK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::message_type_e::MT_REQUEST_ACK));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_message_type_e_MT_REQUEST_NO_RETURN_ACK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::message_type_e::MT_REQUEST_NO_RETURN_ACK));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_message_type_e_MT_NOTIFICATION_ACK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::message_type_e::MT_NOTIFICATION_ACK));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_message_type_e_MT_RESPONSE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::message_type_e::MT_RESPONSE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_message_type_e_MT_ERROR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::message_type_e::MT_ERROR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_message_type_e_MT_RESPONSE_ACK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::message_type_e::MT_RESPONSE_ACK));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_message_type_e_MT_ERROR_ACK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::message_type_e::MT_ERROR_ACK));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_message_type_e_MT_UNKNOWN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::message_type_e::MT_UNKNOWN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_return_code_e_E_OK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::return_code_e::E_OK));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_return_code_e_E_NOT_OK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::return_code_e::E_NOT_OK));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_return_code_e_E_UNKNOWN_SERVICE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::return_code_e::E_UNKNOWN_SERVICE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_return_code_e_E_UNKNOWN_METHOD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::return_code_e::E_UNKNOWN_METHOD));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_return_code_e_E_NOT_READY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::return_code_e::E_NOT_READY));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_return_code_e_E_NOT_REACHABLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::return_code_e::E_NOT_REACHABLE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_return_code_e_E_TIMEOUT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::return_code_e::E_TIMEOUT));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_return_code_e_E_WRONG_PROTOCOL_VERSION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::return_code_e::E_WRONG_PROTOCOL_VERSION));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_return_code_e_E_WRONG_INTERFACE_VERSION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::return_code_e::E_WRONG_INTERFACE_VERSION));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_return_code_e_E_MALFORMED_MESSAGE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::return_code_e::E_MALFORMED_MESSAGE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_return_code_e_E_WRONG_MESSAGE_TYPE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::return_code_e::E_WRONG_MESSAGE_TYPE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_return_code_e_E_UNKNOWN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::return_code_e::E_UNKNOWN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_routing_state_e_RS_RUNNING_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::routing_state_e::RS_RUNNING));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_routing_state_e_RS_SUSPENDED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::routing_state_e::RS_SUSPENDED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_routing_state_e_RS_RESUMED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::routing_state_e::RS_RESUMED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_routing_state_e_RS_SHUTDOWN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::routing_state_e::RS_SHUTDOWN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_routing_state_e_RS_DIAGNOSIS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::routing_state_e::RS_DIAGNOSIS));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_routing_state_e_RS_DELAYED_RESUME_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::routing_state_e::RS_DELAYED_RESUME));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_routing_state_e_RS_UNKNOWN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::routing_state_e::RS_UNKNOWN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_offer_type_e_OT_LOCAL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::offer_type_e::OT_LOCAL));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_offer_type_e_OT_REMOTE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::offer_type_e::OT_REMOTE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_offer_type_e_OT_ALL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::offer_type_e::OT_ALL));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_event_type_e_ET_EVENT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::event_type_e::ET_EVENT));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_event_type_e_ET_SELECTIVE_EVENT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::event_type_e::ET_SELECTIVE_EVENT));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_event_type_e_ET_FIELD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::event_type_e::ET_FIELD));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_event_type_e_ET_UNKNOWN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::event_type_e::ET_UNKNOWN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_security_mode_e_SM_OFF_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::security_mode_e::SM_OFF));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_security_mode_e_SM_ON_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::security_mode_e::SM_ON));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_security_mode_e_SM_AUDIT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::security_mode_e::SM_AUDIT));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_security_update_state_e_SU_SUCCESS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::security_update_state_e::SU_SUCCESS));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_security_update_state_e_SU_NOT_ALLOWED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::security_update_state_e::SU_NOT_ALLOWED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_security_update_state_e_SU_UNKNOWN_USER_ID_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::security_update_state_e::SU_UNKNOWN_USER_ID));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_security_update_state_e_SU_INVALID_FORMAT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::security_update_state_e::SU_INVALID_FORMAT));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_reliability_type_e_RT_RELIABLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::reliability_type_e::RT_RELIABLE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_reliability_type_e_RT_UNRELIABLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::reliability_type_e::RT_UNRELIABLE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_reliability_type_e_RT_BOTH_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::reliability_type_e::RT_BOTH));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_reliability_type_e_RT_UNKNOWN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::reliability_type_e::RT_UNKNOWN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_availability_state_e_AS_UNAVAILABLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::availability_state_e::AS_UNAVAILABLE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_availability_state_e_AS_OFFERED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::availability_state_e::AS_OFFERED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_availability_state_e_AS_AVAILABLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::availability_state_e::AS_AVAILABLE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_availability_state_e_AS_UNKNOWN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::availability_state_e::AS_UNKNOWN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_handler_registration_type_e_HRT_REPLACE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::handler_registration_type_e::HRT_REPLACE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_handler_registration_type_e_HRT_PREPEND_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::handler_registration_type_e::HRT_PREPEND));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_handler_registration_type_e_HRT_APPEND_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::handler_registration_type_e::HRT_APPEND));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_handler_registration_type_e_HRT_UNKNOWN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::handler_registration_type_e::HRT_UNKNOWN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_endianess_e_be_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::endianess_e::be));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_endianess_e_le_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(vsomeip_v3::endianess_e::le));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_message_base_templ<SWIG_OBJ_WRAP>::~_exports_message_base_templ() {
  auto arg1 = reinterpret_cast<vsomeip_v3::message_base *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_get_message(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::message_t result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_get_message.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_get_message" "', argument " "1"" of type '" "vsomeip_v3::message_base const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);result = (vsomeip_v3::message_t)((vsomeip_v3::message_base const *)arg1)->get_message();
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_set_message(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  vsomeip_v3::message_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_set_message.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_set_message" "', argument " "1"" of type '" "vsomeip_v3::message_base *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_base_set_message" "', argument " "2"" of type '" "vsomeip_v3::message_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::message_t >(val2);(arg1)->set_message(arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_get_service(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::service_t result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_get_service.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_get_service" "', argument " "1"" of type '" "vsomeip_v3::message_base const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);result = (vsomeip_v3::service_t)((vsomeip_v3::message_base const *)arg1)->get_service();
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_set_service(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  vsomeip_v3::service_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_set_service.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_set_service" "', argument " "1"" of type '" "vsomeip_v3::message_base *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_base_set_service" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);(arg1)->set_service(arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_get_instance(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::instance_t result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_get_instance.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_get_instance" "', argument " "1"" of type '" "vsomeip_v3::message_base const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);result = (vsomeip_v3::instance_t)((vsomeip_v3::message_base const *)arg1)->get_instance();
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_set_instance(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  vsomeip_v3::instance_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_set_instance.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_set_instance" "', argument " "1"" of type '" "vsomeip_v3::message_base *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_base_set_instance" "', argument " "2"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::instance_t >(val2);(arg1)->set_instance(arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_get_method(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::method_t result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_get_method.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_get_method" "', argument " "1"" of type '" "vsomeip_v3::message_base const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);result = (vsomeip_v3::method_t)((vsomeip_v3::message_base const *)arg1)->get_method();
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_set_method(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  vsomeip_v3::method_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_set_method.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_set_method" "', argument " "1"" of type '" "vsomeip_v3::message_base *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_base_set_method" "', argument " "2"" of type '" "vsomeip_v3::method_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::method_t >(val2);(arg1)->set_method(arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_get_length(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::length_t result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_get_length.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_get_length" "', argument " "1"" of type '" "vsomeip_v3::message_base const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);result = (vsomeip_v3::length_t)((vsomeip_v3::message_base const *)arg1)->get_length();
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_get_request(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::request_t result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_get_request.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_get_request" "', argument " "1"" of type '" "vsomeip_v3::message_base const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);result = (vsomeip_v3::request_t)((vsomeip_v3::message_base const *)arg1)->get_request();
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_get_client(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::client_t result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_get_client.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_get_client" "', argument " "1"" of type '" "vsomeip_v3::message_base const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);result = (vsomeip_v3::client_t)((vsomeip_v3::message_base const *)arg1)->get_client();
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_set_client(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  vsomeip_v3::client_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_set_client.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_set_client" "', argument " "1"" of type '" "vsomeip_v3::message_base *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_base_set_client" "', argument " "2"" of type '" "vsomeip_v3::client_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::client_t >(val2);(arg1)->set_client(arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_get_session(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::session_t result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_get_session.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_get_session" "', argument " "1"" of type '" "vsomeip_v3::message_base const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);result = (vsomeip_v3::session_t)((vsomeip_v3::message_base const *)arg1)->get_session();
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_set_session(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  vsomeip_v3::session_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_set_session.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_set_session" "', argument " "1"" of type '" "vsomeip_v3::message_base *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_base_set_session" "', argument " "2"" of type '" "vsomeip_v3::session_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::session_t >(val2);(arg1)->set_session(arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_get_protocol_version(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::protocol_version_t result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_get_protocol_version.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_get_protocol_version" "', argument " "1"" of type '" "vsomeip_v3::message_base const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);result = (vsomeip_v3::protocol_version_t)((vsomeip_v3::message_base const *)arg1)->get_protocol_version();
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_get_interface_version(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::interface_version_t result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_get_interface_version.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_get_interface_version" "', argument " "1"" of type '" "vsomeip_v3::message_base const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);result = (vsomeip_v3::interface_version_t)((vsomeip_v3::message_base const *)arg1)->get_interface_version();
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_set_interface_version(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  vsomeip_v3::interface_version_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_set_interface_version.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_set_interface_version" "', argument " "1"" of type '" "vsomeip_v3::message_base *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_base_set_interface_version" "', argument " "2"" of type '" "vsomeip_v3::interface_version_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::interface_version_t >(val2);(arg1)->set_interface_version(arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_get_message_type(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::message_type_e result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_get_message_type.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_get_message_type" "', argument " "1"" of type '" "vsomeip_v3::message_base const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);result = (vsomeip_v3::message_type_e)((vsomeip_v3::message_base const *)arg1)->get_message_type();
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_set_message_type(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  vsomeip_v3::message_type_e arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_set_message_type.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_set_message_type" "', argument " "1"" of type '" "vsomeip_v3::message_base *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);ecode2 = SWIG_AsVal_int(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_base_set_message_type" "', argument " "2"" of type '" "vsomeip_v3::message_type_e""'");
  } 
  arg2 = static_cast< vsomeip_v3::message_type_e >(val2);(arg1)->set_message_type(arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_get_return_code(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::return_code_e result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_get_return_code.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_get_return_code" "', argument " "1"" of type '" "vsomeip_v3::message_base const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);result = (vsomeip_v3::return_code_e)((vsomeip_v3::message_base const *)arg1)->get_return_code();
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_set_return_code(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  vsomeip_v3::return_code_e arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_set_return_code.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_set_return_code" "', argument " "1"" of type '" "vsomeip_v3::message_base *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);ecode2 = SWIG_AsVal_int(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_base_set_return_code" "', argument " "2"" of type '" "vsomeip_v3::return_code_e""'");
  } 
  arg2 = static_cast< vsomeip_v3::return_code_e >(val2);(arg1)->set_return_code(arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_is_reliable(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_is_reliable.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_is_reliable" "', argument " "1"" of type '" "vsomeip_v3::message_base const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);result = (bool)((vsomeip_v3::message_base const *)arg1)->is_reliable();
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_set_reliable(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_set_reliable.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_set_reliable" "', argument " "1"" of type '" "vsomeip_v3::message_base *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);ecode2 = SWIG_AsVal_bool(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_base_set_reliable" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);(arg1)->set_reliable(arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_is_initial(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_is_initial.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_is_initial" "', argument " "1"" of type '" "vsomeip_v3::message_base const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);result = (bool)((vsomeip_v3::message_base const *)arg1)->is_initial();
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_base_templ<SWIG_OBJ_WRAP>::_wrap_message_base_set_initial(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_base *arg1 = (vsomeip_v3::message_base *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_base_set_initial.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_base_set_initial" "', argument " "1"" of type '" "vsomeip_v3::message_base *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_base * >(argp1);ecode2 = SWIG_AsVal_bool(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_base_set_initial" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);(arg1)->set_initial(arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_veto_ctor
template <typename SWIG_OBJ_WRAP>
_exports_message_base_templ<SWIG_OBJ_WRAP>::_exports_message_base_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS as its
    // base abstract class
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  SWIG_Error(SWIG_ERROR, "Class message_base can not be instantiated");
  return;
  goto fail;
fail:
  return;
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_message_base_templ<SWIG_OBJ_WRAP>::_exports_message_base_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debounce_filter_t_templ<SWIG_OBJ_WRAP>::_wrap_new_debounce_filter_t__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  vsomeip_v3::debounce_filter_t *result;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->owned = true;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_debounce_filter_t__SWIG_0.");
  }
  result = (vsomeip_v3::debounce_filter_t *)new vsomeip_v3::debounce_filter_t();
  
  
  this->self = result;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debounce_filter_t_templ<SWIG_OBJ_WRAP>::_wrap_new_debounce_filter_t__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  vsomeip_v3::debounce_filter_t *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::debounce_filter_t *result;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->owned = true;
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_debounce_filter_t__SWIG_1.");
  }
  res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_vsomeip_v3__debounce_filter_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_debounce_filter_t" "', argument " "1"" of type '" "vsomeip_v3::debounce_filter_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_debounce_filter_t" "', argument " "1"" of type '" "vsomeip_v3::debounce_filter_t const &""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::debounce_filter_t * >(argp1);result = (vsomeip_v3::debounce_filter_t *)new vsomeip_v3::debounce_filter_t((vsomeip_v3::debounce_filter_t const &)*arg1);
  
  
  
  this->self = result;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_debounce_filter_t_templ<SWIG_OBJ_WRAP>::_exports_debounce_filter_t_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_vsomeip_v3__debounce_filter_t;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_debounce_filter_t__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_debounce_filter_t__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_debounce_filter_t__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_debounce_filter_t__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_debounce_filter_t");
  
  goto fail;
fail:
  return;
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_debounce_filter_t_templ<SWIG_OBJ_WRAP>::_exports_debounce_filter_t_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_debounce_filter_t_templ<SWIG_OBJ_WRAP>::_wrap_debounce_filter_t_on_change__set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::debounce_filter_t *arg1 = (vsomeip_v3::debounce_filter_t *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__debounce_filter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debounce_filter_t_on_change__set" "', argument " "1"" of type '" "vsomeip_v3::debounce_filter_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::debounce_filter_t * >(argp1);ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "debounce_filter_t_on_change__set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);if (arg1) (arg1)->on_change_ = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debounce_filter_t_templ<SWIG_OBJ_WRAP>::_wrap_debounce_filter_t_on_change__get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::debounce_filter_t *arg1 = (vsomeip_v3::debounce_filter_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__debounce_filter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debounce_filter_t_on_change__get" "', argument " "1"" of type '" "vsomeip_v3::debounce_filter_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::debounce_filter_t * >(argp1);result = (bool) ((arg1)->on_change_);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_debounce_filter_t_templ<SWIG_OBJ_WRAP>::_wrap_debounce_filter_t_on_change_resets_interval__set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::debounce_filter_t *arg1 = (vsomeip_v3::debounce_filter_t *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__debounce_filter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debounce_filter_t_on_change_resets_interval__set" "', argument " "1"" of type '" "vsomeip_v3::debounce_filter_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::debounce_filter_t * >(argp1);ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "debounce_filter_t_on_change_resets_interval__set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);if (arg1) (arg1)->on_change_resets_interval_ = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debounce_filter_t_templ<SWIG_OBJ_WRAP>::_wrap_debounce_filter_t_on_change_resets_interval__get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::debounce_filter_t *arg1 = (vsomeip_v3::debounce_filter_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__debounce_filter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debounce_filter_t_on_change_resets_interval__get" "', argument " "1"" of type '" "vsomeip_v3::debounce_filter_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::debounce_filter_t * >(argp1);result = (bool) ((arg1)->on_change_resets_interval_);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_debounce_filter_t_templ<SWIG_OBJ_WRAP>::_wrap_debounce_filter_t_interval__set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::debounce_filter_t *arg1 = (vsomeip_v3::debounce_filter_t *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__debounce_filter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debounce_filter_t_interval__set" "', argument " "1"" of type '" "vsomeip_v3::debounce_filter_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::debounce_filter_t * >(argp1);ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "debounce_filter_t_interval__set" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);if (arg1) (arg1)->interval_ = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debounce_filter_t_templ<SWIG_OBJ_WRAP>::_wrap_debounce_filter_t_interval__get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::debounce_filter_t *arg1 = (vsomeip_v3::debounce_filter_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__debounce_filter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debounce_filter_t_interval__get" "', argument " "1"" of type '" "vsomeip_v3::debounce_filter_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::debounce_filter_t * >(argp1);result = (int64_t) ((arg1)->interval_);
  jsresult = SWIG_From_long_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< long long >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_debounce_filter_t_templ<SWIG_OBJ_WRAP>::_wrap_debounce_filter_t_ignore__set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::debounce_filter_t *arg1 = (vsomeip_v3::debounce_filter_t *) 0 ;
  std::map< std::size_t,vsomeip_v3::byte_t > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__debounce_filter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debounce_filter_t_ignore__set" "', argument " "1"" of type '" "vsomeip_v3::debounce_filter_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::debounce_filter_t * >(argp1);{
    {
      res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_std__mapT_std__size_t_unsigned_char_t,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "debounce_filter_t_ignore__set" "', argument " "2"" of type '" "std::map< std::size_t,vsomeip_v3::byte_t >""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "debounce_filter_t_ignore__set" "', argument " "2"" of type '" "std::map< std::size_t,vsomeip_v3::byte_t >""'");
      } else {
        arg2 = *(reinterpret_cast< std::map< std::size_t,vsomeip_v3::byte_t > * >(argp2));
      }
    }
  }
  if (arg1) (arg1)->ignore_ = arg2;
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debounce_filter_t_templ<SWIG_OBJ_WRAP>::_wrap_debounce_filter_t_ignore__get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::debounce_filter_t *arg1 = (vsomeip_v3::debounce_filter_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< std::size_t,vsomeip_v3::byte_t > result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__debounce_filter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debounce_filter_t_ignore__get" "', argument " "1"" of type '" "vsomeip_v3::debounce_filter_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::debounce_filter_t * >(argp1);result =  ((arg1)->ignore_);
  jsresult = SWIG_NewPointerObj((new std::map< std::size_t,vsomeip_v3::byte_t >(result)), SWIGTYPE_p_std__mapT_std__size_t_unsigned_char_t, SWIG_POINTER_OWN |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_debounce_filter_t_templ<SWIG_OBJ_WRAP>::_wrap_debounce_filter_t_send_current_value_after__set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::debounce_filter_t *arg1 = (vsomeip_v3::debounce_filter_t *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__debounce_filter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debounce_filter_t_send_current_value_after__set" "', argument " "1"" of type '" "vsomeip_v3::debounce_filter_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::debounce_filter_t * >(argp1);ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "debounce_filter_t_send_current_value_after__set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);if (arg1) (arg1)->send_current_value_after_ = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debounce_filter_t_templ<SWIG_OBJ_WRAP>::_wrap_debounce_filter_t_send_current_value_after__get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::debounce_filter_t *arg1 = (vsomeip_v3::debounce_filter_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__debounce_filter_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debounce_filter_t_send_current_value_after__get" "', argument " "1"" of type '" "vsomeip_v3::debounce_filter_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::debounce_filter_t * >(argp1);result = (bool) ((arg1)->send_current_value_after_);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_debounce_filter_t_templ<SWIG_OBJ_WRAP>::~_exports_debounce_filter_t_templ() {
  auto arg1 = reinterpret_cast<vsomeip_v3::debounce_filter_t *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime_get_property(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::string *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_runtime_get_property.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "runtime_get_property" "', argument " "1"" of type '" "std::string const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "runtime_get_property" "', argument " "1"" of type '" "std::string const &""'"); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);result = vsomeip_v3::runtime::get_property((std::string const &)*arg1);
  jsresult = SWIG_NewPointerObj((new std::string(result)), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime_set_property(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_runtime_set_property.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "runtime_set_property" "', argument " "1"" of type '" "std::string const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "runtime_set_property" "', argument " "1"" of type '" "std::string const &""'"); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);res2 = SWIG_ConvertPtr(info[1], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "runtime_set_property" "', argument " "2"" of type '" "std::string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "runtime_set_property" "', argument " "2"" of type '" "std::string const &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);vsomeip_v3::runtime::set_property((std::string const &)*arg1,(std::string const &)*arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::runtime > > result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_runtime_get.");
  }
  
  result = vsomeip_v3::runtime::get();
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< vsomeip_v3::runtime >(result)), SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__runtime_t, SWIG_POINTER_OWN |  0 );
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_runtime_templ<SWIG_OBJ_WRAP>::~_exports_runtime_templ() {
  auto arg1 = reinterpret_cast<vsomeip_v3::runtime *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime_create_application__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::runtime *arg1 = (vsomeip_v3::runtime *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::application > > result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__runtime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "runtime_create_application" "', argument " "1"" of type '" "vsomeip_v3::runtime *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::runtime * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "runtime_create_application" "', argument " "2"" of type '" "std::string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "runtime_create_application" "', argument " "2"" of type '" "std::string const &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);result = (arg1)->create_application((std::string const &)*arg2);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< vsomeip_v3::application >(result)), SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__application_t, SWIG_POINTER_OWN |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime_create_application__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::runtime *arg1 = (vsomeip_v3::runtime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::application > > result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__runtime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "runtime_create_application" "', argument " "1"" of type '" "vsomeip_v3::runtime *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::runtime * >(argp1);result = (arg1)->create_application();
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< vsomeip_v3::application >(result)), SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__application_t, SWIG_POINTER_OWN |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime_create_message__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::runtime *arg1 = (vsomeip_v3::runtime *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::message > > result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__runtime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "runtime_create_message" "', argument " "1"" of type '" "vsomeip_v3::runtime const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::runtime * >(argp1);ecode2 = SWIG_AsVal_bool(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "runtime_create_message" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);result = ((vsomeip_v3::runtime const *)arg1)->create_message(arg2);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< vsomeip_v3::message >(result)), SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__message_t, SWIG_POINTER_OWN |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime_create_message__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::runtime *arg1 = (vsomeip_v3::runtime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::message > > result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__runtime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "runtime_create_message" "', argument " "1"" of type '" "vsomeip_v3::runtime const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::runtime * >(argp1);result = ((vsomeip_v3::runtime const *)arg1)->create_message();
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< vsomeip_v3::message >(result)), SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__message_t, SWIG_POINTER_OWN |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime__wrap_runtime_create_message(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_runtime_create_message__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_runtime_create_message__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_runtime_create_message__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_runtime_create_message__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function create_message.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime_create_request__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::runtime *arg1 = (vsomeip_v3::runtime *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::message > > result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__runtime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "runtime_create_request" "', argument " "1"" of type '" "vsomeip_v3::runtime const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::runtime * >(argp1);ecode2 = SWIG_AsVal_bool(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "runtime_create_request" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);result = ((vsomeip_v3::runtime const *)arg1)->create_request(arg2);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< vsomeip_v3::message >(result)), SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__message_t, SWIG_POINTER_OWN |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime_create_request__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::runtime *arg1 = (vsomeip_v3::runtime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::message > > result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__runtime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "runtime_create_request" "', argument " "1"" of type '" "vsomeip_v3::runtime const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::runtime * >(argp1);result = ((vsomeip_v3::runtime const *)arg1)->create_request();
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< vsomeip_v3::message >(result)), SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__message_t, SWIG_POINTER_OWN |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime__wrap_runtime_create_request(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_runtime_create_request__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_runtime_create_request__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_runtime_create_request__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_runtime_create_request__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function create_request.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime_create_response(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::runtime *arg1 = (vsomeip_v3::runtime *) 0 ;
  std::shared_ptr< vsomeip_v3::message > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::message > > result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_runtime_create_response.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__runtime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "runtime_create_response" "', argument " "1"" of type '" "vsomeip_v3::runtime const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::runtime * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__message_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "runtime_create_response" "', argument " "2"" of type '" "std::shared_ptr< vsomeip_v3::message > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "runtime_create_response" "', argument " "2"" of type '" "std::shared_ptr< vsomeip_v3::message > const &""'"); 
  }
  arg2 = reinterpret_cast< std::shared_ptr< vsomeip_v3::message > * >(argp2);result = ((vsomeip_v3::runtime const *)arg1)->create_response((std::shared_ptr< vsomeip_v3::message > const &)*arg2);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< vsomeip_v3::message >(result)), SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__message_t, SWIG_POINTER_OWN |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime_create_notification__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::runtime *arg1 = (vsomeip_v3::runtime *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::message > > result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__runtime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "runtime_create_notification" "', argument " "1"" of type '" "vsomeip_v3::runtime const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::runtime * >(argp1);ecode2 = SWIG_AsVal_bool(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "runtime_create_notification" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);result = ((vsomeip_v3::runtime const *)arg1)->create_notification(arg2);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< vsomeip_v3::message >(result)), SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__message_t, SWIG_POINTER_OWN |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime_create_notification__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::runtime *arg1 = (vsomeip_v3::runtime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::message > > result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__runtime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "runtime_create_notification" "', argument " "1"" of type '" "vsomeip_v3::runtime const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::runtime * >(argp1);result = ((vsomeip_v3::runtime const *)arg1)->create_notification();
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< vsomeip_v3::message >(result)), SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__message_t, SWIG_POINTER_OWN |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime__wrap_runtime_create_notification(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_runtime_create_notification__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_runtime_create_notification__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_runtime_create_notification__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_runtime_create_notification__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function create_notification.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime_create_payload__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::runtime *arg1 = (vsomeip_v3::runtime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::payload > > result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__runtime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "runtime_create_payload" "', argument " "1"" of type '" "vsomeip_v3::runtime const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::runtime * >(argp1);result = ((vsomeip_v3::runtime const *)arg1)->create_payload();
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< vsomeip_v3::payload >(result)), SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__payload_t, SWIG_POINTER_OWN |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime_create_payload__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::runtime *arg1 = (vsomeip_v3::runtime *) 0 ;
  vsomeip_v3::byte_t *arg2 = (vsomeip_v3::byte_t *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::payload > > result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__runtime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "runtime_create_payload" "', argument " "1"" of type '" "vsomeip_v3::runtime const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::runtime * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "runtime_create_payload" "', argument " "2"" of type '" "vsomeip_v3::byte_t const *""'"); 
  }
  arg2 = reinterpret_cast< vsomeip_v3::byte_t * >(argp2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "runtime_create_payload" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);result = ((vsomeip_v3::runtime const *)arg1)->create_payload((vsomeip_v3::byte_t const *)arg2,arg3);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< vsomeip_v3::payload >(result)), SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__payload_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime_create_payload__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::runtime *arg1 = (vsomeip_v3::runtime *) 0 ;
  std::vector< vsomeip_v3::byte_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::payload > > result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__runtime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "runtime_create_payload" "', argument " "1"" of type '" "vsomeip_v3::runtime const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::runtime * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__vectorT_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "runtime_create_payload" "', argument " "2"" of type '" "std::vector< vsomeip_v3::byte_t > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "runtime_create_payload" "', argument " "2"" of type '" "std::vector< vsomeip_v3::byte_t > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< vsomeip_v3::byte_t > * >(argp2);result = ((vsomeip_v3::runtime const *)arg1)->create_payload((std::vector< vsomeip_v3::byte_t > const &)*arg2);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< vsomeip_v3::payload >(result)), SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__payload_t, SWIG_POINTER_OWN |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime__wrap_runtime_create_payload(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_runtime_create_payload__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_runtime_create_payload__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_runtime_create_payload__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_runtime_create_payload__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_runtime_create_payload__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_runtime_create_payload__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function create_payload.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime_get_application(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::runtime *arg1 = (vsomeip_v3::runtime *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::application > > result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_runtime_get_application.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__runtime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "runtime_get_application" "', argument " "1"" of type '" "vsomeip_v3::runtime const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::runtime * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "runtime_get_application" "', argument " "2"" of type '" "std::string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "runtime_get_application" "', argument " "2"" of type '" "std::string const &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);result = ((vsomeip_v3::runtime const *)arg1)->get_application((std::string const &)*arg2);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< vsomeip_v3::application >(result)), SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__application_t, SWIG_POINTER_OWN |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime_remove_application(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::runtime *arg1 = (vsomeip_v3::runtime *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_runtime_remove_application.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__runtime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "runtime_remove_application" "', argument " "1"" of type '" "vsomeip_v3::runtime *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::runtime * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "runtime_remove_application" "', argument " "2"" of type '" "std::string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "runtime_remove_application" "', argument " "2"" of type '" "std::string const &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);(arg1)->remove_application((std::string const &)*arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime_create_application__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::runtime *arg1 = (vsomeip_v3::runtime *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::application > > result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__runtime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "runtime_create_application" "', argument " "1"" of type '" "vsomeip_v3::runtime *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::runtime * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "runtime_create_application" "', argument " "2"" of type '" "std::string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "runtime_create_application" "', argument " "2"" of type '" "std::string const &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);res3 = SWIG_ConvertPtr(info[1], &argp3, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "runtime_create_application" "', argument " "3"" of type '" "std::string const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "runtime_create_application" "', argument " "3"" of type '" "std::string const &""'"); 
  }
  arg3 = reinterpret_cast< std::string * >(argp3);result = (arg1)->create_application((std::string const &)*arg2,(std::string const &)*arg3);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< vsomeip_v3::application >(result)), SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__application_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_runtime_templ<SWIG_OBJ_WRAP>::_wrap_runtime__wrap_runtime_create_application(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_runtime_create_application__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_runtime_create_application__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_runtime_create_application__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_runtime_create_application__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_runtime_create_application__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_runtime_create_application__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function create_application.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_veto_ctor
template <typename SWIG_OBJ_WRAP>
_exports_runtime_templ<SWIG_OBJ_WRAP>::_exports_runtime_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS as its
    // base abstract class
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  SWIG_Error(SWIG_ERROR, "Class runtime can not be instantiated");
  return;
  goto fail;
fail:
  return;
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_runtime_templ<SWIG_OBJ_WRAP>::_exports_runtime_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_application_templ<SWIG_OBJ_WRAP>::~_exports_application_templ() {
  auto arg1 = reinterpret_cast<vsomeip_v3::application *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_get_name(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_get_name.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_get_name" "', argument " "1"" of type '" "vsomeip_v3::application const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);result = (std::string *) &((vsomeip_v3::application const *)arg1)->get_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_get_client(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::client_t result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_get_client.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_get_client" "', argument " "1"" of type '" "vsomeip_v3::application const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);result = (vsomeip_v3::client_t)((vsomeip_v3::application const *)arg1)->get_client();
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_get_diagnosis(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::diagnosis_t result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_get_diagnosis.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_get_diagnosis" "', argument " "1"" of type '" "vsomeip_v3::application const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);result = (vsomeip_v3::diagnosis_t)((vsomeip_v3::application const *)arg1)->get_diagnosis();
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_init(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_init.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_init" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);result = (bool)(arg1)->init();
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_start(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_start.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_start" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);(arg1)->start();
  jsresult = env.Undefined();
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_stop(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_stop.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_stop" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);(arg1)->stop();
  jsresult = env.Undefined();
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_process__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_process" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_int(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_process" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);(arg1)->process(arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_process__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_process" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);(arg1)->process();
  jsresult = env.Undefined();
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application__wrap_application_process(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_process__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_process__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_process__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_process__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function process.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_get_security_mode(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::security_mode_e result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_get_security_mode.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_get_security_mode" "', argument " "1"" of type '" "vsomeip_v3::application const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);result = (vsomeip_v3::security_mode_e)((vsomeip_v3::application const *)arg1)->get_security_mode();
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_offer_service__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::major_version_t arg4 ;
  vsomeip_v3::minor_version_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_offer_service" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_offer_service" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_offer_service" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_char(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_offer_service" "', argument " "4"" of type '" "vsomeip_v3::major_version_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::major_version_t >(val4);ecode5 = SWIG_AsVal_unsigned_SS_int(info[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "application_offer_service" "', argument " "5"" of type '" "vsomeip_v3::minor_version_t""'");
  } 
  arg5 = static_cast< vsomeip_v3::minor_version_t >(val5);(arg1)->offer_service(arg2,arg3,arg4,arg5);
  jsresult = env.Undefined();
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_offer_service__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::major_version_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_offer_service" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_offer_service" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_offer_service" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_char(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_offer_service" "', argument " "4"" of type '" "vsomeip_v3::major_version_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::major_version_t >(val4);(arg1)->offer_service(arg2,arg3,arg4);
  jsresult = env.Undefined();
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_offer_service__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_offer_service" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_offer_service" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_offer_service" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);(arg1)->offer_service(arg2,arg3);
  jsresult = env.Undefined();
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application__wrap_application_offer_service(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_offer_service__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_offer_service__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 3 && static_cast<int>(info.Length()) <= 3) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_offer_service__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_offer_service__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_offer_service__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_offer_service__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function offer_service.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_stop_offer_service__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::major_version_t arg4 ;
  vsomeip_v3::minor_version_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_stop_offer_service" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_stop_offer_service" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_stop_offer_service" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_char(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_stop_offer_service" "', argument " "4"" of type '" "vsomeip_v3::major_version_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::major_version_t >(val4);ecode5 = SWIG_AsVal_unsigned_SS_int(info[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "application_stop_offer_service" "', argument " "5"" of type '" "vsomeip_v3::minor_version_t""'");
  } 
  arg5 = static_cast< vsomeip_v3::minor_version_t >(val5);(arg1)->stop_offer_service(arg2,arg3,arg4,arg5);
  jsresult = env.Undefined();
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_stop_offer_service__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::major_version_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_stop_offer_service" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_stop_offer_service" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_stop_offer_service" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_char(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_stop_offer_service" "', argument " "4"" of type '" "vsomeip_v3::major_version_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::major_version_t >(val4);(arg1)->stop_offer_service(arg2,arg3,arg4);
  jsresult = env.Undefined();
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_stop_offer_service__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_stop_offer_service" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_stop_offer_service" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_stop_offer_service" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);(arg1)->stop_offer_service(arg2,arg3);
  jsresult = env.Undefined();
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application__wrap_application_stop_offer_service(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_stop_offer_service__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_stop_offer_service__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 3 && static_cast<int>(info.Length()) <= 3) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_stop_offer_service__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_stop_offer_service__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_stop_offer_service__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_stop_offer_service__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function stop_offer_service.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_offer_event__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::event_t arg4 ;
  std::set< vsomeip_v3::eventgroup_t > *arg5 = 0 ;
  vsomeip_v3::event_type_e arg6 ;
  std::chrono::milliseconds arg7 ;
  bool arg8 ;
  bool arg9 ;
  vsomeip_v3::epsilon_change_func_t *arg10 = 0 ;
  vsomeip_v3::reliability_type_e arg11 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_offer_event" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_offer_event" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_offer_event" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_offer_event" "', argument " "4"" of type '" "vsomeip_v3::event_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::event_t >(val4);res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__setT_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_offer_event" "', argument " "5"" of type '" "std::set< vsomeip_v3::eventgroup_t > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_offer_event" "', argument " "5"" of type '" "std::set< vsomeip_v3::eventgroup_t > const &""'"); 
  }
  arg5 = reinterpret_cast< std::set< vsomeip_v3::eventgroup_t > * >(argp5);ecode6 = SWIG_AsVal_int(info[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "application_offer_event" "', argument " "6"" of type '" "vsomeip_v3::event_type_e""'");
  } 
  arg6 = static_cast< vsomeip_v3::event_type_e >(val6);{
    {
      res7 = SWIG_ConvertPtr(info[5], &argp7, SWIGTYPE_p_std__chrono__milliseconds,  0 );
      if (!SWIG_IsOK(res7)) {
        SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "application_offer_event" "', argument " "7"" of type '" "std::chrono::milliseconds""'"); 
      }  
      if (!argp7) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_offer_event" "', argument " "7"" of type '" "std::chrono::milliseconds""'");
      } else {
        arg7 = *(reinterpret_cast< std::chrono::milliseconds * >(argp7));
      }
    }
  }
  ecode8 = SWIG_AsVal_bool(info[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "application_offer_event" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);ecode9 = SWIG_AsVal_bool(info[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "application_offer_event" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);res10 = SWIG_ConvertPtr(info[8], &argp10, SWIGTYPE_p_std__functionT_bool_fstd__shared_ptrT_payload_t_const_R_std__shared_ptrT_payload_t_const_RF_t,  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "application_offer_event" "', argument " "10"" of type '" "vsomeip_v3::epsilon_change_func_t const &""'"); 
  }
  if (!argp10) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_offer_event" "', argument " "10"" of type '" "vsomeip_v3::epsilon_change_func_t const &""'"); 
  }
  arg10 = reinterpret_cast< vsomeip_v3::epsilon_change_func_t * >(argp10);ecode11 = SWIG_AsVal_int(info[9], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "application_offer_event" "', argument " "11"" of type '" "vsomeip_v3::reliability_type_e""'");
  } 
  arg11 = static_cast< vsomeip_v3::reliability_type_e >(val11);(arg1)->offer_event(arg2,arg3,arg4,(std::set< vsomeip_v3::eventgroup_t > const &)*arg5,arg6,arg7,arg8,arg9,(vsomeip_v3::epsilon_change_func_t const &)*arg10,arg11);
  jsresult = env.Undefined();
  
  
  
  
  
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_offer_event__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::event_t arg4 ;
  std::set< vsomeip_v3::eventgroup_t > *arg5 = 0 ;
  vsomeip_v3::event_type_e arg6 ;
  std::chrono::milliseconds arg7 ;
  bool arg8 ;
  bool arg9 ;
  vsomeip_v3::epsilon_change_func_t *arg10 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_offer_event" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_offer_event" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_offer_event" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_offer_event" "', argument " "4"" of type '" "vsomeip_v3::event_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::event_t >(val4);res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__setT_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_offer_event" "', argument " "5"" of type '" "std::set< vsomeip_v3::eventgroup_t > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_offer_event" "', argument " "5"" of type '" "std::set< vsomeip_v3::eventgroup_t > const &""'"); 
  }
  arg5 = reinterpret_cast< std::set< vsomeip_v3::eventgroup_t > * >(argp5);ecode6 = SWIG_AsVal_int(info[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "application_offer_event" "', argument " "6"" of type '" "vsomeip_v3::event_type_e""'");
  } 
  arg6 = static_cast< vsomeip_v3::event_type_e >(val6);{
    {
      res7 = SWIG_ConvertPtr(info[5], &argp7, SWIGTYPE_p_std__chrono__milliseconds,  0 );
      if (!SWIG_IsOK(res7)) {
        SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "application_offer_event" "', argument " "7"" of type '" "std::chrono::milliseconds""'"); 
      }  
      if (!argp7) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_offer_event" "', argument " "7"" of type '" "std::chrono::milliseconds""'");
      } else {
        arg7 = *(reinterpret_cast< std::chrono::milliseconds * >(argp7));
      }
    }
  }
  ecode8 = SWIG_AsVal_bool(info[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "application_offer_event" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);ecode9 = SWIG_AsVal_bool(info[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "application_offer_event" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);res10 = SWIG_ConvertPtr(info[8], &argp10, SWIGTYPE_p_std__functionT_bool_fstd__shared_ptrT_payload_t_const_R_std__shared_ptrT_payload_t_const_RF_t,  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "application_offer_event" "', argument " "10"" of type '" "vsomeip_v3::epsilon_change_func_t const &""'"); 
  }
  if (!argp10) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_offer_event" "', argument " "10"" of type '" "vsomeip_v3::epsilon_change_func_t const &""'"); 
  }
  arg10 = reinterpret_cast< vsomeip_v3::epsilon_change_func_t * >(argp10);(arg1)->offer_event(arg2,arg3,arg4,(std::set< vsomeip_v3::eventgroup_t > const &)*arg5,arg6,arg7,arg8,arg9,(vsomeip_v3::epsilon_change_func_t const &)*arg10);
  jsresult = env.Undefined();
  
  
  
  
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_offer_event__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::event_t arg4 ;
  std::set< vsomeip_v3::eventgroup_t > *arg5 = 0 ;
  vsomeip_v3::event_type_e arg6 ;
  std::chrono::milliseconds arg7 ;
  bool arg8 ;
  bool arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_offer_event" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_offer_event" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_offer_event" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_offer_event" "', argument " "4"" of type '" "vsomeip_v3::event_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::event_t >(val4);res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__setT_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_offer_event" "', argument " "5"" of type '" "std::set< vsomeip_v3::eventgroup_t > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_offer_event" "', argument " "5"" of type '" "std::set< vsomeip_v3::eventgroup_t > const &""'"); 
  }
  arg5 = reinterpret_cast< std::set< vsomeip_v3::eventgroup_t > * >(argp5);ecode6 = SWIG_AsVal_int(info[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "application_offer_event" "', argument " "6"" of type '" "vsomeip_v3::event_type_e""'");
  } 
  arg6 = static_cast< vsomeip_v3::event_type_e >(val6);{
    {
      res7 = SWIG_ConvertPtr(info[5], &argp7, SWIGTYPE_p_std__chrono__milliseconds,  0 );
      if (!SWIG_IsOK(res7)) {
        SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "application_offer_event" "', argument " "7"" of type '" "std::chrono::milliseconds""'"); 
      }  
      if (!argp7) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_offer_event" "', argument " "7"" of type '" "std::chrono::milliseconds""'");
      } else {
        arg7 = *(reinterpret_cast< std::chrono::milliseconds * >(argp7));
      }
    }
  }
  ecode8 = SWIG_AsVal_bool(info[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "application_offer_event" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);ecode9 = SWIG_AsVal_bool(info[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "application_offer_event" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);(arg1)->offer_event(arg2,arg3,arg4,(std::set< vsomeip_v3::eventgroup_t > const &)*arg5,arg6,arg7,arg8,arg9);
  jsresult = env.Undefined();
  
  
  
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_offer_event__SWIG_3(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::event_t arg4 ;
  std::set< vsomeip_v3::eventgroup_t > *arg5 = 0 ;
  vsomeip_v3::event_type_e arg6 ;
  std::chrono::milliseconds arg7 ;
  bool arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_offer_event" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_offer_event" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_offer_event" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_offer_event" "', argument " "4"" of type '" "vsomeip_v3::event_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::event_t >(val4);res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__setT_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_offer_event" "', argument " "5"" of type '" "std::set< vsomeip_v3::eventgroup_t > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_offer_event" "', argument " "5"" of type '" "std::set< vsomeip_v3::eventgroup_t > const &""'"); 
  }
  arg5 = reinterpret_cast< std::set< vsomeip_v3::eventgroup_t > * >(argp5);ecode6 = SWIG_AsVal_int(info[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "application_offer_event" "', argument " "6"" of type '" "vsomeip_v3::event_type_e""'");
  } 
  arg6 = static_cast< vsomeip_v3::event_type_e >(val6);{
    {
      res7 = SWIG_ConvertPtr(info[5], &argp7, SWIGTYPE_p_std__chrono__milliseconds,  0 );
      if (!SWIG_IsOK(res7)) {
        SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "application_offer_event" "', argument " "7"" of type '" "std::chrono::milliseconds""'"); 
      }  
      if (!argp7) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_offer_event" "', argument " "7"" of type '" "std::chrono::milliseconds""'");
      } else {
        arg7 = *(reinterpret_cast< std::chrono::milliseconds * >(argp7));
      }
    }
  }
  ecode8 = SWIG_AsVal_bool(info[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "application_offer_event" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);(arg1)->offer_event(arg2,arg3,arg4,(std::set< vsomeip_v3::eventgroup_t > const &)*arg5,arg6,arg7,arg8);
  jsresult = env.Undefined();
  
  
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_offer_event__SWIG_4(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::event_t arg4 ;
  std::set< vsomeip_v3::eventgroup_t > *arg5 = 0 ;
  vsomeip_v3::event_type_e arg6 ;
  std::chrono::milliseconds arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_offer_event" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_offer_event" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_offer_event" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_offer_event" "', argument " "4"" of type '" "vsomeip_v3::event_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::event_t >(val4);res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__setT_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_offer_event" "', argument " "5"" of type '" "std::set< vsomeip_v3::eventgroup_t > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_offer_event" "', argument " "5"" of type '" "std::set< vsomeip_v3::eventgroup_t > const &""'"); 
  }
  arg5 = reinterpret_cast< std::set< vsomeip_v3::eventgroup_t > * >(argp5);ecode6 = SWIG_AsVal_int(info[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "application_offer_event" "', argument " "6"" of type '" "vsomeip_v3::event_type_e""'");
  } 
  arg6 = static_cast< vsomeip_v3::event_type_e >(val6);{
    {
      res7 = SWIG_ConvertPtr(info[5], &argp7, SWIGTYPE_p_std__chrono__milliseconds,  0 );
      if (!SWIG_IsOK(res7)) {
        SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "application_offer_event" "', argument " "7"" of type '" "std::chrono::milliseconds""'"); 
      }  
      if (!argp7) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_offer_event" "', argument " "7"" of type '" "std::chrono::milliseconds""'");
      } else {
        arg7 = *(reinterpret_cast< std::chrono::milliseconds * >(argp7));
      }
    }
  }
  (arg1)->offer_event(arg2,arg3,arg4,(std::set< vsomeip_v3::eventgroup_t > const &)*arg5,arg6,arg7);
  jsresult = env.Undefined();
  
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_offer_event__SWIG_5(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::event_t arg4 ;
  std::set< vsomeip_v3::eventgroup_t > *arg5 = 0 ;
  vsomeip_v3::event_type_e arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_offer_event" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_offer_event" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_offer_event" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_offer_event" "', argument " "4"" of type '" "vsomeip_v3::event_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::event_t >(val4);res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__setT_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_offer_event" "', argument " "5"" of type '" "std::set< vsomeip_v3::eventgroup_t > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_offer_event" "', argument " "5"" of type '" "std::set< vsomeip_v3::eventgroup_t > const &""'"); 
  }
  arg5 = reinterpret_cast< std::set< vsomeip_v3::eventgroup_t > * >(argp5);ecode6 = SWIG_AsVal_int(info[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "application_offer_event" "', argument " "6"" of type '" "vsomeip_v3::event_type_e""'");
  } 
  arg6 = static_cast< vsomeip_v3::event_type_e >(val6);(arg1)->offer_event(arg2,arg3,arg4,(std::set< vsomeip_v3::eventgroup_t > const &)*arg5,arg6);
  jsresult = env.Undefined();
  
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_offer_event__SWIG_6(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::event_t arg4 ;
  std::set< vsomeip_v3::eventgroup_t > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_offer_event" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_offer_event" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_offer_event" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_offer_event" "', argument " "4"" of type '" "vsomeip_v3::event_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::event_t >(val4);res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__setT_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_offer_event" "', argument " "5"" of type '" "std::set< vsomeip_v3::eventgroup_t > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_offer_event" "', argument " "5"" of type '" "std::set< vsomeip_v3::eventgroup_t > const &""'"); 
  }
  arg5 = reinterpret_cast< std::set< vsomeip_v3::eventgroup_t > * >(argp5);(arg1)->offer_event(arg2,arg3,arg4,(std::set< vsomeip_v3::eventgroup_t > const &)*arg5);
  jsresult = env.Undefined();
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application__wrap_application_offer_event(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 10 && static_cast<int>(info.Length()) <= 10) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_offer_event__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_offer_event__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 9 && static_cast<int>(info.Length()) <= 9) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_offer_event__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_offer_event__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 8 && static_cast<int>(info.Length()) <= 8) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_offer_event__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_offer_event__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 7 && static_cast<int>(info.Length()) <= 7) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_offer_event__SWIG_3(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_offer_event__SWIG_3(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 6 && static_cast<int>(info.Length()) <= 6) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_offer_event__SWIG_4(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_offer_event__SWIG_4(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 5 && static_cast<int>(info.Length()) <= 5) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_offer_event__SWIG_5(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_offer_event__SWIG_5(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_offer_event__SWIG_6(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_offer_event__SWIG_6(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function offer_event.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_stop_offer_event(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::event_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_stop_offer_event.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_stop_offer_event" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_stop_offer_event" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_stop_offer_event" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_stop_offer_event" "', argument " "4"" of type '" "vsomeip_v3::event_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::event_t >(val4);(arg1)->stop_offer_event(arg2,arg3,arg4);
  jsresult = env.Undefined();
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_request_service__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::major_version_t arg4 ;
  vsomeip_v3::minor_version_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_request_service" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_request_service" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_request_service" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_char(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_request_service" "', argument " "4"" of type '" "vsomeip_v3::major_version_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::major_version_t >(val4);ecode5 = SWIG_AsVal_unsigned_SS_int(info[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "application_request_service" "', argument " "5"" of type '" "vsomeip_v3::minor_version_t""'");
  } 
  arg5 = static_cast< vsomeip_v3::minor_version_t >(val5);(arg1)->request_service(arg2,arg3,arg4,arg5);
  jsresult = env.Undefined();
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_request_service__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::major_version_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_request_service" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_request_service" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_request_service" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_char(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_request_service" "', argument " "4"" of type '" "vsomeip_v3::major_version_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::major_version_t >(val4);(arg1)->request_service(arg2,arg3,arg4);
  jsresult = env.Undefined();
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_request_service__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_request_service" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_request_service" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_request_service" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);(arg1)->request_service(arg2,arg3);
  jsresult = env.Undefined();
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application__wrap_application_request_service(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_request_service__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_request_service__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 3 && static_cast<int>(info.Length()) <= 3) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_request_service__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_request_service__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_request_service__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_request_service__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function request_service.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_release_service(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_release_service.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_release_service" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_release_service" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_release_service" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);(arg1)->release_service(arg2,arg3);
  jsresult = env.Undefined();
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_request_event__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::event_t arg4 ;
  std::set< vsomeip_v3::eventgroup_t > *arg5 = 0 ;
  vsomeip_v3::event_type_e arg6 ;
  vsomeip_v3::reliability_type_e arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_request_event" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_request_event" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_request_event" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_request_event" "', argument " "4"" of type '" "vsomeip_v3::event_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::event_t >(val4);res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__setT_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_request_event" "', argument " "5"" of type '" "std::set< vsomeip_v3::eventgroup_t > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_request_event" "', argument " "5"" of type '" "std::set< vsomeip_v3::eventgroup_t > const &""'"); 
  }
  arg5 = reinterpret_cast< std::set< vsomeip_v3::eventgroup_t > * >(argp5);ecode6 = SWIG_AsVal_int(info[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "application_request_event" "', argument " "6"" of type '" "vsomeip_v3::event_type_e""'");
  } 
  arg6 = static_cast< vsomeip_v3::event_type_e >(val6);ecode7 = SWIG_AsVal_int(info[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "application_request_event" "', argument " "7"" of type '" "vsomeip_v3::reliability_type_e""'");
  } 
  arg7 = static_cast< vsomeip_v3::reliability_type_e >(val7);(arg1)->request_event(arg2,arg3,arg4,(std::set< vsomeip_v3::eventgroup_t > const &)*arg5,arg6,arg7);
  jsresult = env.Undefined();
  
  
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_request_event__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::event_t arg4 ;
  std::set< vsomeip_v3::eventgroup_t > *arg5 = 0 ;
  vsomeip_v3::event_type_e arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_request_event" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_request_event" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_request_event" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_request_event" "', argument " "4"" of type '" "vsomeip_v3::event_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::event_t >(val4);res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__setT_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_request_event" "', argument " "5"" of type '" "std::set< vsomeip_v3::eventgroup_t > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_request_event" "', argument " "5"" of type '" "std::set< vsomeip_v3::eventgroup_t > const &""'"); 
  }
  arg5 = reinterpret_cast< std::set< vsomeip_v3::eventgroup_t > * >(argp5);ecode6 = SWIG_AsVal_int(info[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "application_request_event" "', argument " "6"" of type '" "vsomeip_v3::event_type_e""'");
  } 
  arg6 = static_cast< vsomeip_v3::event_type_e >(val6);(arg1)->request_event(arg2,arg3,arg4,(std::set< vsomeip_v3::eventgroup_t > const &)*arg5,arg6);
  jsresult = env.Undefined();
  
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_request_event__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::event_t arg4 ;
  std::set< vsomeip_v3::eventgroup_t > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_request_event" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_request_event" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_request_event" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_request_event" "', argument " "4"" of type '" "vsomeip_v3::event_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::event_t >(val4);res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__setT_unsigned_short_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_request_event" "', argument " "5"" of type '" "std::set< vsomeip_v3::eventgroup_t > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_request_event" "', argument " "5"" of type '" "std::set< vsomeip_v3::eventgroup_t > const &""'"); 
  }
  arg5 = reinterpret_cast< std::set< vsomeip_v3::eventgroup_t > * >(argp5);(arg1)->request_event(arg2,arg3,arg4,(std::set< vsomeip_v3::eventgroup_t > const &)*arg5);
  jsresult = env.Undefined();
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application__wrap_application_request_event(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 6 && static_cast<int>(info.Length()) <= 6) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_request_event__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_request_event__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 5 && static_cast<int>(info.Length()) <= 5) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_request_event__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_request_event__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_request_event__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_request_event__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function request_event.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_release_event(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::event_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_release_event.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_release_event" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_release_event" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_release_event" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_release_event" "', argument " "4"" of type '" "vsomeip_v3::event_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::event_t >(val4);(arg1)->release_event(arg2,arg3,arg4);
  jsresult = env.Undefined();
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_subscribe__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::eventgroup_t arg4 ;
  vsomeip_v3::major_version_t arg5 ;
  vsomeip_v3::event_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned short val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_subscribe" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_subscribe" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_subscribe" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_subscribe" "', argument " "4"" of type '" "vsomeip_v3::eventgroup_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::eventgroup_t >(val4);ecode5 = SWIG_AsVal_unsigned_SS_char(info[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "application_subscribe" "', argument " "5"" of type '" "vsomeip_v3::major_version_t""'");
  } 
  arg5 = static_cast< vsomeip_v3::major_version_t >(val5);ecode6 = SWIG_AsVal_unsigned_SS_short(info[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "application_subscribe" "', argument " "6"" of type '" "vsomeip_v3::event_t""'");
  } 
  arg6 = static_cast< vsomeip_v3::event_t >(val6);(arg1)->subscribe(arg2,arg3,arg4,arg5,arg6);
  jsresult = env.Undefined();
  
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_subscribe__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::eventgroup_t arg4 ;
  vsomeip_v3::major_version_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_subscribe" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_subscribe" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_subscribe" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_subscribe" "', argument " "4"" of type '" "vsomeip_v3::eventgroup_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::eventgroup_t >(val4);ecode5 = SWIG_AsVal_unsigned_SS_char(info[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "application_subscribe" "', argument " "5"" of type '" "vsomeip_v3::major_version_t""'");
  } 
  arg5 = static_cast< vsomeip_v3::major_version_t >(val5);(arg1)->subscribe(arg2,arg3,arg4,arg5);
  jsresult = env.Undefined();
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_subscribe__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::eventgroup_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_subscribe" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_subscribe" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_subscribe" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_subscribe" "', argument " "4"" of type '" "vsomeip_v3::eventgroup_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::eventgroup_t >(val4);(arg1)->subscribe(arg2,arg3,arg4);
  jsresult = env.Undefined();
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application__wrap_application_subscribe(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 5 && static_cast<int>(info.Length()) <= 5) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_subscribe__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_subscribe__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_subscribe__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_subscribe__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 3 && static_cast<int>(info.Length()) <= 3) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_subscribe__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_subscribe__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function subscribe.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_unsubscribe__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::eventgroup_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_unsubscribe" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_unsubscribe" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_unsubscribe" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_unsubscribe" "', argument " "4"" of type '" "vsomeip_v3::eventgroup_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::eventgroup_t >(val4);(arg1)->unsubscribe(arg2,arg3,arg4);
  jsresult = env.Undefined();
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_is_available__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::major_version_t arg4 ;
  vsomeip_v3::minor_version_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_is_available" "', argument " "1"" of type '" "vsomeip_v3::application const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_is_available" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_is_available" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_char(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_is_available" "', argument " "4"" of type '" "vsomeip_v3::major_version_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::major_version_t >(val4);ecode5 = SWIG_AsVal_unsigned_SS_int(info[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "application_is_available" "', argument " "5"" of type '" "vsomeip_v3::minor_version_t""'");
  } 
  arg5 = static_cast< vsomeip_v3::minor_version_t >(val5);result = (bool)((vsomeip_v3::application const *)arg1)->is_available(arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_is_available__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::major_version_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_is_available" "', argument " "1"" of type '" "vsomeip_v3::application const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_is_available" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_is_available" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_char(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_is_available" "', argument " "4"" of type '" "vsomeip_v3::major_version_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::major_version_t >(val4);result = (bool)((vsomeip_v3::application const *)arg1)->is_available(arg2,arg3,arg4);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_is_available__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_is_available" "', argument " "1"" of type '" "vsomeip_v3::application const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_is_available" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_is_available" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);result = (bool)((vsomeip_v3::application const *)arg1)->is_available(arg2,arg3);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application__wrap_application_is_available(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_is_available__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_is_available__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 3 && static_cast<int>(info.Length()) <= 3) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_is_available__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_is_available__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_is_available__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_is_available__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function is_available.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_are_available__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::application::available_t *arg2 = 0 ;
  vsomeip_v3::service_t arg3 ;
  vsomeip_v3::instance_t arg4 ;
  vsomeip_v3::major_version_t arg5 ;
  vsomeip_v3::minor_version_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_are_available" "', argument " "1"" of type '" "vsomeip_v3::application const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__mapT_unsigned_short_std__mapT_unsigned_short_std__mapT_unsigned_char_unsigned_int_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "application_are_available" "', argument " "2"" of type '" "vsomeip_v3::application::available_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_are_available" "', argument " "2"" of type '" "vsomeip_v3::application::available_t &""'"); 
  }
  arg2 = reinterpret_cast< vsomeip_v3::application::available_t * >(argp2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_are_available" "', argument " "3"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::service_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_are_available" "', argument " "4"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::instance_t >(val4);ecode5 = SWIG_AsVal_unsigned_SS_char(info[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "application_are_available" "', argument " "5"" of type '" "vsomeip_v3::major_version_t""'");
  } 
  arg5 = static_cast< vsomeip_v3::major_version_t >(val5);ecode6 = SWIG_AsVal_unsigned_SS_int(info[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "application_are_available" "', argument " "6"" of type '" "vsomeip_v3::minor_version_t""'");
  } 
  arg6 = static_cast< vsomeip_v3::minor_version_t >(val6);result = (bool)((vsomeip_v3::application const *)arg1)->are_available(*arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_are_available__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::application::available_t *arg2 = 0 ;
  vsomeip_v3::service_t arg3 ;
  vsomeip_v3::instance_t arg4 ;
  vsomeip_v3::major_version_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_are_available" "', argument " "1"" of type '" "vsomeip_v3::application const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__mapT_unsigned_short_std__mapT_unsigned_short_std__mapT_unsigned_char_unsigned_int_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "application_are_available" "', argument " "2"" of type '" "vsomeip_v3::application::available_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_are_available" "', argument " "2"" of type '" "vsomeip_v3::application::available_t &""'"); 
  }
  arg2 = reinterpret_cast< vsomeip_v3::application::available_t * >(argp2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_are_available" "', argument " "3"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::service_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_are_available" "', argument " "4"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::instance_t >(val4);ecode5 = SWIG_AsVal_unsigned_SS_char(info[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "application_are_available" "', argument " "5"" of type '" "vsomeip_v3::major_version_t""'");
  } 
  arg5 = static_cast< vsomeip_v3::major_version_t >(val5);result = (bool)((vsomeip_v3::application const *)arg1)->are_available(*arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_are_available__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::application::available_t *arg2 = 0 ;
  vsomeip_v3::service_t arg3 ;
  vsomeip_v3::instance_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_are_available" "', argument " "1"" of type '" "vsomeip_v3::application const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__mapT_unsigned_short_std__mapT_unsigned_short_std__mapT_unsigned_char_unsigned_int_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "application_are_available" "', argument " "2"" of type '" "vsomeip_v3::application::available_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_are_available" "', argument " "2"" of type '" "vsomeip_v3::application::available_t &""'"); 
  }
  arg2 = reinterpret_cast< vsomeip_v3::application::available_t * >(argp2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_are_available" "', argument " "3"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::service_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_are_available" "', argument " "4"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::instance_t >(val4);result = (bool)((vsomeip_v3::application const *)arg1)->are_available(*arg2,arg3,arg4);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_are_available__SWIG_3(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::application::available_t *arg2 = 0 ;
  vsomeip_v3::service_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_are_available" "', argument " "1"" of type '" "vsomeip_v3::application const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__mapT_unsigned_short_std__mapT_unsigned_short_std__mapT_unsigned_char_unsigned_int_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "application_are_available" "', argument " "2"" of type '" "vsomeip_v3::application::available_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_are_available" "', argument " "2"" of type '" "vsomeip_v3::application::available_t &""'"); 
  }
  arg2 = reinterpret_cast< vsomeip_v3::application::available_t * >(argp2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_are_available" "', argument " "3"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::service_t >(val3);result = (bool)((vsomeip_v3::application const *)arg1)->are_available(*arg2,arg3);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_are_available__SWIG_4(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::application::available_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_are_available" "', argument " "1"" of type '" "vsomeip_v3::application const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__mapT_unsigned_short_std__mapT_unsigned_short_std__mapT_unsigned_char_unsigned_int_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "application_are_available" "', argument " "2"" of type '" "vsomeip_v3::application::available_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_are_available" "', argument " "2"" of type '" "vsomeip_v3::application::available_t &""'"); 
  }
  arg2 = reinterpret_cast< vsomeip_v3::application::available_t * >(argp2);result = (bool)((vsomeip_v3::application const *)arg1)->are_available(*arg2);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application__wrap_application_are_available(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 5 && static_cast<int>(info.Length()) <= 5) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_are_available__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_are_available__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_are_available__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_are_available__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 3 && static_cast<int>(info.Length()) <= 3) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_are_available__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_are_available__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_are_available__SWIG_3(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_are_available__SWIG_3(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_are_available__SWIG_4(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_are_available__SWIG_4(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function are_available.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_send(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::message > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_send.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_send" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);{
    {
      res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__message_t,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "application_send" "', argument " "2"" of type '" "std::shared_ptr< vsomeip_v3::message >""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_send" "', argument " "2"" of type '" "std::shared_ptr< vsomeip_v3::message >""'");
      } else {
        arg2 = *(reinterpret_cast< std::shared_ptr< vsomeip_v3::message > * >(argp2));
      }
    }
  }
  (arg1)->send(arg2);
  jsresult = env.Undefined();
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_notify__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::event_t arg4 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::payload > > arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_notify" "', argument " "1"" of type '" "vsomeip_v3::application const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_notify" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_notify" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_notify" "', argument " "4"" of type '" "vsomeip_v3::event_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::event_t >(val4);{
    {
      res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__payload_t,  0 );
      if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_notify" "', argument " "5"" of type '" "std::shared_ptr< vsomeip_v3::payload >""'"); 
      }  
      if (!argp5) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_notify" "', argument " "5"" of type '" "std::shared_ptr< vsomeip_v3::payload >""'");
      } else {
        arg5 = *(reinterpret_cast< std::shared_ptr< vsomeip_v3::payload > * >(argp5));
      }
    }
  }
  ecode6 = SWIG_AsVal_bool(info[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "application_notify" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);((vsomeip_v3::application const *)arg1)->notify(arg2,arg3,arg4,arg5,arg6);
  jsresult = env.Undefined();
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_notify__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::event_t arg4 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::payload > > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_notify" "', argument " "1"" of type '" "vsomeip_v3::application const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_notify" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_notify" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_notify" "', argument " "4"" of type '" "vsomeip_v3::event_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::event_t >(val4);{
    {
      res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__payload_t,  0 );
      if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_notify" "', argument " "5"" of type '" "std::shared_ptr< vsomeip_v3::payload >""'"); 
      }  
      if (!argp5) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_notify" "', argument " "5"" of type '" "std::shared_ptr< vsomeip_v3::payload >""'");
      } else {
        arg5 = *(reinterpret_cast< std::shared_ptr< vsomeip_v3::payload > * >(argp5));
      }
    }
  }
  ((vsomeip_v3::application const *)arg1)->notify(arg2,arg3,arg4,arg5);
  jsresult = env.Undefined();
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application__wrap_application_notify(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 5 && static_cast<int>(info.Length()) <= 5) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_notify__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_notify__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_notify__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_notify__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function notify.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_notify_one__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::event_t arg4 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::payload > > arg5 ;
  vsomeip_v3::client_t arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  unsigned short val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_notify_one" "', argument " "1"" of type '" "vsomeip_v3::application const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_notify_one" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_notify_one" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_notify_one" "', argument " "4"" of type '" "vsomeip_v3::event_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::event_t >(val4);{
    {
      res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__payload_t,  0 );
      if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_notify_one" "', argument " "5"" of type '" "std::shared_ptr< vsomeip_v3::payload >""'"); 
      }  
      if (!argp5) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_notify_one" "', argument " "5"" of type '" "std::shared_ptr< vsomeip_v3::payload >""'");
      } else {
        arg5 = *(reinterpret_cast< std::shared_ptr< vsomeip_v3::payload > * >(argp5));
      }
    }
  }
  ecode6 = SWIG_AsVal_unsigned_SS_short(info[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "application_notify_one" "', argument " "6"" of type '" "vsomeip_v3::client_t""'");
  } 
  arg6 = static_cast< vsomeip_v3::client_t >(val6);ecode7 = SWIG_AsVal_bool(info[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "application_notify_one" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);((vsomeip_v3::application const *)arg1)->notify_one(arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = env.Undefined();
  
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_notify_one__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::event_t arg4 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::payload > > arg5 ;
  vsomeip_v3::client_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  unsigned short val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_notify_one" "', argument " "1"" of type '" "vsomeip_v3::application const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_notify_one" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_notify_one" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_notify_one" "', argument " "4"" of type '" "vsomeip_v3::event_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::event_t >(val4);{
    {
      res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__payload_t,  0 );
      if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_notify_one" "', argument " "5"" of type '" "std::shared_ptr< vsomeip_v3::payload >""'"); 
      }  
      if (!argp5) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_notify_one" "', argument " "5"" of type '" "std::shared_ptr< vsomeip_v3::payload >""'");
      } else {
        arg5 = *(reinterpret_cast< std::shared_ptr< vsomeip_v3::payload > * >(argp5));
      }
    }
  }
  ecode6 = SWIG_AsVal_unsigned_SS_short(info[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "application_notify_one" "', argument " "6"" of type '" "vsomeip_v3::client_t""'");
  } 
  arg6 = static_cast< vsomeip_v3::client_t >(val6);((vsomeip_v3::application const *)arg1)->notify_one(arg2,arg3,arg4,arg5,arg6);
  jsresult = env.Undefined();
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application__wrap_application_notify_one(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 6 && static_cast<int>(info.Length()) <= 6) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_notify_one__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_notify_one__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 5 && static_cast<int>(info.Length()) <= 5) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_notify_one__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_notify_one__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function notify_one.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_register_state_handler(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::state_handler_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_register_state_handler.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_register_state_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__functionT_void_fvsomeip_v3__state_type_eF_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "application_register_state_handler" "', argument " "2"" of type '" "vsomeip_v3::state_handler_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_register_state_handler" "', argument " "2"" of type '" "vsomeip_v3::state_handler_t const &""'"); 
  }
  arg2 = reinterpret_cast< vsomeip_v3::state_handler_t * >(argp2);(arg1)->register_state_handler((vsomeip_v3::state_handler_t const &)*arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_unregister_state_handler(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_unregister_state_handler.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_unregister_state_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);(arg1)->unregister_state_handler();
  jsresult = env.Undefined();
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_register_message_handler(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::method_t arg4 ;
  vsomeip_v3::message_handler_t *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  if(static_cast<int>(info.Length()) < 4 || static_cast<int>(info.Length()) > 4) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_register_message_handler.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_register_message_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_register_message_handler" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_register_message_handler" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_register_message_handler" "', argument " "4"" of type '" "vsomeip_v3::method_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::method_t >(val4);res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__functionT_void_fstd__shared_ptrT_message_t_const_RF_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_register_message_handler" "', argument " "5"" of type '" "vsomeip_v3::message_handler_t const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_register_message_handler" "', argument " "5"" of type '" "vsomeip_v3::message_handler_t const &""'"); 
  }
  arg5 = reinterpret_cast< vsomeip_v3::message_handler_t * >(argp5);(arg1)->register_message_handler(arg2,arg3,arg4,(vsomeip_v3::message_handler_t const &)*arg5);
  jsresult = env.Undefined();
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_unregister_message_handler(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::method_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_unregister_message_handler.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_unregister_message_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_unregister_message_handler" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_unregister_message_handler" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_unregister_message_handler" "', argument " "4"" of type '" "vsomeip_v3::method_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::method_t >(val4);(arg1)->unregister_message_handler(arg2,arg3,arg4);
  jsresult = env.Undefined();
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_register_availability_handler__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::availability_handler_t *arg4 = 0 ;
  vsomeip_v3::major_version_t arg5 ;
  vsomeip_v3::minor_version_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_register_availability_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_register_availability_handler" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_register_availability_handler" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);res4 = SWIG_ConvertPtr(info[2], &argp4, SWIGTYPE_p_std__functionT_void_funsigned_short_unsigned_short_boolF_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "application_register_availability_handler" "', argument " "4"" of type '" "vsomeip_v3::availability_handler_t const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_register_availability_handler" "', argument " "4"" of type '" "vsomeip_v3::availability_handler_t const &""'"); 
  }
  arg4 = reinterpret_cast< vsomeip_v3::availability_handler_t * >(argp4);ecode5 = SWIG_AsVal_unsigned_SS_char(info[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "application_register_availability_handler" "', argument " "5"" of type '" "vsomeip_v3::major_version_t""'");
  } 
  arg5 = static_cast< vsomeip_v3::major_version_t >(val5);ecode6 = SWIG_AsVal_unsigned_SS_int(info[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "application_register_availability_handler" "', argument " "6"" of type '" "vsomeip_v3::minor_version_t""'");
  } 
  arg6 = static_cast< vsomeip_v3::minor_version_t >(val6);(arg1)->register_availability_handler(arg2,arg3,(vsomeip_v3::availability_handler_t const &)*arg4,arg5,arg6);
  jsresult = env.Undefined();
  
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_register_availability_handler__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::availability_handler_t *arg4 = 0 ;
  vsomeip_v3::major_version_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_register_availability_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_register_availability_handler" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_register_availability_handler" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);res4 = SWIG_ConvertPtr(info[2], &argp4, SWIGTYPE_p_std__functionT_void_funsigned_short_unsigned_short_boolF_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "application_register_availability_handler" "', argument " "4"" of type '" "vsomeip_v3::availability_handler_t const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_register_availability_handler" "', argument " "4"" of type '" "vsomeip_v3::availability_handler_t const &""'"); 
  }
  arg4 = reinterpret_cast< vsomeip_v3::availability_handler_t * >(argp4);ecode5 = SWIG_AsVal_unsigned_SS_char(info[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "application_register_availability_handler" "', argument " "5"" of type '" "vsomeip_v3::major_version_t""'");
  } 
  arg5 = static_cast< vsomeip_v3::major_version_t >(val5);(arg1)->register_availability_handler(arg2,arg3,(vsomeip_v3::availability_handler_t const &)*arg4,arg5);
  jsresult = env.Undefined();
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_register_availability_handler__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::availability_handler_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_register_availability_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_register_availability_handler" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_register_availability_handler" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);res4 = SWIG_ConvertPtr(info[2], &argp4, SWIGTYPE_p_std__functionT_void_funsigned_short_unsigned_short_boolF_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "application_register_availability_handler" "', argument " "4"" of type '" "vsomeip_v3::availability_handler_t const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_register_availability_handler" "', argument " "4"" of type '" "vsomeip_v3::availability_handler_t const &""'"); 
  }
  arg4 = reinterpret_cast< vsomeip_v3::availability_handler_t * >(argp4);(arg1)->register_availability_handler(arg2,arg3,(vsomeip_v3::availability_handler_t const &)*arg4);
  jsresult = env.Undefined();
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_unregister_availability_handler__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::major_version_t arg4 ;
  vsomeip_v3::minor_version_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_unregister_availability_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_unregister_availability_handler" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_unregister_availability_handler" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_char(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_unregister_availability_handler" "', argument " "4"" of type '" "vsomeip_v3::major_version_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::major_version_t >(val4);ecode5 = SWIG_AsVal_unsigned_SS_int(info[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "application_unregister_availability_handler" "', argument " "5"" of type '" "vsomeip_v3::minor_version_t""'");
  } 
  arg5 = static_cast< vsomeip_v3::minor_version_t >(val5);(arg1)->unregister_availability_handler(arg2,arg3,arg4,arg5);
  jsresult = env.Undefined();
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_unregister_availability_handler__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::major_version_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_unregister_availability_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_unregister_availability_handler" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_unregister_availability_handler" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_char(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_unregister_availability_handler" "', argument " "4"" of type '" "vsomeip_v3::major_version_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::major_version_t >(val4);(arg1)->unregister_availability_handler(arg2,arg3,arg4);
  jsresult = env.Undefined();
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_unregister_availability_handler__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_unregister_availability_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_unregister_availability_handler" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_unregister_availability_handler" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);(arg1)->unregister_availability_handler(arg2,arg3);
  jsresult = env.Undefined();
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application__wrap_application_unregister_availability_handler(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_unregister_availability_handler__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_unregister_availability_handler__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 3 && static_cast<int>(info.Length()) <= 3) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_unregister_availability_handler__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_unregister_availability_handler__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_unregister_availability_handler__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_unregister_availability_handler__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function unregister_availability_handler.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_register_subscription_handler__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::eventgroup_t arg4 ;
  vsomeip_v3::subscription_handler_t *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_register_subscription_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_register_subscription_handler" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_register_subscription_handler" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_register_subscription_handler" "', argument " "4"" of type '" "vsomeip_v3::eventgroup_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::eventgroup_t >(val4);res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__functionT_bool_funsigned_short___uid_t___uid_t_boolF_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_register_subscription_handler" "', argument " "5"" of type '" "vsomeip_v3::subscription_handler_t const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_register_subscription_handler" "', argument " "5"" of type '" "vsomeip_v3::subscription_handler_t const &""'"); 
  }
  arg5 = reinterpret_cast< vsomeip_v3::subscription_handler_t * >(argp5);(arg1)->register_subscription_handler(arg2,arg3,arg4,(vsomeip_v3::subscription_handler_t const &)*arg5);
  jsresult = env.Undefined();
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_register_async_subscription_handler__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::eventgroup_t arg4 ;
  vsomeip_v3::async_subscription_handler_t *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_register_async_subscription_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_register_async_subscription_handler" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_register_async_subscription_handler" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_register_async_subscription_handler" "', argument " "4"" of type '" "vsomeip_v3::eventgroup_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::eventgroup_t >(val4);res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__functionT_void_funsigned_short___uid_t___uid_t_bool_std__functionT_void_fbool_constF_tF_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_register_async_subscription_handler" "', argument " "5"" of type '" "vsomeip_v3::async_subscription_handler_t const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_register_async_subscription_handler" "', argument " "5"" of type '" "vsomeip_v3::async_subscription_handler_t const &""'"); 
  }
  arg5 = reinterpret_cast< vsomeip_v3::async_subscription_handler_t * >(argp5);(arg1)->register_async_subscription_handler(arg2,arg3,arg4,(vsomeip_v3::async_subscription_handler_t const &)*arg5);
  jsresult = env.Undefined();
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_unregister_subscription_handler(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::eventgroup_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_unregister_subscription_handler.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_unregister_subscription_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_unregister_subscription_handler" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_unregister_subscription_handler" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_unregister_subscription_handler" "', argument " "4"" of type '" "vsomeip_v3::eventgroup_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::eventgroup_t >(val4);(arg1)->unregister_subscription_handler(arg2,arg3,arg4);
  jsresult = env.Undefined();
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_clear_all_handler(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_clear_all_handler.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_clear_all_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);(arg1)->clear_all_handler();
  jsresult = env.Undefined();
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_is_routing(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_is_routing.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_is_routing" "', argument " "1"" of type '" "vsomeip_v3::application const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);result = (bool)((vsomeip_v3::application const *)arg1)->is_routing();
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_set_routing_state(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::routing_state_e arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_set_routing_state.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_set_routing_state" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_int(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_set_routing_state" "', argument " "2"" of type '" "vsomeip_v3::routing_state_e""'");
  } 
  arg2 = static_cast< vsomeip_v3::routing_state_e >(val2);(arg1)->set_routing_state(arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_unsubscribe__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::eventgroup_t arg4 ;
  vsomeip_v3::event_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_unsubscribe" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_unsubscribe" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_unsubscribe" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_unsubscribe" "', argument " "4"" of type '" "vsomeip_v3::eventgroup_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::eventgroup_t >(val4);ecode5 = SWIG_AsVal_unsigned_SS_short(info[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "application_unsubscribe" "', argument " "5"" of type '" "vsomeip_v3::event_t""'");
  } 
  arg5 = static_cast< vsomeip_v3::event_t >(val5);(arg1)->unsubscribe(arg2,arg3,arg4,arg5);
  jsresult = env.Undefined();
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application__wrap_application_unsubscribe(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 3 && static_cast<int>(info.Length()) <= 3) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_unsubscribe__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_unsubscribe__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_unsubscribe__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_unsubscribe__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function unsubscribe.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_register_subscription_status_handler__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::eventgroup_t arg4 ;
  vsomeip_v3::event_t arg5 ;
  vsomeip_v3::subscription_status_handler_t arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_register_subscription_status_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_register_subscription_status_handler" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_register_subscription_status_handler" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_register_subscription_status_handler" "', argument " "4"" of type '" "vsomeip_v3::eventgroup_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::eventgroup_t >(val4);ecode5 = SWIG_AsVal_unsigned_SS_short(info[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "application_register_subscription_status_handler" "', argument " "5"" of type '" "vsomeip_v3::event_t""'");
  } 
  arg5 = static_cast< vsomeip_v3::event_t >(val5);{
    {
      res6 = SWIG_ConvertPtr(info[4], &argp6, SWIGTYPE_p_std__functionT_void_funsigned_short_const_unsigned_short_const_unsigned_short_const_unsigned_short_const_unsigned_short_constF_t,  0 );
      if (!SWIG_IsOK(res6)) {
        SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "application_register_subscription_status_handler" "', argument " "6"" of type '" "vsomeip_v3::subscription_status_handler_t""'"); 
      }  
      if (!argp6) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_register_subscription_status_handler" "', argument " "6"" of type '" "vsomeip_v3::subscription_status_handler_t""'");
      } else {
        arg6 = *(reinterpret_cast< vsomeip_v3::subscription_status_handler_t * >(argp6));
      }
    }
  }
  ecode7 = SWIG_AsVal_bool(info[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "application_register_subscription_status_handler" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);(arg1)->register_subscription_status_handler(arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = env.Undefined();
  
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_register_subscription_status_handler__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::eventgroup_t arg4 ;
  vsomeip_v3::event_t arg5 ;
  vsomeip_v3::subscription_status_handler_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_register_subscription_status_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_register_subscription_status_handler" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_register_subscription_status_handler" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_register_subscription_status_handler" "', argument " "4"" of type '" "vsomeip_v3::eventgroup_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::eventgroup_t >(val4);ecode5 = SWIG_AsVal_unsigned_SS_short(info[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "application_register_subscription_status_handler" "', argument " "5"" of type '" "vsomeip_v3::event_t""'");
  } 
  arg5 = static_cast< vsomeip_v3::event_t >(val5);{
    {
      res6 = SWIG_ConvertPtr(info[4], &argp6, SWIGTYPE_p_std__functionT_void_funsigned_short_const_unsigned_short_const_unsigned_short_const_unsigned_short_const_unsigned_short_constF_t,  0 );
      if (!SWIG_IsOK(res6)) {
        SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "application_register_subscription_status_handler" "', argument " "6"" of type '" "vsomeip_v3::subscription_status_handler_t""'"); 
      }  
      if (!argp6) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_register_subscription_status_handler" "', argument " "6"" of type '" "vsomeip_v3::subscription_status_handler_t""'");
      } else {
        arg6 = *(reinterpret_cast< vsomeip_v3::subscription_status_handler_t * >(argp6));
      }
    }
  }
  (arg1)->register_subscription_status_handler(arg2,arg3,arg4,arg5,arg6);
  jsresult = env.Undefined();
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application__wrap_application_register_subscription_status_handler(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 6 && static_cast<int>(info.Length()) <= 6) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_register_subscription_status_handler__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_register_subscription_status_handler__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 5 && static_cast<int>(info.Length()) <= 5) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_register_subscription_status_handler__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_register_subscription_status_handler__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function register_subscription_status_handler.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_unregister_subscription_status_handler(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::eventgroup_t arg4 ;
  vsomeip_v3::event_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  
  if(static_cast<int>(info.Length()) < 4 || static_cast<int>(info.Length()) > 4) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_unregister_subscription_status_handler.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_unregister_subscription_status_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_unregister_subscription_status_handler" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_unregister_subscription_status_handler" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_unregister_subscription_status_handler" "', argument " "4"" of type '" "vsomeip_v3::eventgroup_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::eventgroup_t >(val4);ecode5 = SWIG_AsVal_unsigned_SS_short(info[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "application_unregister_subscription_status_handler" "', argument " "5"" of type '" "vsomeip_v3::event_t""'");
  } 
  arg5 = static_cast< vsomeip_v3::event_t >(val5);(arg1)->unregister_subscription_status_handler(arg2,arg3,arg4,arg5);
  jsresult = env.Undefined();
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_get_offered_services_async(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::offer_type_e arg2 ;
  vsomeip_v3::offered_services_handler_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_get_offered_services_async.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_get_offered_services_async" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_int(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_get_offered_services_async" "', argument " "2"" of type '" "vsomeip_v3::offer_type_e""'");
  } 
  arg2 = static_cast< vsomeip_v3::offer_type_e >(val2);res3 = SWIG_ConvertPtr(info[1], &argp3, SWIGTYPE_p_std__functionT_void_fstd__vectorT_std__pairT_unsigned_short_unsigned_short_t_t_const_RF_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "application_get_offered_services_async" "', argument " "3"" of type '" "vsomeip_v3::offered_services_handler_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_get_offered_services_async" "', argument " "3"" of type '" "vsomeip_v3::offered_services_handler_t const &""'"); 
  }
  arg3 = reinterpret_cast< vsomeip_v3::offered_services_handler_t * >(argp3);(arg1)->get_offered_services_async(arg2,(vsomeip_v3::offered_services_handler_t const &)*arg3);
  jsresult = env.Undefined();
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_set_watchdog_handler(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::watchdog_handler_t *arg2 = 0 ;
  std::chrono::seconds arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_set_watchdog_handler.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_set_watchdog_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__functionT_void_fF_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "application_set_watchdog_handler" "', argument " "2"" of type '" "vsomeip_v3::watchdog_handler_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_set_watchdog_handler" "', argument " "2"" of type '" "vsomeip_v3::watchdog_handler_t const &""'"); 
  }
  arg2 = reinterpret_cast< vsomeip_v3::watchdog_handler_t * >(argp2);{
    {
      res3 = SWIG_ConvertPtr(info[1], &argp3, SWIGTYPE_p_std__chrono__seconds,  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "application_set_watchdog_handler" "', argument " "3"" of type '" "std::chrono::seconds""'"); 
      }  
      if (!argp3) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_set_watchdog_handler" "', argument " "3"" of type '" "std::chrono::seconds""'");
      } else {
        arg3 = *(reinterpret_cast< std::chrono::seconds * >(argp3));
      }
    }
  }
  (arg1)->set_watchdog_handler((vsomeip_v3::watchdog_handler_t const &)*arg2,arg3);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_set_sd_acceptance_required__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::remote_info_t *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_set_sd_acceptance_required" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_vsomeip_v3__remote_info_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "application_set_sd_acceptance_required" "', argument " "2"" of type '" "vsomeip_v3::remote_info_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_set_sd_acceptance_required" "', argument " "2"" of type '" "vsomeip_v3::remote_info_t const &""'"); 
  }
  arg2 = reinterpret_cast< vsomeip_v3::remote_info_t * >(argp2);res3 = SWIG_ConvertPtr(info[1], &argp3, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "application_set_sd_acceptance_required" "', argument " "3"" of type '" "std::string const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_set_sd_acceptance_required" "', argument " "3"" of type '" "std::string const &""'"); 
  }
  arg3 = reinterpret_cast< std::string * >(argp3);ecode4 = SWIG_AsVal_bool(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_set_sd_acceptance_required" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);(arg1)->set_sd_acceptance_required((vsomeip_v3::remote_info_t const &)*arg2,(std::string const &)*arg3,arg4);
  jsresult = env.Undefined();
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_set_sd_acceptance_required__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::application::sd_acceptance_map_type_t *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_set_sd_acceptance_required" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__mapT_vsomeip_v3__remote_info_t_std__string_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "application_set_sd_acceptance_required" "', argument " "2"" of type '" "vsomeip_v3::application::sd_acceptance_map_type_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_set_sd_acceptance_required" "', argument " "2"" of type '" "vsomeip_v3::application::sd_acceptance_map_type_t const &""'"); 
  }
  arg2 = reinterpret_cast< vsomeip_v3::application::sd_acceptance_map_type_t * >(argp2);ecode3 = SWIG_AsVal_bool(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_set_sd_acceptance_required" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);(arg1)->set_sd_acceptance_required((vsomeip_v3::application::sd_acceptance_map_type_t const &)*arg2,arg3);
  jsresult = env.Undefined();
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application__wrap_application_set_sd_acceptance_required(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 3 && static_cast<int>(info.Length()) <= 3) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_set_sd_acceptance_required__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_set_sd_acceptance_required__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_set_sd_acceptance_required__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_set_sd_acceptance_required__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function set_sd_acceptance_required.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_get_sd_acceptance_required(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::application::sd_acceptance_map_type_t result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_get_sd_acceptance_required.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_get_sd_acceptance_required" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);result = (arg1)->get_sd_acceptance_required();
  jsresult = SWIG_NewPointerObj((new vsomeip_v3::application::sd_acceptance_map_type_t(result)), SWIGTYPE_p_std__mapT_vsomeip_v3__remote_info_t_std__string_t, SWIG_POINTER_OWN |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_register_sd_acceptance_handler(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::sd_acceptance_handler_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_register_sd_acceptance_handler.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_register_sd_acceptance_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__functionT_bool_fremote_info_t_const_RF_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "application_register_sd_acceptance_handler" "', argument " "2"" of type '" "vsomeip_v3::sd_acceptance_handler_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_register_sd_acceptance_handler" "', argument " "2"" of type '" "vsomeip_v3::sd_acceptance_handler_t const &""'"); 
  }
  arg2 = reinterpret_cast< vsomeip_v3::sd_acceptance_handler_t * >(argp2);(arg1)->register_sd_acceptance_handler((vsomeip_v3::sd_acceptance_handler_t const &)*arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_register_reboot_notification_handler(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::reboot_notification_handler_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_register_reboot_notification_handler.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_register_reboot_notification_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__functionT_void_fip_address_t_const_RF_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "application_register_reboot_notification_handler" "', argument " "2"" of type '" "vsomeip_v3::reboot_notification_handler_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_register_reboot_notification_handler" "', argument " "2"" of type '" "vsomeip_v3::reboot_notification_handler_t const &""'"); 
  }
  arg2 = reinterpret_cast< vsomeip_v3::reboot_notification_handler_t * >(argp2);(arg1)->register_reboot_notification_handler((vsomeip_v3::reboot_notification_handler_t const &)*arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_register_routing_ready_handler(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::routing_ready_handler_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_register_routing_ready_handler.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_register_routing_ready_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__functionT_void_fF_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "application_register_routing_ready_handler" "', argument " "2"" of type '" "vsomeip_v3::routing_ready_handler_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_register_routing_ready_handler" "', argument " "2"" of type '" "vsomeip_v3::routing_ready_handler_t const &""'"); 
  }
  arg2 = reinterpret_cast< vsomeip_v3::routing_ready_handler_t * >(argp2);(arg1)->register_routing_ready_handler((vsomeip_v3::routing_ready_handler_t const &)*arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_register_routing_state_handler(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::routing_state_handler_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_register_routing_state_handler.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_register_routing_state_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__functionT_void_fvsomeip_v3__routing_state_eF_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "application_register_routing_state_handler" "', argument " "2"" of type '" "vsomeip_v3::routing_state_handler_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_register_routing_state_handler" "', argument " "2"" of type '" "vsomeip_v3::routing_state_handler_t const &""'"); 
  }
  arg2 = reinterpret_cast< vsomeip_v3::routing_state_handler_t * >(argp2);(arg1)->register_routing_state_handler((vsomeip_v3::routing_state_handler_t const &)*arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_update_service_configuration(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  std::uint16_t arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 6 || static_cast<int>(info.Length()) > 6) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_update_service_configuration.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_update_service_configuration" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_update_service_configuration" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_update_service_configuration" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_update_service_configuration" "', argument " "4"" of type '" "std::uint16_t""'");
  } 
  arg4 = static_cast< std::uint16_t >(val4);ecode5 = SWIG_AsVal_bool(info[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "application_update_service_configuration" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);ecode6 = SWIG_AsVal_bool(info[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "application_update_service_configuration" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);ecode7 = SWIG_AsVal_bool(info[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "application_update_service_configuration" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);result = (bool)(arg1)->update_service_configuration(arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_update_security_policy_configuration(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::policy > > arg4 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::payload > > arg5 ;
  vsomeip_v3::security_update_handler_t *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  
  if(static_cast<int>(info.Length()) < 5 || static_cast<int>(info.Length()) > 5) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_update_security_policy_configuration.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_update_security_policy_configuration" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_update_security_policy_configuration" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_update_security_policy_configuration" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);{
    {
      res4 = SWIG_ConvertPtr(info[2], &argp4, SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__policy_t,  0 );
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "application_update_security_policy_configuration" "', argument " "4"" of type '" "std::shared_ptr< vsomeip_v3::policy >""'"); 
      }  
      if (!argp4) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_update_security_policy_configuration" "', argument " "4"" of type '" "std::shared_ptr< vsomeip_v3::policy >""'");
      } else {
        arg4 = *(reinterpret_cast< std::shared_ptr< vsomeip_v3::policy > * >(argp4));
      }
    }
  }
  {
    {
      res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__payload_t,  0 );
      if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_update_security_policy_configuration" "', argument " "5"" of type '" "std::shared_ptr< vsomeip_v3::payload >""'"); 
      }  
      if (!argp5) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_update_security_policy_configuration" "', argument " "5"" of type '" "std::shared_ptr< vsomeip_v3::payload >""'");
      } else {
        arg5 = *(reinterpret_cast< std::shared_ptr< vsomeip_v3::payload > * >(argp5));
      }
    }
  }
  res6 = SWIG_ConvertPtr(info[4], &argp6, SWIGTYPE_p_std__functionT_void_fvsomeip_v3__security_update_state_eF_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "application_update_security_policy_configuration" "', argument " "6"" of type '" "vsomeip_v3::security_update_handler_t const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_update_security_policy_configuration" "', argument " "6"" of type '" "vsomeip_v3::security_update_handler_t const &""'"); 
  }
  arg6 = reinterpret_cast< vsomeip_v3::security_update_handler_t * >(argp6);(arg1)->update_security_policy_configuration(arg2,arg3,arg4,arg5,(vsomeip_v3::security_update_handler_t const &)*arg6);
  jsresult = env.Undefined();
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_remove_security_policy_configuration(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  vsomeip_v3::security_update_handler_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_remove_security_policy_configuration.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_remove_security_policy_configuration" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_remove_security_policy_configuration" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_remove_security_policy_configuration" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);res4 = SWIG_ConvertPtr(info[2], &argp4, SWIGTYPE_p_std__functionT_void_fvsomeip_v3__security_update_state_eF_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "application_remove_security_policy_configuration" "', argument " "4"" of type '" "vsomeip_v3::security_update_handler_t const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_remove_security_policy_configuration" "', argument " "4"" of type '" "vsomeip_v3::security_update_handler_t const &""'"); 
  }
  arg4 = reinterpret_cast< vsomeip_v3::security_update_handler_t * >(argp4);(arg1)->remove_security_policy_configuration(arg2,arg3,(vsomeip_v3::security_update_handler_t const &)*arg4);
  jsresult = env.Undefined();
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_register_subscription_handler__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::eventgroup_t arg4 ;
  vsomeip_v3::subscription_handler_ext_t *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_register_subscription_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_register_subscription_handler" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_register_subscription_handler" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_register_subscription_handler" "', argument " "4"" of type '" "vsomeip_v3::eventgroup_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::eventgroup_t >(val4);res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__functionT_bool_funsigned_short___uid_t___uid_t_std__string_const_R_boolF_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_register_subscription_handler" "', argument " "5"" of type '" "vsomeip_v3::subscription_handler_ext_t const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_register_subscription_handler" "', argument " "5"" of type '" "vsomeip_v3::subscription_handler_ext_t const &""'"); 
  }
  arg5 = reinterpret_cast< vsomeip_v3::subscription_handler_ext_t * >(argp5);(arg1)->register_subscription_handler(arg2,arg3,arg4,(vsomeip_v3::subscription_handler_ext_t const &)*arg5);
  jsresult = env.Undefined();
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_register_async_subscription_handler__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::eventgroup_t arg4 ;
  vsomeip_v3::async_subscription_handler_ext_t *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_register_async_subscription_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_register_async_subscription_handler" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_register_async_subscription_handler" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_register_async_subscription_handler" "', argument " "4"" of type '" "vsomeip_v3::eventgroup_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::eventgroup_t >(val4);res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__functionT_void_funsigned_short___uid_t___uid_t_std__string_const_R_bool_std__functionT_void_fbool_constF_tF_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_register_async_subscription_handler" "', argument " "5"" of type '" "vsomeip_v3::async_subscription_handler_ext_t const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_register_async_subscription_handler" "', argument " "5"" of type '" "vsomeip_v3::async_subscription_handler_ext_t const &""'"); 
  }
  arg5 = reinterpret_cast< vsomeip_v3::async_subscription_handler_ext_t * >(argp5);(arg1)->register_async_subscription_handler(arg2,arg3,arg4,(vsomeip_v3::async_subscription_handler_ext_t const &)*arg5);
  jsresult = env.Undefined();
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_subscribe_with_debounce(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::eventgroup_t arg4 ;
  vsomeip_v3::major_version_t arg5 ;
  vsomeip_v3::event_t arg6 ;
  vsomeip_v3::debounce_filter_t *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned short val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  
  if(static_cast<int>(info.Length()) < 6 || static_cast<int>(info.Length()) > 6) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_subscribe_with_debounce.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_subscribe_with_debounce" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_subscribe_with_debounce" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_subscribe_with_debounce" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_subscribe_with_debounce" "', argument " "4"" of type '" "vsomeip_v3::eventgroup_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::eventgroup_t >(val4);ecode5 = SWIG_AsVal_unsigned_SS_char(info[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "application_subscribe_with_debounce" "', argument " "5"" of type '" "vsomeip_v3::major_version_t""'");
  } 
  arg5 = static_cast< vsomeip_v3::major_version_t >(val5);ecode6 = SWIG_AsVal_unsigned_SS_short(info[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "application_subscribe_with_debounce" "', argument " "6"" of type '" "vsomeip_v3::event_t""'");
  } 
  arg6 = static_cast< vsomeip_v3::event_t >(val6);res7 = SWIG_ConvertPtr(info[5], &argp7, SWIGTYPE_p_vsomeip_v3__debounce_filter_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "application_subscribe_with_debounce" "', argument " "7"" of type '" "vsomeip_v3::debounce_filter_t const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_subscribe_with_debounce" "', argument " "7"" of type '" "vsomeip_v3::debounce_filter_t const &""'"); 
  }
  arg7 = reinterpret_cast< vsomeip_v3::debounce_filter_t * >(argp7);(arg1)->subscribe_with_debounce(arg2,arg3,arg4,arg5,arg6,(vsomeip_v3::debounce_filter_t const &)*arg7);
  jsresult = env.Undefined();
  
  
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_register_message_acceptance_handler(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::message_acceptance_handler_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_register_message_acceptance_handler.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_register_message_acceptance_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__functionT_bool_fmessage_acceptance_t_const_RF_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "application_register_message_acceptance_handler" "', argument " "2"" of type '" "vsomeip_v3::message_acceptance_handler_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_register_message_acceptance_handler" "', argument " "2"" of type '" "vsomeip_v3::message_acceptance_handler_t const &""'"); 
  }
  arg2 = reinterpret_cast< vsomeip_v3::message_acceptance_handler_t * >(argp2);(arg1)->register_message_acceptance_handler((vsomeip_v3::message_acceptance_handler_t const &)*arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_get_additional_data(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::map< std::string,std::string > result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_get_additional_data.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_get_additional_data" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "application_get_additional_data" "', argument " "2"" of type '" "std::string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_get_additional_data" "', argument " "2"" of type '" "std::string const &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);result = (arg1)->get_additional_data((std::string const &)*arg2);
  jsresult = SWIG_NewPointerObj((new std::map< std::string,std::string >(result)), SWIGTYPE_p_std__mapT_std__string_std__string_t, SWIG_POINTER_OWN |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_register_availability_handler__SWIG_3(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::availability_state_handler_t *arg4 = 0 ;
  vsomeip_v3::major_version_t arg5 ;
  vsomeip_v3::minor_version_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_register_availability_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_register_availability_handler" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_register_availability_handler" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);res4 = SWIG_ConvertPtr(info[2], &argp4, SWIGTYPE_p_std__functionT_void_funsigned_short_unsigned_short_vsomeip_v3__availability_state_eF_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "application_register_availability_handler" "', argument " "4"" of type '" "vsomeip_v3::availability_state_handler_t const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_register_availability_handler" "', argument " "4"" of type '" "vsomeip_v3::availability_state_handler_t const &""'"); 
  }
  arg4 = reinterpret_cast< vsomeip_v3::availability_state_handler_t * >(argp4);ecode5 = SWIG_AsVal_unsigned_SS_char(info[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "application_register_availability_handler" "', argument " "5"" of type '" "vsomeip_v3::major_version_t""'");
  } 
  arg5 = static_cast< vsomeip_v3::major_version_t >(val5);ecode6 = SWIG_AsVal_unsigned_SS_int(info[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "application_register_availability_handler" "', argument " "6"" of type '" "vsomeip_v3::minor_version_t""'");
  } 
  arg6 = static_cast< vsomeip_v3::minor_version_t >(val6);(arg1)->register_availability_handler(arg2,arg3,(vsomeip_v3::availability_state_handler_t const &)*arg4,arg5,arg6);
  jsresult = env.Undefined();
  
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_register_availability_handler__SWIG_4(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::availability_state_handler_t *arg4 = 0 ;
  vsomeip_v3::major_version_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_register_availability_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_register_availability_handler" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_register_availability_handler" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);res4 = SWIG_ConvertPtr(info[2], &argp4, SWIGTYPE_p_std__functionT_void_funsigned_short_unsigned_short_vsomeip_v3__availability_state_eF_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "application_register_availability_handler" "', argument " "4"" of type '" "vsomeip_v3::availability_state_handler_t const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_register_availability_handler" "', argument " "4"" of type '" "vsomeip_v3::availability_state_handler_t const &""'"); 
  }
  arg4 = reinterpret_cast< vsomeip_v3::availability_state_handler_t * >(argp4);ecode5 = SWIG_AsVal_unsigned_SS_char(info[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "application_register_availability_handler" "', argument " "5"" of type '" "vsomeip_v3::major_version_t""'");
  } 
  arg5 = static_cast< vsomeip_v3::major_version_t >(val5);(arg1)->register_availability_handler(arg2,arg3,(vsomeip_v3::availability_state_handler_t const &)*arg4,arg5);
  jsresult = env.Undefined();
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_register_availability_handler__SWIG_5(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::availability_state_handler_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_register_availability_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_register_availability_handler" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_register_availability_handler" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);res4 = SWIG_ConvertPtr(info[2], &argp4, SWIGTYPE_p_std__functionT_void_funsigned_short_unsigned_short_vsomeip_v3__availability_state_eF_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "application_register_availability_handler" "', argument " "4"" of type '" "vsomeip_v3::availability_state_handler_t const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_register_availability_handler" "', argument " "4"" of type '" "vsomeip_v3::availability_state_handler_t const &""'"); 
  }
  arg4 = reinterpret_cast< vsomeip_v3::availability_state_handler_t * >(argp4);(arg1)->register_availability_handler(arg2,arg3,(vsomeip_v3::availability_state_handler_t const &)*arg4);
  jsresult = env.Undefined();
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application__wrap_application_register_availability_handler(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 5 && static_cast<int>(info.Length()) <= 5) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_register_availability_handler__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_register_availability_handler__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_register_availability_handler__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_register_availability_handler__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 3 && static_cast<int>(info.Length()) <= 3) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_register_availability_handler__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_register_availability_handler__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 5 && static_cast<int>(info.Length()) <= 5) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_register_availability_handler__SWIG_3(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_register_availability_handler__SWIG_3(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_register_availability_handler__SWIG_4(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_register_availability_handler__SWIG_4(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 3 && static_cast<int>(info.Length()) <= 3) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_register_availability_handler__SWIG_5(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_register_availability_handler__SWIG_5(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function register_availability_handler.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_register_subscription_handler__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::eventgroup_t arg4 ;
  vsomeip_v3::subscription_handler_sec_t *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_register_subscription_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_register_subscription_handler" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_register_subscription_handler" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_register_subscription_handler" "', argument " "4"" of type '" "vsomeip_v3::eventgroup_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::eventgroup_t >(val4);res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__functionT_bool_funsigned_short_vsomeip_sec_client_t_const_p_std__string_const_R_boolF_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_register_subscription_handler" "', argument " "5"" of type '" "vsomeip_v3::subscription_handler_sec_t const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_register_subscription_handler" "', argument " "5"" of type '" "vsomeip_v3::subscription_handler_sec_t const &""'"); 
  }
  arg5 = reinterpret_cast< vsomeip_v3::subscription_handler_sec_t * >(argp5);(arg1)->register_subscription_handler(arg2,arg3,arg4,(vsomeip_v3::subscription_handler_sec_t const &)*arg5);
  jsresult = env.Undefined();
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application__wrap_application_register_subscription_handler(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_register_subscription_handler__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_register_subscription_handler__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_register_subscription_handler__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_register_subscription_handler__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_register_subscription_handler__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_register_subscription_handler__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function register_subscription_handler.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_register_async_subscription_handler__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::eventgroup_t arg4 ;
  vsomeip_v3::async_subscription_handler_sec_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_register_async_subscription_handler" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_register_async_subscription_handler" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_register_async_subscription_handler" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_register_async_subscription_handler" "', argument " "4"" of type '" "vsomeip_v3::eventgroup_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::eventgroup_t >(val4);{
    {
      res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__functionT_void_funsigned_short_vsomeip_sec_client_t_const_p_std__string_const_R_bool_std__functionT_void_fboolF_tF_t,  0 );
      if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_register_async_subscription_handler" "', argument " "5"" of type '" "vsomeip_v3::async_subscription_handler_sec_t""'"); 
      }  
      if (!argp5) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_register_async_subscription_handler" "', argument " "5"" of type '" "vsomeip_v3::async_subscription_handler_sec_t""'");
      } else {
        arg5 = *(reinterpret_cast< vsomeip_v3::async_subscription_handler_sec_t * >(argp5));
      }
    }
  }
  (arg1)->register_async_subscription_handler(arg2,arg3,arg4,arg5);
  jsresult = env.Undefined();
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application__wrap_application_register_async_subscription_handler(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_register_async_subscription_handler__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_register_async_subscription_handler__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_register_async_subscription_handler__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_register_async_subscription_handler__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_application_register_async_subscription_handler__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_application_register_async_subscription_handler__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function register_async_subscription_handler.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_register_message_handler_ext(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  vsomeip_v3::service_t arg2 ;
  vsomeip_v3::instance_t arg3 ;
  vsomeip_v3::method_t arg4 ;
  vsomeip_v3::message_handler_t *arg5 = 0 ;
  vsomeip_v3::handler_registration_type_e arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  if(static_cast<int>(info.Length()) < 5 || static_cast<int>(info.Length()) > 5) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_register_message_handler_ext.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_register_message_handler_ext" "', argument " "1"" of type '" "vsomeip_v3::application *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "application_register_message_handler_ext" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "application_register_message_handler_ext" "', argument " "3"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::instance_t >(val3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "application_register_message_handler_ext" "', argument " "4"" of type '" "vsomeip_v3::method_t""'");
  } 
  arg4 = static_cast< vsomeip_v3::method_t >(val4);res5 = SWIG_ConvertPtr(info[3], &argp5, SWIGTYPE_p_std__functionT_void_fstd__shared_ptrT_message_t_const_RF_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "application_register_message_handler_ext" "', argument " "5"" of type '" "vsomeip_v3::message_handler_t const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "application_register_message_handler_ext" "', argument " "5"" of type '" "vsomeip_v3::message_handler_t const &""'"); 
  }
  arg5 = reinterpret_cast< vsomeip_v3::message_handler_t * >(argp5);ecode6 = SWIG_AsVal_int(info[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "application_register_message_handler_ext" "', argument " "6"" of type '" "vsomeip_v3::handler_registration_type_e""'");
  } 
  arg6 = static_cast< vsomeip_v3::handler_registration_type_e >(val6);(arg1)->register_message_handler_ext(arg2,arg3,arg4,(vsomeip_v3::message_handler_t const &)*arg5,arg6);
  jsresult = env.Undefined();
  
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_get_configuration(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::configuration > > result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_get_configuration.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_get_configuration" "', argument " "1"" of type '" "vsomeip_v3::application const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);result = ((vsomeip_v3::application const *)arg1)->get_configuration();
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< vsomeip_v3::configuration >(result)), SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__configuration_t, SWIG_POINTER_OWN |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_application_templ<SWIG_OBJ_WRAP>::_wrap_application_get_policy_manager(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::application *arg1 = (vsomeip_v3::application *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::policy_manager > > result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_application_get_policy_manager.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "application_get_policy_manager" "', argument " "1"" of type '" "vsomeip_v3::application const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::application * >(argp1);result = ((vsomeip_v3::application const *)arg1)->get_policy_manager();
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< vsomeip_v3::policy_manager >(result)), SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__policy_manager_t, SWIG_POINTER_OWN |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_veto_ctor
template <typename SWIG_OBJ_WRAP>
_exports_application_templ<SWIG_OBJ_WRAP>::_exports_application_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS as its
    // base abstract class
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  SWIG_Error(SWIG_ERROR, "Class application can not be instantiated");
  return;
  goto fail;
fail:
  return;
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_application_templ<SWIG_OBJ_WRAP>::_exports_application_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_message_templ<SWIG_OBJ_WRAP>::~_exports_message_templ() {
  auto arg1 = reinterpret_cast<vsomeip_v3::message *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_templ<SWIG_OBJ_WRAP>::_wrap_message_get_payload(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message *arg1 = (vsomeip_v3::message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::payload > > result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_get_payload.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_get_payload" "', argument " "1"" of type '" "vsomeip_v3::message const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message * >(argp1);result = ((vsomeip_v3::message const *)arg1)->get_payload();
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< vsomeip_v3::payload >(result)), SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__payload_t, SWIG_POINTER_OWN |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_templ<SWIG_OBJ_WRAP>::_wrap_message_set_payload(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message *arg1 = (vsomeip_v3::message *) 0 ;
  SwigValueWrapper< std::shared_ptr< vsomeip_v3::payload > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_set_payload.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_set_payload" "', argument " "1"" of type '" "vsomeip_v3::message *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message * >(argp1);{
    {
      res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__shared_ptrT_vsomeip_v3__payload_t,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "message_set_payload" "', argument " "2"" of type '" "std::shared_ptr< vsomeip_v3::payload >""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "message_set_payload" "', argument " "2"" of type '" "std::shared_ptr< vsomeip_v3::payload >""'");
      } else {
        arg2 = *(reinterpret_cast< std::shared_ptr< vsomeip_v3::payload > * >(argp2));
      }
    }
  }
  (arg1)->set_payload(arg2);
  jsresult = env.Undefined();
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_templ<SWIG_OBJ_WRAP>::_wrap_message_get_check_result(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message *arg1 = (vsomeip_v3::message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_get_check_result.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_get_check_result" "', argument " "1"" of type '" "vsomeip_v3::message const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message * >(argp1);result = (uint8_t)((vsomeip_v3::message const *)arg1)->get_check_result();
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_templ<SWIG_OBJ_WRAP>::_wrap_message_set_check_result(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message *arg1 = (vsomeip_v3::message *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_set_check_result.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_set_check_result" "', argument " "1"" of type '" "vsomeip_v3::message *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_set_check_result" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);(arg1)->set_check_result(arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_templ<SWIG_OBJ_WRAP>::_wrap_message_is_valid_crc(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message *arg1 = (vsomeip_v3::message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_is_valid_crc.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_is_valid_crc" "', argument " "1"" of type '" "vsomeip_v3::message const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message * >(argp1);result = (bool)((vsomeip_v3::message const *)arg1)->is_valid_crc();
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_templ<SWIG_OBJ_WRAP>::_wrap_message_get_uid(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message *arg1 = (vsomeip_v3::message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::uid_t result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_get_uid.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_get_uid" "', argument " "1"" of type '" "vsomeip_v3::message const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message * >(argp1);result = ((vsomeip_v3::message const *)arg1)->get_uid();
  jsresult = SWIG_NewPointerObj((new vsomeip_v3::uid_t(result)), SWIGTYPE_p_uid_t, SWIG_POINTER_OWN |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_templ<SWIG_OBJ_WRAP>::_wrap_message_get_gid(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message *arg1 = (vsomeip_v3::message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::gid_t result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_get_gid.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_get_gid" "', argument " "1"" of type '" "vsomeip_v3::message const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message * >(argp1);result = ((vsomeip_v3::message const *)arg1)->get_gid();
  jsresult = SWIG_NewPointerObj((new vsomeip_v3::gid_t(result)), SWIGTYPE_p_uid_t, SWIG_POINTER_OWN |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_templ<SWIG_OBJ_WRAP>::_wrap_message_get_env(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message *arg1 = (vsomeip_v3::message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_get_env.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_get_env" "', argument " "1"" of type '" "vsomeip_v3::message const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message * >(argp1);result = ((vsomeip_v3::message const *)arg1)->get_env();
  jsresult = SWIG_NewPointerObj((new std::string(result)), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_templ<SWIG_OBJ_WRAP>::_wrap_message_get_sec_client(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message *arg1 = (vsomeip_v3::message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_sec_client_t result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_message_get_sec_client.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_get_sec_client" "', argument " "1"" of type '" "vsomeip_v3::message const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message * >(argp1);result = ((vsomeip_v3::message const *)arg1)->get_sec_client();
  jsresult = SWIG_NewPointerObj((new vsomeip_sec_client_t(result)), SWIGTYPE_p_vsomeip_sec_client_t, SWIG_POINTER_OWN |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_veto_ctor
template <typename SWIG_OBJ_WRAP>
_exports_message_templ<SWIG_OBJ_WRAP>::_exports_message_templ(const Napi::CallbackInfo &info)
:_exports_message_base_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS as its
    // base abstract class
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  SWIG_Error(SWIG_ERROR, "Class message can not be instantiated");
  return;
  goto fail;
fail:
  return;
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_message_templ<SWIG_OBJ_WRAP>::_exports_message_templ(bool, const Napi::CallbackInfo &info)
:_exports_message_base_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_payload_templ<SWIG_OBJ_WRAP>::~_exports_payload_templ() {
  auto arg1 = reinterpret_cast<vsomeip_v3::payload *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_payload_templ<SWIG_OBJ_WRAP>::_wrap_payload_get_data__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::payload *arg1 = (vsomeip_v3::payload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::byte_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__payload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "payload_get_data" "', argument " "1"" of type '" "vsomeip_v3::payload *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::payload * >(argp1);result = (vsomeip_v3::byte_t *)(arg1)->get_data();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_payload_templ<SWIG_OBJ_WRAP>::_wrap_payload_get_data__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::payload *arg1 = (vsomeip_v3::payload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::byte_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__payload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "payload_get_data" "', argument " "1"" of type '" "vsomeip_v3::payload const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::payload * >(argp1);result = (vsomeip_v3::byte_t *)((vsomeip_v3::payload const *)arg1)->get_data();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_payload_templ<SWIG_OBJ_WRAP>::_wrap_payload__wrap_payload_get_data(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_payload_get_data__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_payload_get_data__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_payload_get_data__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_payload_get_data__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function get_data.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_payload_templ<SWIG_OBJ_WRAP>::_wrap_payload_set_data__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::payload *arg1 = (vsomeip_v3::payload *) 0 ;
  vsomeip_v3::byte_t *arg2 = (vsomeip_v3::byte_t *) 0 ;
  vsomeip_v3::length_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__payload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "payload_set_data" "', argument " "1"" of type '" "vsomeip_v3::payload *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::payload * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "payload_set_data" "', argument " "2"" of type '" "vsomeip_v3::byte_t const *""'"); 
  }
  arg2 = reinterpret_cast< vsomeip_v3::byte_t * >(argp2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "payload_set_data" "', argument " "3"" of type '" "vsomeip_v3::length_t""'");
  } 
  arg3 = static_cast< vsomeip_v3::length_t >(val3);(arg1)->set_data((vsomeip_v3::byte_t const *)arg2,arg3);
  jsresult = env.Undefined();
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_payload_templ<SWIG_OBJ_WRAP>::_wrap_payload_set_data__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::payload *arg1 = (vsomeip_v3::payload *) 0 ;
  std::vector< vsomeip_v3::byte_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__payload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "payload_set_data" "', argument " "1"" of type '" "vsomeip_v3::payload *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::payload * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__vectorT_unsigned_char_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "payload_set_data" "', argument " "2"" of type '" "std::vector< vsomeip_v3::byte_t > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "payload_set_data" "', argument " "2"" of type '" "std::vector< vsomeip_v3::byte_t > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< vsomeip_v3::byte_t > * >(argp2);(arg1)->set_data((std::vector< vsomeip_v3::byte_t > const &)*arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_payload_templ<SWIG_OBJ_WRAP>::_wrap_payload_get_length(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::payload *arg1 = (vsomeip_v3::payload *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::length_t result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_payload_get_length.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__payload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "payload_get_length" "', argument " "1"" of type '" "vsomeip_v3::payload const *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::payload * >(argp1);result = (vsomeip_v3::length_t)((vsomeip_v3::payload const *)arg1)->get_length();
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_payload_templ<SWIG_OBJ_WRAP>::_wrap_payload_set_capacity(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::payload *arg1 = (vsomeip_v3::payload *) 0 ;
  vsomeip_v3::length_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_payload_set_capacity.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__payload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "payload_set_capacity" "', argument " "1"" of type '" "vsomeip_v3::payload *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::payload * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "payload_set_capacity" "', argument " "2"" of type '" "vsomeip_v3::length_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::length_t >(val2);(arg1)->set_capacity(arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_payload_templ<SWIG_OBJ_WRAP>::_wrap_payload_set_data__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::payload *arg1 = (vsomeip_v3::payload *) 0 ;
  std::vector< vsomeip_v3::byte_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::unique_ptr< std::vector< vsomeip_v3::byte_t > > rvrdeleter2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__payload, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "payload_set_data" "', argument " "1"" of type '" "vsomeip_v3::payload *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::payload * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_std__vectorT_unsigned_char_t, SWIG_POINTER_RELEASE |  0 );
  if (!SWIG_IsOK(res2)) {
    if (res2 == SWIG_ERROR_RELEASE_NOT_OWNED) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "payload_set_data" "', cannot release ownership as memory is not owned for argument " "2"" of type '" "std::vector< vsomeip_v3::byte_t > &&""'");
    } else {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "payload_set_data" "', argument " "2"" of type '" "std::vector< vsomeip_v3::byte_t > &&""'"); 
    }
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "payload_set_data" "', argument " "2"" of type '" "std::vector< vsomeip_v3::byte_t > &&""'"); 
  }
  arg2 = reinterpret_cast< std::vector< vsomeip_v3::byte_t > * >(argp2);
  rvrdeleter2.reset(arg2);(arg1)->set_data((std::vector< vsomeip_v3::byte_t > &&)*arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_payload_templ<SWIG_OBJ_WRAP>::_wrap_payload__wrap_payload_set_data(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_payload_set_data__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_payload_set_data__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_payload_set_data__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_payload_set_data__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_payload_set_data__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_payload_set_data__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function set_data.");
  
  goto fail;
fail:
  return Napi::Value();
}


// js_veto_ctor
template <typename SWIG_OBJ_WRAP>
_exports_payload_templ<SWIG_OBJ_WRAP>::_exports_payload_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS as its
    // base abstract class
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  SWIG_Error(SWIG_ERROR, "Class payload can not be instantiated");
  return;
  goto fail;
fail:
  return;
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_payload_templ<SWIG_OBJ_WRAP>::_exports_payload_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ip_address_t_templ<SWIG_OBJ_WRAP>::_wrap_ip_address_t_is_v4__set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::ip_address_t *arg1 = (vsomeip_v3::ip_address_t *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__ip_address_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ip_address_t_is_v4__set" "', argument " "1"" of type '" "vsomeip_v3::ip_address_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::ip_address_t * >(argp1);ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ip_address_t_is_v4__set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);if (arg1) (arg1)->is_v4_ = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ip_address_t_templ<SWIG_OBJ_WRAP>::_wrap_ip_address_t_is_v4__get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::ip_address_t *arg1 = (vsomeip_v3::ip_address_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__ip_address_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ip_address_t_is_v4__get" "', argument " "1"" of type '" "vsomeip_v3::ip_address_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::ip_address_t * >(argp1);result = (bool) ((arg1)->is_v4_);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ip_address_t_templ<SWIG_OBJ_WRAP>::_exports_ip_address_t_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_vsomeip_v3__ip_address_t;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  vsomeip_v3::ip_address_t *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ip_address_t.");
  }
  result = (vsomeip_v3::ip_address_t *)new vsomeip_v3::ip_address_t();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ip_address_t_templ<SWIG_OBJ_WRAP>::_exports_ip_address_t_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ip_address_t_templ<SWIG_OBJ_WRAP>::~_exports_ip_address_t_templ() {
  auto arg1 = reinterpret_cast<vsomeip_v3::ip_address_t *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_remote_info_t_templ<SWIG_OBJ_WRAP>::_wrap_remote_info_t_ip__set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::remote_info_t *arg1 = (vsomeip_v3::remote_info_t *) 0 ;
  vsomeip_v3::ip_address_t *arg2 = (vsomeip_v3::ip_address_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__remote_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "remote_info_t_ip__set" "', argument " "1"" of type '" "vsomeip_v3::remote_info_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::remote_info_t * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_vsomeip_v3__ip_address_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "remote_info_t_ip__set" "', argument " "2"" of type '" "vsomeip_v3::ip_address_t *""'"); 
  }
  arg2 = reinterpret_cast< vsomeip_v3::ip_address_t * >(argp2);if (arg1) (arg1)->ip_ = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_remote_info_t_templ<SWIG_OBJ_WRAP>::_wrap_remote_info_t_ip__get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::remote_info_t *arg1 = (vsomeip_v3::remote_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::ip_address_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__remote_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "remote_info_t_ip__get" "', argument " "1"" of type '" "vsomeip_v3::remote_info_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::remote_info_t * >(argp1);result = (vsomeip_v3::ip_address_t *)& ((arg1)->ip_);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vsomeip_v3__ip_address_t, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_remote_info_t_templ<SWIG_OBJ_WRAP>::_wrap_remote_info_t_first__set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::remote_info_t *arg1 = (vsomeip_v3::remote_info_t *) 0 ;
  std::uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__remote_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "remote_info_t_first__set" "', argument " "1"" of type '" "vsomeip_v3::remote_info_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::remote_info_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "remote_info_t_first__set" "', argument " "2"" of type '" "std::uint16_t""'");
  } 
  arg2 = static_cast< std::uint16_t >(val2);if (arg1) (arg1)->first_ = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_remote_info_t_templ<SWIG_OBJ_WRAP>::_wrap_remote_info_t_first__get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::remote_info_t *arg1 = (vsomeip_v3::remote_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__remote_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "remote_info_t_first__get" "', argument " "1"" of type '" "vsomeip_v3::remote_info_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::remote_info_t * >(argp1);result = (std::uint16_t) ((arg1)->first_);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_remote_info_t_templ<SWIG_OBJ_WRAP>::_wrap_remote_info_t_last__set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::remote_info_t *arg1 = (vsomeip_v3::remote_info_t *) 0 ;
  std::uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__remote_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "remote_info_t_last__set" "', argument " "1"" of type '" "vsomeip_v3::remote_info_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::remote_info_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "remote_info_t_last__set" "', argument " "2"" of type '" "std::uint16_t""'");
  } 
  arg2 = static_cast< std::uint16_t >(val2);if (arg1) (arg1)->last_ = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_remote_info_t_templ<SWIG_OBJ_WRAP>::_wrap_remote_info_t_last__get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::remote_info_t *arg1 = (vsomeip_v3::remote_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__remote_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "remote_info_t_last__get" "', argument " "1"" of type '" "vsomeip_v3::remote_info_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::remote_info_t * >(argp1);result = (std::uint16_t) ((arg1)->last_);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_remote_info_t_templ<SWIG_OBJ_WRAP>::_wrap_remote_info_t_is_range__set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::remote_info_t *arg1 = (vsomeip_v3::remote_info_t *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__remote_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "remote_info_t_is_range__set" "', argument " "1"" of type '" "vsomeip_v3::remote_info_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::remote_info_t * >(argp1);ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "remote_info_t_is_range__set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);if (arg1) (arg1)->is_range_ = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_remote_info_t_templ<SWIG_OBJ_WRAP>::_wrap_remote_info_t_is_range__get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::remote_info_t *arg1 = (vsomeip_v3::remote_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__remote_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "remote_info_t_is_range__get" "', argument " "1"" of type '" "vsomeip_v3::remote_info_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::remote_info_t * >(argp1);result = (bool) ((arg1)->is_range_);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_remote_info_t_templ<SWIG_OBJ_WRAP>::_wrap_remote_info_t_is_reliable__set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::remote_info_t *arg1 = (vsomeip_v3::remote_info_t *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__remote_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "remote_info_t_is_reliable__set" "', argument " "1"" of type '" "vsomeip_v3::remote_info_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::remote_info_t * >(argp1);ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "remote_info_t_is_reliable__set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);if (arg1) (arg1)->is_reliable_ = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_remote_info_t_templ<SWIG_OBJ_WRAP>::_wrap_remote_info_t_is_reliable__get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::remote_info_t *arg1 = (vsomeip_v3::remote_info_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__remote_info_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "remote_info_t_is_reliable__get" "', argument " "1"" of type '" "vsomeip_v3::remote_info_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::remote_info_t * >(argp1);result = (bool) ((arg1)->is_reliable_);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_remote_info_t_templ<SWIG_OBJ_WRAP>::_exports_remote_info_t_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_vsomeip_v3__remote_info_t;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  vsomeip_v3::remote_info_t *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_remote_info_t.");
  }
  result = (vsomeip_v3::remote_info_t *)new vsomeip_v3::remote_info_t();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_remote_info_t_templ<SWIG_OBJ_WRAP>::_exports_remote_info_t_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_remote_info_t_templ<SWIG_OBJ_WRAP>::~_exports_remote_info_t_templ() {
  auto arg1 = reinterpret_cast<vsomeip_v3::remote_info_t *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_message_acceptance_t_templ<SWIG_OBJ_WRAP>::_wrap_message_acceptance_t_remote_address__set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_acceptance_t *arg1 = (vsomeip_v3::message_acceptance_t *) 0 ;
  std::uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_acceptance_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_acceptance_t_remote_address__set" "', argument " "1"" of type '" "vsomeip_v3::message_acceptance_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_acceptance_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_acceptance_t_remote_address__set" "', argument " "2"" of type '" "std::uint32_t""'");
  } 
  arg2 = static_cast< std::uint32_t >(val2);if (arg1) (arg1)->remote_address_ = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_acceptance_t_templ<SWIG_OBJ_WRAP>::_wrap_message_acceptance_t_remote_address__get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_acceptance_t *arg1 = (vsomeip_v3::message_acceptance_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_acceptance_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_acceptance_t_remote_address__get" "', argument " "1"" of type '" "vsomeip_v3::message_acceptance_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_acceptance_t * >(argp1);result = (std::uint32_t) ((arg1)->remote_address_);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_message_acceptance_t_templ<SWIG_OBJ_WRAP>::_wrap_message_acceptance_t_local_port__set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_acceptance_t *arg1 = (vsomeip_v3::message_acceptance_t *) 0 ;
  std::uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_acceptance_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_acceptance_t_local_port__set" "', argument " "1"" of type '" "vsomeip_v3::message_acceptance_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_acceptance_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_acceptance_t_local_port__set" "', argument " "2"" of type '" "std::uint16_t""'");
  } 
  arg2 = static_cast< std::uint16_t >(val2);if (arg1) (arg1)->local_port_ = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_acceptance_t_templ<SWIG_OBJ_WRAP>::_wrap_message_acceptance_t_local_port__get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_acceptance_t *arg1 = (vsomeip_v3::message_acceptance_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_acceptance_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_acceptance_t_local_port__get" "', argument " "1"" of type '" "vsomeip_v3::message_acceptance_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_acceptance_t * >(argp1);result = (std::uint16_t) ((arg1)->local_port_);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_message_acceptance_t_templ<SWIG_OBJ_WRAP>::_wrap_message_acceptance_t_is_local__set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_acceptance_t *arg1 = (vsomeip_v3::message_acceptance_t *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_acceptance_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_acceptance_t_is_local__set" "', argument " "1"" of type '" "vsomeip_v3::message_acceptance_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_acceptance_t * >(argp1);ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_acceptance_t_is_local__set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);if (arg1) (arg1)->is_local_ = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_acceptance_t_templ<SWIG_OBJ_WRAP>::_wrap_message_acceptance_t_is_local__get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_acceptance_t *arg1 = (vsomeip_v3::message_acceptance_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_acceptance_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_acceptance_t_is_local__get" "', argument " "1"" of type '" "vsomeip_v3::message_acceptance_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_acceptance_t * >(argp1);result = (bool) ((arg1)->is_local_);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_message_acceptance_t_templ<SWIG_OBJ_WRAP>::_wrap_message_acceptance_t_service__set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_acceptance_t *arg1 = (vsomeip_v3::message_acceptance_t *) 0 ;
  vsomeip_v3::service_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_acceptance_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_acceptance_t_service__set" "', argument " "1"" of type '" "vsomeip_v3::message_acceptance_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_acceptance_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_acceptance_t_service__set" "', argument " "2"" of type '" "vsomeip_v3::service_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::service_t >(val2);if (arg1) (arg1)->service_ = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_acceptance_t_templ<SWIG_OBJ_WRAP>::_wrap_message_acceptance_t_service__get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_acceptance_t *arg1 = (vsomeip_v3::message_acceptance_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::service_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_acceptance_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_acceptance_t_service__get" "', argument " "1"" of type '" "vsomeip_v3::message_acceptance_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_acceptance_t * >(argp1);result = (vsomeip_v3::service_t) ((arg1)->service_);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_message_acceptance_t_templ<SWIG_OBJ_WRAP>::_wrap_message_acceptance_t_instance__set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_acceptance_t *arg1 = (vsomeip_v3::message_acceptance_t *) 0 ;
  vsomeip_v3::instance_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_acceptance_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_acceptance_t_instance__set" "', argument " "1"" of type '" "vsomeip_v3::message_acceptance_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_acceptance_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_acceptance_t_instance__set" "', argument " "2"" of type '" "vsomeip_v3::instance_t""'");
  } 
  arg2 = static_cast< vsomeip_v3::instance_t >(val2);if (arg1) (arg1)->instance_ = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_message_acceptance_t_templ<SWIG_OBJ_WRAP>::_wrap_message_acceptance_t_instance__get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  vsomeip_v3::message_acceptance_t *arg1 = (vsomeip_v3::message_acceptance_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vsomeip_v3::instance_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_vsomeip_v3__message_acceptance_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_acceptance_t_instance__get" "', argument " "1"" of type '" "vsomeip_v3::message_acceptance_t *""'"); 
  }
  arg1 = reinterpret_cast< vsomeip_v3::message_acceptance_t * >(argp1);result = (vsomeip_v3::instance_t) ((arg1)->instance_);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_message_acceptance_t_templ<SWIG_OBJ_WRAP>::_exports_message_acceptance_t_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_vsomeip_v3__message_acceptance_t;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  vsomeip_v3::message_acceptance_t *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_message_acceptance_t.");
  }
  result = (vsomeip_v3::message_acceptance_t *)new vsomeip_v3::message_acceptance_t();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_message_acceptance_t_templ<SWIG_OBJ_WRAP>::_exports_message_acceptance_t_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_message_acceptance_t_templ<SWIG_OBJ_WRAP>::~_exports_message_acceptance_t_templ() {
  auto arg1 = reinterpret_cast<vsomeip_v3::message_acceptance_t *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_global_function
Napi::Value _wrap_LoadDll(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_LoadDll.");
  }
  
  res1 = SWIG_AsCharPtrAndSize(info[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoadDll" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);LoadDll((char const *)arg1);
  jsresult = env.Undefined();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_vsomeip_v3__messageTo_p_vsomeip_v3__message_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vsomeip_v3::message_base *)  ((vsomeip_v3::message *) x));
}
static swig_type_info _swigt__p___int64 = {"_p___int64", "LONG64 *|LONGLONG *|__int64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_available_t = {"_p_available_t", "available_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "CCHAR *|CHAR *|TCHAR *|char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "FLOAT *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "BOOL *|INT *|INT32 *|INT_PTR *|LONG32 *|int32_t *|int_fast16_t *|int_fast32_t *|int_least32_t *|intptr_t *|int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "HRESULT *|LONG *|LONG_PTR *|SHANDLE_PTR *|SSIZE_T *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64_t *|int_fast64_t *|int_least64_t *|intmax_t *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "LPCTSTR *|LPCUTSTR *|LPTCH *|LPTSTR *|LPUTSTR *|PCTSTR *|PCUTSTR *|PTCH *|PTSTR *|PUTSTR *|char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_unsigned_long = {"_p_p_unsigned_long", "PLCID *|unsigned long **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sd_acceptance_map_type_t = {"_p_sd_acceptance_map_type_t", "sd_acceptance_map_type_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "HALF_PTR *|INT16 *|SHORT *|int16_t *|int_least16_t *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed___int64 = {"_p_signed___int64", "INT64 *|signed __int64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "INT8 *|int8_t *|int_fast8_t *|int_least8_t *|signed char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__arrayT_unsigned_char_16_t = {"_p_std__arrayT_unsigned_char_16_t", "vsomeip_v3::ipv6_address_t *|std::array< unsigned char,16 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__arrayT_unsigned_char_4_t = {"_p_std__arrayT_unsigned_char_4_t", "vsomeip_v3::ipv4_address_t *|std::array< unsigned char,4 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__chrono__milliseconds = {"_p_std__chrono__milliseconds", "std::chrono::milliseconds *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__chrono__seconds = {"_p_std__chrono__seconds", "std::chrono::seconds *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_bool_fmessage_acceptance_t_const_RF_t = {"_p_std__functionT_bool_fmessage_acceptance_t_const_RF_t", "vsomeip_v3::message_acceptance_handler_t *|std::function< bool (message_acceptance_t const &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_bool_fremote_info_t_const_RF_t = {"_p_std__functionT_bool_fremote_info_t_const_RF_t", "vsomeip_v3::sd_acceptance_handler_t *|std::function< bool (remote_info_t const &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_bool_fstd__shared_ptrT_payload_t_const_R_std__shared_ptrT_payload_t_const_RF_t = {"_p_std__functionT_bool_fstd__shared_ptrT_payload_t_const_R_std__shared_ptrT_payload_t_const_RF_t", "vsomeip_v3::epsilon_change_func_t *|std::function< bool (std::shared_ptr< payload > const &,std::shared_ptr< payload > const &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_bool_funsigned_short___uid_t___uid_t_boolF_t = {"_p_std__functionT_bool_funsigned_short___uid_t___uid_t_boolF_t", "vsomeip_v3::subscription_handler_t *|std::function< bool (unsigned short,::uid_t,::uid_t,bool) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_bool_funsigned_short___uid_t___uid_t_std__string_const_R_boolF_t = {"_p_std__functionT_bool_funsigned_short___uid_t___uid_t_std__string_const_R_boolF_t", "vsomeip_v3::subscription_handler_ext_t *|std::function< bool (unsigned short,::uid_t,::uid_t,std::string const &,bool) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_bool_funsigned_short_vsomeip_sec_client_t_const_p_std__string_const_R_boolF_t = {"_p_std__functionT_bool_funsigned_short_vsomeip_sec_client_t_const_p_std__string_const_R_boolF_t", "vsomeip_v3::subscription_handler_sec_t *|std::function< bool (unsigned short,vsomeip_sec_client_t const *,std::string const &,bool) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fF_t = {"_p_std__functionT_void_fF_t", "vsomeip_v3::routing_ready_handler_t *|vsomeip_v3::watchdog_handler_t *|std::function< void () > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fip_address_t_const_RF_t = {"_p_std__functionT_void_fip_address_t_const_RF_t", "vsomeip_v3::reboot_notification_handler_t *|std::function< void (ip_address_t const &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fstd__shared_ptrT_message_t_const_RF_t = {"_p_std__functionT_void_fstd__shared_ptrT_message_t_const_RF_t", "vsomeip_v3::message_handler_t *|std::function< void (std::shared_ptr< message > const &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fstd__vectorT_std__pairT_unsigned_short_unsigned_short_t_t_const_RF_t = {"_p_std__functionT_void_fstd__vectorT_std__pairT_unsigned_short_unsigned_short_t_t_const_RF_t", "vsomeip_v3::offered_services_handler_t *|std::function< void (std::vector< std::pair< unsigned short,unsigned short > > const &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_funsigned_short___uid_t___uid_t_bool_std__functionT_void_fbool_constF_tF_t = {"_p_std__functionT_void_funsigned_short___uid_t___uid_t_bool_std__functionT_void_fbool_constF_tF_t", "vsomeip_v3::async_subscription_handler_t *|std::function< void (unsigned short,::uid_t,::uid_t,bool,std::function< void (bool const) >) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_funsigned_short___uid_t___uid_t_std__string_const_R_bool_std__functionT_void_fbool_constF_tF_t = {"_p_std__functionT_void_funsigned_short___uid_t___uid_t_std__string_const_R_bool_std__functionT_void_fbool_constF_tF_t", "vsomeip_v3::async_subscription_handler_ext_t *|std::function< void (unsigned short,::uid_t,::uid_t,std::string const &,bool,std::function< void (bool const) >) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_funsigned_short_constF_t = {"_p_std__functionT_void_funsigned_short_constF_t", "vsomeip_v3::error_handler_t *|std::function< void (unsigned short const) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_funsigned_short_const_unsigned_short_const_unsigned_short_const_unsigned_short_const_unsigned_short_constF_t = {"_p_std__functionT_void_funsigned_short_const_unsigned_short_const_unsigned_short_const_unsigned_short_const_unsigned_short_constF_t", "vsomeip_v3::subscription_status_handler_t *|std::function< void (unsigned short const,unsigned short const,unsigned short const,unsigned short const,unsigned short const) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_funsigned_short_unsigned_short_boolF_t = {"_p_std__functionT_void_funsigned_short_unsigned_short_boolF_t", "vsomeip_v3::availability_handler_t *|std::function< void (unsigned short,unsigned short,bool) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_funsigned_short_unsigned_short_vsomeip_v3__availability_state_eF_t = {"_p_std__functionT_void_funsigned_short_unsigned_short_vsomeip_v3__availability_state_eF_t", "vsomeip_v3::availability_state_handler_t *|std::function< void (unsigned short,unsigned short,enum vsomeip_v3::availability_state_e) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_funsigned_short_vsomeip_sec_client_t_const_p_std__string_const_R_bool_std__functionT_void_fboolF_tF_t = {"_p_std__functionT_void_funsigned_short_vsomeip_sec_client_t_const_p_std__string_const_R_bool_std__functionT_void_fboolF_tF_t", "vsomeip_v3::async_subscription_handler_sec_t *|std::function< void (unsigned short,vsomeip_sec_client_t const *,std::string const &,bool,std::function< void (bool) >) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fvsomeip_v3__routing_state_eF_t = {"_p_std__functionT_void_fvsomeip_v3__routing_state_eF_t", "vsomeip_v3::routing_state_handler_t *|std::function< void (enum vsomeip_v3::routing_state_e) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fvsomeip_v3__security_update_state_eF_t = {"_p_std__functionT_void_fvsomeip_v3__security_update_state_eF_t", "vsomeip_v3::security_update_handler_t *|std::function< void (enum vsomeip_v3::security_update_state_e) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fvsomeip_v3__state_type_eF_t = {"_p_std__functionT_void_fvsomeip_v3__state_type_eF_t", "vsomeip_v3::state_handler_t *|std::function< void (enum vsomeip_v3::state_type_e) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__size_t_unsigned_char_t = {"_p_std__mapT_std__size_t_unsigned_char_t", "std::map< std::size_t,vsomeip_v3::byte_t > *|std::map< std::size_t,unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_t = {"_p_std__mapT_std__string_std__string_t", "std::map< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_unsigned_short_std__mapT_unsigned_short_std__mapT_unsigned_char_unsigned_int_t_t_t = {"_p_std__mapT_unsigned_short_std__mapT_unsigned_short_std__mapT_unsigned_char_unsigned_int_t_t_t", "vsomeip_v3::application::available_t *|std::map< unsigned short,std::map< unsigned short,std::map< unsigned char,unsigned int > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_vsomeip_v3__remote_info_t_std__string_t = {"_p_std__mapT_vsomeip_v3__remote_info_t_std__string_t", "vsomeip_v3::application::sd_acceptance_map_type_t *|std::map< vsomeip_v3::remote_info_t,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_unsigned_short_t = {"_p_std__setT_unsigned_short_t", "std::set< vsomeip_v3::eventgroup_t > *|std::set< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_vsomeip_v3__application_t = {"_p_std__shared_ptrT_vsomeip_v3__application_t", "std::shared_ptr< vsomeip_v3::application > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_vsomeip_v3__configuration_t = {"_p_std__shared_ptrT_vsomeip_v3__configuration_t", "std::shared_ptr< vsomeip_v3::configuration > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_vsomeip_v3__message_t = {"_p_std__shared_ptrT_vsomeip_v3__message_t", "std::shared_ptr< vsomeip_v3::message > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_vsomeip_v3__payload_t = {"_p_std__shared_ptrT_vsomeip_v3__payload_t", "std::shared_ptr< vsomeip_v3::payload > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_vsomeip_v3__policy_manager_t = {"_p_std__shared_ptrT_vsomeip_v3__policy_manager_t", "std::shared_ptr< vsomeip_v3::policy_manager > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_vsomeip_v3__policy_t = {"_p_std__shared_ptrT_vsomeip_v3__policy_t", "std::shared_ptr< vsomeip_v3::policy > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_vsomeip_v3__runtime_t = {"_p_std__shared_ptrT_vsomeip_v3__runtime_t", "std::shared_ptr< vsomeip_v3::runtime > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "vsomeip_v3::trace_channel_t *|vsomeip_v3::trace_filter_type_t *|std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_char_t = {"_p_std__vectorT_unsigned_char_t", "std::vector< vsomeip_v3::byte_t > *|std::vector< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uid_t = {"_p_uid_t", "vsomeip_v3::gid_t *|vsomeip_v3::uid_t *|::uid_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned___int64 = {"_p_unsigned___int64", "DWORD64 *|DWORDLONG *|UINT64 *|ULONG64 *|ULONGLONG *|unsigned __int64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "BOOLEAN *|BYTE *|FCHAR *|TBYTE *|UCHAR *|UINT8 *|uint8_t *|uint_fast8_t *|uint_least8_t *|vsomeip_v3::byte_t *|vsomeip_v3::interface_version_t *|vsomeip_v3::major_version_t *|vsomeip_v3::protocol_version_t *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "DWORD32 *|UINT *|UINT32 *|UINT_PTR *|ULONG32 *|uint32_t *|uint_fast16_t *|uint_fast32_t *|uint_least32_t *|uintptr_t *|vsomeip_v3::length_t *|vsomeip_v3::message_t *|vsomeip_v3::minor_version_t *|vsomeip_v3::pending_remote_offer_id_t *|vsomeip_v3::pending_security_update_id_t *|vsomeip_v3::request_t *|vsomeip_v3::ttl_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "DWORD *|DWORD_PTR *|FLONG *|HANDLE_PTR *|LCID *|SIZE_T *|ULONG *|ULONG_PTR *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint64_t *|uint_fast64_t *|uint_least64_t *|uintmax_t *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "FSHORT *|LANGID *|UHALF_PTR *|UINT16 *|USHORT *|WORD *|uint16_t *|uint_least16_t *|vsomeip_v3::client_t *|vsomeip_v3::diagnosis_t *|vsomeip_v3::event_t *|vsomeip_v3::eventgroup_t *|vsomeip_v3::instance_t *|vsomeip_v3::method_t *|vsomeip_v3::port_t *|vsomeip_v3::service_t *|vsomeip_v3::session_t *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vsomeip_sec_client_t = {"_p_vsomeip_sec_client_t", "vsomeip_sec_client_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vsomeip_v3__application = {"_p_vsomeip_v3__application", "vsomeip_v3::application *|p_vsomeip_v3__application", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vsomeip_v3__debounce_filter_t = {"_p_vsomeip_v3__debounce_filter_t", "vsomeip_v3::debounce_filter_t *|p_vsomeip_v3__debounce_filter_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vsomeip_v3__ip_address_t = {"_p_vsomeip_v3__ip_address_t", "p_vsomeip_v3__ip_address_t|vsomeip_v3::ip_address_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vsomeip_v3__message = {"_p_vsomeip_v3__message", "p_vsomeip_v3__message|vsomeip_v3::message *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vsomeip_v3__message_acceptance_t = {"_p_vsomeip_v3__message_acceptance_t", "p_vsomeip_v3__message_acceptance_t|vsomeip_v3::message_acceptance_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vsomeip_v3__message_base = {"_p_vsomeip_v3__message_base", "p_vsomeip_v3__message_base|vsomeip_v3::message_base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vsomeip_v3__payload = {"_p_vsomeip_v3__payload", "p_vsomeip_v3__payload|vsomeip_v3::payload *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vsomeip_v3__remote_info_t = {"_p_vsomeip_v3__remote_info_t", "p_vsomeip_v3__remote_info_t|vsomeip_v3::remote_info_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vsomeip_v3__runtime = {"_p_vsomeip_v3__runtime", "p_vsomeip_v3__runtime|vsomeip_v3::runtime *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p___int64,
  &_swigt__p_available_t,
  &_swigt__p_char,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_p_char,
  &_swigt__p_p_unsigned_long,
  &_swigt__p_sd_acceptance_map_type_t,
  &_swigt__p_short,
  &_swigt__p_signed___int64,
  &_swigt__p_signed_char,
  &_swigt__p_std__arrayT_unsigned_char_16_t,
  &_swigt__p_std__arrayT_unsigned_char_4_t,
  &_swigt__p_std__chrono__milliseconds,
  &_swigt__p_std__chrono__seconds,
  &_swigt__p_std__functionT_bool_fmessage_acceptance_t_const_RF_t,
  &_swigt__p_std__functionT_bool_fremote_info_t_const_RF_t,
  &_swigt__p_std__functionT_bool_fstd__shared_ptrT_payload_t_const_R_std__shared_ptrT_payload_t_const_RF_t,
  &_swigt__p_std__functionT_bool_funsigned_short___uid_t___uid_t_boolF_t,
  &_swigt__p_std__functionT_bool_funsigned_short___uid_t___uid_t_std__string_const_R_boolF_t,
  &_swigt__p_std__functionT_bool_funsigned_short_vsomeip_sec_client_t_const_p_std__string_const_R_boolF_t,
  &_swigt__p_std__functionT_void_fF_t,
  &_swigt__p_std__functionT_void_fip_address_t_const_RF_t,
  &_swigt__p_std__functionT_void_fstd__shared_ptrT_message_t_const_RF_t,
  &_swigt__p_std__functionT_void_fstd__vectorT_std__pairT_unsigned_short_unsigned_short_t_t_const_RF_t,
  &_swigt__p_std__functionT_void_funsigned_short___uid_t___uid_t_bool_std__functionT_void_fbool_constF_tF_t,
  &_swigt__p_std__functionT_void_funsigned_short___uid_t___uid_t_std__string_const_R_bool_std__functionT_void_fbool_constF_tF_t,
  &_swigt__p_std__functionT_void_funsigned_short_constF_t,
  &_swigt__p_std__functionT_void_funsigned_short_const_unsigned_short_const_unsigned_short_const_unsigned_short_const_unsigned_short_constF_t,
  &_swigt__p_std__functionT_void_funsigned_short_unsigned_short_boolF_t,
  &_swigt__p_std__functionT_void_funsigned_short_unsigned_short_vsomeip_v3__availability_state_eF_t,
  &_swigt__p_std__functionT_void_funsigned_short_vsomeip_sec_client_t_const_p_std__string_const_R_bool_std__functionT_void_fboolF_tF_t,
  &_swigt__p_std__functionT_void_fvsomeip_v3__routing_state_eF_t,
  &_swigt__p_std__functionT_void_fvsomeip_v3__security_update_state_eF_t,
  &_swigt__p_std__functionT_void_fvsomeip_v3__state_type_eF_t,
  &_swigt__p_std__mapT_std__size_t_unsigned_char_t,
  &_swigt__p_std__mapT_std__string_std__string_t,
  &_swigt__p_std__mapT_unsigned_short_std__mapT_unsigned_short_std__mapT_unsigned_char_unsigned_int_t_t_t,
  &_swigt__p_std__mapT_vsomeip_v3__remote_info_t_std__string_t,
  &_swigt__p_std__setT_unsigned_short_t,
  &_swigt__p_std__shared_ptrT_vsomeip_v3__application_t,
  &_swigt__p_std__shared_ptrT_vsomeip_v3__configuration_t,
  &_swigt__p_std__shared_ptrT_vsomeip_v3__message_t,
  &_swigt__p_std__shared_ptrT_vsomeip_v3__payload_t,
  &_swigt__p_std__shared_ptrT_vsomeip_v3__policy_manager_t,
  &_swigt__p_std__shared_ptrT_vsomeip_v3__policy_t,
  &_swigt__p_std__shared_ptrT_vsomeip_v3__runtime_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_unsigned_char_t,
  &_swigt__p_uid_t,
  &_swigt__p_unsigned___int64,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_vsomeip_sec_client_t,
  &_swigt__p_vsomeip_v3__application,
  &_swigt__p_vsomeip_v3__debounce_filter_t,
  &_swigt__p_vsomeip_v3__ip_address_t,
  &_swigt__p_vsomeip_v3__message,
  &_swigt__p_vsomeip_v3__message_acceptance_t,
  &_swigt__p_vsomeip_v3__message_base,
  &_swigt__p_vsomeip_v3__payload,
  &_swigt__p_vsomeip_v3__remote_info_t,
  &_swigt__p_vsomeip_v3__runtime,
};

static swig_cast_info _swigc__p___int64[] = {  {&_swigt__p___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_available_t[] = {  {&_swigt__p_available_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_unsigned_long[] = {  {&_swigt__p_p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sd_acceptance_map_type_t[] = {  {&_swigt__p_sd_acceptance_map_type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed___int64[] = {  {&_swigt__p_signed___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__arrayT_unsigned_char_16_t[] = {  {&_swigt__p_std__arrayT_unsigned_char_16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__arrayT_unsigned_char_4_t[] = {  {&_swigt__p_std__arrayT_unsigned_char_4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__chrono__milliseconds[] = {  {&_swigt__p_std__chrono__milliseconds, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__chrono__seconds[] = {  {&_swigt__p_std__chrono__seconds, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_bool_fmessage_acceptance_t_const_RF_t[] = {  {&_swigt__p_std__functionT_bool_fmessage_acceptance_t_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_bool_fremote_info_t_const_RF_t[] = {  {&_swigt__p_std__functionT_bool_fremote_info_t_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_bool_fstd__shared_ptrT_payload_t_const_R_std__shared_ptrT_payload_t_const_RF_t[] = {  {&_swigt__p_std__functionT_bool_fstd__shared_ptrT_payload_t_const_R_std__shared_ptrT_payload_t_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_bool_funsigned_short___uid_t___uid_t_boolF_t[] = {  {&_swigt__p_std__functionT_bool_funsigned_short___uid_t___uid_t_boolF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_bool_funsigned_short___uid_t___uid_t_std__string_const_R_boolF_t[] = {  {&_swigt__p_std__functionT_bool_funsigned_short___uid_t___uid_t_std__string_const_R_boolF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_bool_funsigned_short_vsomeip_sec_client_t_const_p_std__string_const_R_boolF_t[] = {  {&_swigt__p_std__functionT_bool_funsigned_short_vsomeip_sec_client_t_const_p_std__string_const_R_boolF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fF_t[] = {  {&_swigt__p_std__functionT_void_fF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fip_address_t_const_RF_t[] = {  {&_swigt__p_std__functionT_void_fip_address_t_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fstd__shared_ptrT_message_t_const_RF_t[] = {  {&_swigt__p_std__functionT_void_fstd__shared_ptrT_message_t_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fstd__vectorT_std__pairT_unsigned_short_unsigned_short_t_t_const_RF_t[] = {  {&_swigt__p_std__functionT_void_fstd__vectorT_std__pairT_unsigned_short_unsigned_short_t_t_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_funsigned_short___uid_t___uid_t_bool_std__functionT_void_fbool_constF_tF_t[] = {  {&_swigt__p_std__functionT_void_funsigned_short___uid_t___uid_t_bool_std__functionT_void_fbool_constF_tF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_funsigned_short___uid_t___uid_t_std__string_const_R_bool_std__functionT_void_fbool_constF_tF_t[] = {  {&_swigt__p_std__functionT_void_funsigned_short___uid_t___uid_t_std__string_const_R_bool_std__functionT_void_fbool_constF_tF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_funsigned_short_constF_t[] = {  {&_swigt__p_std__functionT_void_funsigned_short_constF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_funsigned_short_const_unsigned_short_const_unsigned_short_const_unsigned_short_const_unsigned_short_constF_t[] = {  {&_swigt__p_std__functionT_void_funsigned_short_const_unsigned_short_const_unsigned_short_const_unsigned_short_const_unsigned_short_constF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_funsigned_short_unsigned_short_boolF_t[] = {  {&_swigt__p_std__functionT_void_funsigned_short_unsigned_short_boolF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_funsigned_short_unsigned_short_vsomeip_v3__availability_state_eF_t[] = {  {&_swigt__p_std__functionT_void_funsigned_short_unsigned_short_vsomeip_v3__availability_state_eF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_funsigned_short_vsomeip_sec_client_t_const_p_std__string_const_R_bool_std__functionT_void_fboolF_tF_t[] = {  {&_swigt__p_std__functionT_void_funsigned_short_vsomeip_sec_client_t_const_p_std__string_const_R_bool_std__functionT_void_fboolF_tF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fvsomeip_v3__routing_state_eF_t[] = {  {&_swigt__p_std__functionT_void_fvsomeip_v3__routing_state_eF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fvsomeip_v3__security_update_state_eF_t[] = {  {&_swigt__p_std__functionT_void_fvsomeip_v3__security_update_state_eF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fvsomeip_v3__state_type_eF_t[] = {  {&_swigt__p_std__functionT_void_fvsomeip_v3__state_type_eF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__size_t_unsigned_char_t[] = {  {&_swigt__p_std__mapT_std__size_t_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_t[] = {  {&_swigt__p_std__mapT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_unsigned_short_std__mapT_unsigned_short_std__mapT_unsigned_char_unsigned_int_t_t_t[] = {  {&_swigt__p_std__mapT_unsigned_short_std__mapT_unsigned_short_std__mapT_unsigned_char_unsigned_int_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_vsomeip_v3__remote_info_t_std__string_t[] = {  {&_swigt__p_std__mapT_vsomeip_v3__remote_info_t_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_unsigned_short_t[] = {  {&_swigt__p_std__setT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_vsomeip_v3__application_t[] = {  {&_swigt__p_std__shared_ptrT_vsomeip_v3__application_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_vsomeip_v3__configuration_t[] = {  {&_swigt__p_std__shared_ptrT_vsomeip_v3__configuration_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_vsomeip_v3__message_t[] = {  {&_swigt__p_std__shared_ptrT_vsomeip_v3__message_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_vsomeip_v3__payload_t[] = {  {&_swigt__p_std__shared_ptrT_vsomeip_v3__payload_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_vsomeip_v3__policy_manager_t[] = {  {&_swigt__p_std__shared_ptrT_vsomeip_v3__policy_manager_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_vsomeip_v3__policy_t[] = {  {&_swigt__p_std__shared_ptrT_vsomeip_v3__policy_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_vsomeip_v3__runtime_t[] = {  {&_swigt__p_std__shared_ptrT_vsomeip_v3__runtime_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_char_t[] = {  {&_swigt__p_std__vectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uid_t[] = {  {&_swigt__p_uid_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned___int64[] = {  {&_swigt__p_unsigned___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vsomeip_sec_client_t[] = {  {&_swigt__p_vsomeip_sec_client_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vsomeip_v3__application[] = {  {&_swigt__p_vsomeip_v3__application, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vsomeip_v3__debounce_filter_t[] = {  {&_swigt__p_vsomeip_v3__debounce_filter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vsomeip_v3__ip_address_t[] = {  {&_swigt__p_vsomeip_v3__ip_address_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vsomeip_v3__message[] = {  {&_swigt__p_vsomeip_v3__message, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vsomeip_v3__message_acceptance_t[] = {  {&_swigt__p_vsomeip_v3__message_acceptance_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vsomeip_v3__message_base[] = {  {&_swigt__p_vsomeip_v3__message_base, 0, 0, 0},  {&_swigt__p_vsomeip_v3__message, _p_vsomeip_v3__messageTo_p_vsomeip_v3__message_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vsomeip_v3__payload[] = {  {&_swigt__p_vsomeip_v3__payload, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vsomeip_v3__remote_info_t[] = {  {&_swigt__p_vsomeip_v3__remote_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vsomeip_v3__runtime[] = {  {&_swigt__p_vsomeip_v3__runtime, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p___int64,
  _swigc__p_available_t,
  _swigc__p_char,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_p_char,
  _swigc__p_p_unsigned_long,
  _swigc__p_sd_acceptance_map_type_t,
  _swigc__p_short,
  _swigc__p_signed___int64,
  _swigc__p_signed_char,
  _swigc__p_std__arrayT_unsigned_char_16_t,
  _swigc__p_std__arrayT_unsigned_char_4_t,
  _swigc__p_std__chrono__milliseconds,
  _swigc__p_std__chrono__seconds,
  _swigc__p_std__functionT_bool_fmessage_acceptance_t_const_RF_t,
  _swigc__p_std__functionT_bool_fremote_info_t_const_RF_t,
  _swigc__p_std__functionT_bool_fstd__shared_ptrT_payload_t_const_R_std__shared_ptrT_payload_t_const_RF_t,
  _swigc__p_std__functionT_bool_funsigned_short___uid_t___uid_t_boolF_t,
  _swigc__p_std__functionT_bool_funsigned_short___uid_t___uid_t_std__string_const_R_boolF_t,
  _swigc__p_std__functionT_bool_funsigned_short_vsomeip_sec_client_t_const_p_std__string_const_R_boolF_t,
  _swigc__p_std__functionT_void_fF_t,
  _swigc__p_std__functionT_void_fip_address_t_const_RF_t,
  _swigc__p_std__functionT_void_fstd__shared_ptrT_message_t_const_RF_t,
  _swigc__p_std__functionT_void_fstd__vectorT_std__pairT_unsigned_short_unsigned_short_t_t_const_RF_t,
  _swigc__p_std__functionT_void_funsigned_short___uid_t___uid_t_bool_std__functionT_void_fbool_constF_tF_t,
  _swigc__p_std__functionT_void_funsigned_short___uid_t___uid_t_std__string_const_R_bool_std__functionT_void_fbool_constF_tF_t,
  _swigc__p_std__functionT_void_funsigned_short_constF_t,
  _swigc__p_std__functionT_void_funsigned_short_const_unsigned_short_const_unsigned_short_const_unsigned_short_const_unsigned_short_constF_t,
  _swigc__p_std__functionT_void_funsigned_short_unsigned_short_boolF_t,
  _swigc__p_std__functionT_void_funsigned_short_unsigned_short_vsomeip_v3__availability_state_eF_t,
  _swigc__p_std__functionT_void_funsigned_short_vsomeip_sec_client_t_const_p_std__string_const_R_bool_std__functionT_void_fboolF_tF_t,
  _swigc__p_std__functionT_void_fvsomeip_v3__routing_state_eF_t,
  _swigc__p_std__functionT_void_fvsomeip_v3__security_update_state_eF_t,
  _swigc__p_std__functionT_void_fvsomeip_v3__state_type_eF_t,
  _swigc__p_std__mapT_std__size_t_unsigned_char_t,
  _swigc__p_std__mapT_std__string_std__string_t,
  _swigc__p_std__mapT_unsigned_short_std__mapT_unsigned_short_std__mapT_unsigned_char_unsigned_int_t_t_t,
  _swigc__p_std__mapT_vsomeip_v3__remote_info_t_std__string_t,
  _swigc__p_std__setT_unsigned_short_t,
  _swigc__p_std__shared_ptrT_vsomeip_v3__application_t,
  _swigc__p_std__shared_ptrT_vsomeip_v3__configuration_t,
  _swigc__p_std__shared_ptrT_vsomeip_v3__message_t,
  _swigc__p_std__shared_ptrT_vsomeip_v3__payload_t,
  _swigc__p_std__shared_ptrT_vsomeip_v3__policy_manager_t,
  _swigc__p_std__shared_ptrT_vsomeip_v3__policy_t,
  _swigc__p_std__shared_ptrT_vsomeip_v3__runtime_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_unsigned_char_t,
  _swigc__p_uid_t,
  _swigc__p_unsigned___int64,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_vsomeip_sec_client_t,
  _swigc__p_vsomeip_v3__application,
  _swigc__p_vsomeip_v3__debounce_filter_t,
  _swigc__p_vsomeip_v3__ip_address_t,
  _swigc__p_vsomeip_v3__message,
  _swigc__p_vsomeip_v3__message_acceptance_t,
  _swigc__p_vsomeip_v3__message_base,
  _swigc__p_vsomeip_v3__payload,
  _swigc__p_vsomeip_v3__remote_info_t,
  _swigc__p_vsomeip_v3__runtime,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */




EnvInstanceData::EnvInstanceData(Napi::Env env, swig_module_info *swig_module) :
env(env), SWIG_NAPI_ObjectWrapCtor(nullptr), ctor(nullptr), swig_module(swig_module) {
  ctor = new Napi::FunctionReference*[swig_module->size + 1];
  for (size_t i = 0; i <= swig_module->size; i++) {
    ctor[i] = nullptr;
  }
}

EnvInstanceData::~EnvInstanceData() {
  for (size_t i = 0; i <= swig_module->size; i++) {
    if (ctor[i] != nullptr)
      delete ctor[i];
    ctor[i] = nullptr;
  }
  delete [] ctor;
  delete SWIG_NAPI_ObjectWrapCtor;
}

SWIGRUNTIME void
SWIG_NAPI_SetModule(Napi::Env env, swig_module_info *swig_module) {
  auto data = new EnvInstanceData(env, swig_module);
  env.SetInstanceData(data);
}

SWIGRUNTIME swig_module_info *
SWIG_NAPI_GetModule(Napi::Env env) {
  auto data = env.GetInstanceData<EnvInstanceData>();
  if (data == nullptr) return nullptr;
  return data->swig_module;
}

#define SWIG_GetModule(clientdata)                SWIG_NAPI_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_NAPI_SetModule(clientdata, pointer)
#define SWIG_INIT_CLIENT_DATA_TYPE                Napi::Env


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


Napi::Object Init(Napi::Env env, Napi::Object exports) {
  SWIG_InitializeModule(env);






  Napi::Function SWIG_NAPI_ObjectWrap_ctor = SWIG_NAPI_ObjectWrap_inst::GetClass(env);
  Napi::FunctionReference *SWIG_NAPI_ObjectWrap_ctor_ref = new Napi::FunctionReference();
  *SWIG_NAPI_ObjectWrap_ctor_ref = Napi::Persistent(SWIG_NAPI_ObjectWrap_ctor);
  env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor = SWIG_NAPI_ObjectWrap_ctor_ref;

  /* create objects for namespaces */
  

  /* register classes */
  /* Class: message_base (_exports_message_base) */
// jsnapi_registerclass
Napi::Function _exports_message_base_ctor = _exports_message_base_inst::GetClass(env);
exports.Set("message_base", _exports_message_base_ctor);
if (SWIGTYPE_p_vsomeip_v3__message_base->clientdata == nullptr) {
  SWIGTYPE_p_vsomeip_v3__message_base->clientdata = new size_t(0);
}
Napi::FunctionReference *_exports_message_base_ctor_ref = new Napi::FunctionReference();
*_exports_message_base_ctor_ref = Napi::Persistent(_exports_message_base_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[0] = _exports_message_base_ctor_ref;
/* Class: debounce_filter_t (_exports_debounce_filter_t) */
// jsnapi_registerclass
Napi::Function _exports_debounce_filter_t_ctor = _exports_debounce_filter_t_inst::GetClass(env);
exports.Set("debounce_filter_t", _exports_debounce_filter_t_ctor);
if (SWIGTYPE_p_vsomeip_v3__debounce_filter_t->clientdata == nullptr) {
  SWIGTYPE_p_vsomeip_v3__debounce_filter_t->clientdata = new size_t(1);
}
Napi::FunctionReference *_exports_debounce_filter_t_ctor_ref = new Napi::FunctionReference();
*_exports_debounce_filter_t_ctor_ref = Napi::Persistent(_exports_debounce_filter_t_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[1] = _exports_debounce_filter_t_ctor_ref;
/* Class: runtime (_exports_runtime) */
// jsnapi_registerclass
Napi::Function _exports_runtime_ctor = _exports_runtime_inst::GetClass(env);
exports.Set("runtime", _exports_runtime_ctor);
if (SWIGTYPE_p_vsomeip_v3__runtime->clientdata == nullptr) {
  SWIGTYPE_p_vsomeip_v3__runtime->clientdata = new size_t(2);
}
Napi::FunctionReference *_exports_runtime_ctor_ref = new Napi::FunctionReference();
*_exports_runtime_ctor_ref = Napi::Persistent(_exports_runtime_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[2] = _exports_runtime_ctor_ref;
/* Class: application (_exports_application) */
// jsnapi_registerclass
Napi::Function _exports_application_ctor = _exports_application_inst::GetClass(env);
exports.Set("application", _exports_application_ctor);
if (SWIGTYPE_p_vsomeip_v3__application->clientdata == nullptr) {
  SWIGTYPE_p_vsomeip_v3__application->clientdata = new size_t(3);
}
Napi::FunctionReference *_exports_application_ctor_ref = new Napi::FunctionReference();
*_exports_application_ctor_ref = Napi::Persistent(_exports_application_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[3] = _exports_application_ctor_ref;
/* Class: message (_exports_message) */
// jsnapi_registerclass
Napi::Function _exports_message_ctor = _exports_message_inst::GetClass(env);
exports.Set("message", _exports_message_ctor);
if (SWIGTYPE_p_vsomeip_v3__message->clientdata == nullptr) {
  SWIGTYPE_p_vsomeip_v3__message->clientdata = new size_t(4);
}
Napi::FunctionReference *_exports_message_ctor_ref = new Napi::FunctionReference();
*_exports_message_ctor_ref = Napi::Persistent(_exports_message_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[4] = _exports_message_ctor_ref;
/* Class: payload (_exports_payload) */
// jsnapi_registerclass
Napi::Function _exports_payload_ctor = _exports_payload_inst::GetClass(env);
exports.Set("payload", _exports_payload_ctor);
if (SWIGTYPE_p_vsomeip_v3__payload->clientdata == nullptr) {
  SWIGTYPE_p_vsomeip_v3__payload->clientdata = new size_t(5);
}
Napi::FunctionReference *_exports_payload_ctor_ref = new Napi::FunctionReference();
*_exports_payload_ctor_ref = Napi::Persistent(_exports_payload_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[5] = _exports_payload_ctor_ref;
/* Class: ip_address_t (_exports_ip_address_t) */
// jsnapi_registerclass
Napi::Function _exports_ip_address_t_ctor = _exports_ip_address_t_inst::GetClass(env);
exports.Set("ip_address_t", _exports_ip_address_t_ctor);
if (SWIGTYPE_p_vsomeip_v3__ip_address_t->clientdata == nullptr) {
  SWIGTYPE_p_vsomeip_v3__ip_address_t->clientdata = new size_t(6);
}
Napi::FunctionReference *_exports_ip_address_t_ctor_ref = new Napi::FunctionReference();
*_exports_ip_address_t_ctor_ref = Napi::Persistent(_exports_ip_address_t_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[6] = _exports_ip_address_t_ctor_ref;
/* Class: remote_info_t (_exports_remote_info_t) */
// jsnapi_registerclass
Napi::Function _exports_remote_info_t_ctor = _exports_remote_info_t_inst::GetClass(env);
exports.Set("remote_info_t", _exports_remote_info_t_ctor);
if (SWIGTYPE_p_vsomeip_v3__remote_info_t->clientdata == nullptr) {
  SWIGTYPE_p_vsomeip_v3__remote_info_t->clientdata = new size_t(7);
}
Napi::FunctionReference *_exports_remote_info_t_ctor_ref = new Napi::FunctionReference();
*_exports_remote_info_t_ctor_ref = Napi::Persistent(_exports_remote_info_t_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[7] = _exports_remote_info_t_ctor_ref;
/* Class: message_acceptance_t (_exports_message_acceptance_t) */
// jsnapi_registerclass
Napi::Function _exports_message_acceptance_t_ctor = _exports_message_acceptance_t_inst::GetClass(env);
exports.Set("message_acceptance_t", _exports_message_acceptance_t_ctor);
if (SWIGTYPE_p_vsomeip_v3__message_acceptance_t->clientdata == nullptr) {
  SWIGTYPE_p_vsomeip_v3__message_acceptance_t->clientdata = new size_t(8);
}
Napi::FunctionReference *_exports_message_acceptance_t_ctor_ref = new Napi::FunctionReference();
*_exports_message_acceptance_t_ctor_ref = Napi::Persistent(_exports_message_acceptance_t_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[8] = _exports_message_acceptance_t_ctor_ref;


  /* enable inheritance */
  
Napi::Value jsObjectValue, jsSetProtoValue;
Napi::Object jsObject;
Napi::Function setProto;
NAPI_CHECK_RESULT(env.Global().Get("Object"), jsObjectValue);
NAPI_CHECK_RESULT(jsObjectValue.ToObject(), jsObject);
NAPI_CHECK_RESULT(jsObject.Get("setPrototypeOf"), jsSetProtoValue);
setProto = jsSetProtoValue.As<Napi::Function>();



  /* setup inheritances */
  
// Inheritance for _exports_message_base (message_base) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_message_base_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_message_base_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_debounce_filter_t (debounce_filter_t) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_debounce_filter_t_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_debounce_filter_t_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_runtime (runtime) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_runtime_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_runtime_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_application (application) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_application_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_application_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_message (message) <- _exports_message_base
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_message_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(_exports_message_base_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_message_ctor, _exports_message_base_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_payload (payload) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_payload_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_payload_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ip_address_t (ip_address_t) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ip_address_t_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ip_address_t_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_remote_info_t (remote_info_t) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_remote_info_t_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_remote_info_t_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_message_acceptance_t (message_acceptance_t) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_message_acceptance_t_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_message_acceptance_t_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);



  /* create and register namespace objects */
  // jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_DEFAULT_MAJOR_get, JS_veto_set_variable>("DEFAULT_MAJOR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_DEFAULT_MINOR_get, JS_veto_set_variable>("DEFAULT_MINOR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_DEFAULT_TTL_get, JS_veto_set_variable>("DEFAULT_TTL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_DEFAULT_MULTICAST_get, JS_veto_set_variable>("DEFAULT_MULTICAST");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_DEFAULT_PORT_get, JS_veto_set_variable>("DEFAULT_PORT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_ILLEGAL_PORT_get, JS_veto_set_variable>("ILLEGAL_PORT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_ANY_PORT_get, JS_veto_set_variable>("ANY_PORT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_NO_TRACE_FILTER_EXPRESSION_get, JS_veto_set_variable>("NO_TRACE_FILTER_EXPRESSION");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_ANY_SERVICE_get, JS_veto_set_variable>("ANY_SERVICE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_ANY_INSTANCE_get, JS_veto_set_variable>("ANY_INSTANCE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_ANY_EVENTGROUP_get, JS_veto_set_variable>("ANY_EVENTGROUP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_ANY_METHOD_get, JS_veto_set_variable>("ANY_METHOD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_ANY_MAJOR_get, JS_veto_set_variable>("ANY_MAJOR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_ANY_MINOR_get, JS_veto_set_variable>("ANY_MINOR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_DEFAULT_EVENTGROUP_get, JS_veto_set_variable>("DEFAULT_EVENTGROUP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_ILLEGAL_CLIENT_get, JS_veto_set_variable>("ILLEGAL_CLIENT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_INVALID_METHOD_get, JS_veto_set_variable>("INVALID_METHOD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_MAGIC_COOKIE_CLIENT_MESSAGE_get, JS_veto_set_variable>("MAGIC_COOKIE_CLIENT_MESSAGE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_MAGIC_COOKIE_SERVICE_MESSAGE_get, JS_veto_set_variable>("MAGIC_COOKIE_SERVICE_MESSAGE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_MAGIC_COOKIE_SIZE_get, JS_veto_set_variable>("MAGIC_COOKIE_SIZE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_MAGIC_COOKIE_REQUEST_get, JS_veto_set_variable>("MAGIC_COOKIE_REQUEST");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_MAGIC_COOKIE_CLIENT_get, JS_veto_set_variable>("MAGIC_COOKIE_CLIENT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_MAGIC_COOKIE_PROTOCOL_VERSION_get, JS_veto_set_variable>("MAGIC_COOKIE_PROTOCOL_VERSION");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_MAGIC_COOKIE_INTERFACE_VERSION_get, JS_veto_set_variable>("MAGIC_COOKIE_INTERFACE_VERSION");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_MAGIC_COOKIE_CLIENT_MESSAGE_TYPE_get, JS_veto_set_variable>("MAGIC_COOKIE_CLIENT_MESSAGE_TYPE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_MAGIC_COOKIE_SERVICE_MESSAGE_TYPE_get, JS_veto_set_variable>("MAGIC_COOKIE_SERVICE_MESSAGE_TYPE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_MAGIC_COOKIE_RETURN_CODE_get, JS_veto_set_variable>("MAGIC_COOKIE_RETURN_CODE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_CLIENT_COOKIE_get, JS_veto_set_variable>("CLIENT_COOKIE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_SERVICE_COOKIE_get, JS_veto_set_variable>("SERVICE_COOKIE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_ANY_EVENT_get, JS_veto_set_variable>("ANY_EVENT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_ANY_CLIENT_get, JS_veto_set_variable>("ANY_CLIENT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_VSOMEIP_ALL_get, JS_veto_set_variable>("VSOMEIP_ALL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<_wrap_DEFAULT_SECURITY_UPDATE_ID_get, JS_veto_set_variable>("DEFAULT_SECURITY_UPDATE_ID");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_state_type_e_ST_REGISTERED_get, JS_veto_set_variable>("state_type_e_ST_REGISTERED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_state_type_e_ST_DEREGISTERED_get, JS_veto_set_variable>("state_type_e_ST_DEREGISTERED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_message_type_e_MT_REQUEST_get, JS_veto_set_variable>("message_type_e_MT_REQUEST");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_message_type_e_MT_REQUEST_NO_RETURN_get, JS_veto_set_variable>("message_type_e_MT_REQUEST_NO_RETURN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_message_type_e_MT_NOTIFICATION_get, JS_veto_set_variable>("message_type_e_MT_NOTIFICATION");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_message_type_e_MT_REQUEST_ACK_get, JS_veto_set_variable>("message_type_e_MT_REQUEST_ACK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_message_type_e_MT_REQUEST_NO_RETURN_ACK_get, JS_veto_set_variable>("message_type_e_MT_REQUEST_NO_RETURN_ACK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_message_type_e_MT_NOTIFICATION_ACK_get, JS_veto_set_variable>("message_type_e_MT_NOTIFICATION_ACK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_message_type_e_MT_RESPONSE_get, JS_veto_set_variable>("message_type_e_MT_RESPONSE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_message_type_e_MT_ERROR_get, JS_veto_set_variable>("message_type_e_MT_ERROR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_message_type_e_MT_RESPONSE_ACK_get, JS_veto_set_variable>("message_type_e_MT_RESPONSE_ACK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_message_type_e_MT_ERROR_ACK_get, JS_veto_set_variable>("message_type_e_MT_ERROR_ACK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_message_type_e_MT_UNKNOWN_get, JS_veto_set_variable>("message_type_e_MT_UNKNOWN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_return_code_e_E_OK_get, JS_veto_set_variable>("return_code_e_E_OK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_return_code_e_E_NOT_OK_get, JS_veto_set_variable>("return_code_e_E_NOT_OK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_return_code_e_E_UNKNOWN_SERVICE_get, JS_veto_set_variable>("return_code_e_E_UNKNOWN_SERVICE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_return_code_e_E_UNKNOWN_METHOD_get, JS_veto_set_variable>("return_code_e_E_UNKNOWN_METHOD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_return_code_e_E_NOT_READY_get, JS_veto_set_variable>("return_code_e_E_NOT_READY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_return_code_e_E_NOT_REACHABLE_get, JS_veto_set_variable>("return_code_e_E_NOT_REACHABLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_return_code_e_E_TIMEOUT_get, JS_veto_set_variable>("return_code_e_E_TIMEOUT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_return_code_e_E_WRONG_PROTOCOL_VERSION_get, JS_veto_set_variable>("return_code_e_E_WRONG_PROTOCOL_VERSION");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_return_code_e_E_WRONG_INTERFACE_VERSION_get, JS_veto_set_variable>("return_code_e_E_WRONG_INTERFACE_VERSION");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_return_code_e_E_MALFORMED_MESSAGE_get, JS_veto_set_variable>("return_code_e_E_MALFORMED_MESSAGE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_return_code_e_E_WRONG_MESSAGE_TYPE_get, JS_veto_set_variable>("return_code_e_E_WRONG_MESSAGE_TYPE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_return_code_e_E_UNKNOWN_get, JS_veto_set_variable>("return_code_e_E_UNKNOWN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_routing_state_e_RS_RUNNING_get, JS_veto_set_variable>("routing_state_e_RS_RUNNING");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_routing_state_e_RS_SUSPENDED_get, JS_veto_set_variable>("routing_state_e_RS_SUSPENDED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_routing_state_e_RS_RESUMED_get, JS_veto_set_variable>("routing_state_e_RS_RESUMED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_routing_state_e_RS_SHUTDOWN_get, JS_veto_set_variable>("routing_state_e_RS_SHUTDOWN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_routing_state_e_RS_DIAGNOSIS_get, JS_veto_set_variable>("routing_state_e_RS_DIAGNOSIS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_routing_state_e_RS_DELAYED_RESUME_get, JS_veto_set_variable>("routing_state_e_RS_DELAYED_RESUME");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_routing_state_e_RS_UNKNOWN_get, JS_veto_set_variable>("routing_state_e_RS_UNKNOWN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_offer_type_e_OT_LOCAL_get, JS_veto_set_variable>("offer_type_e_OT_LOCAL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_offer_type_e_OT_REMOTE_get, JS_veto_set_variable>("offer_type_e_OT_REMOTE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_offer_type_e_OT_ALL_get, JS_veto_set_variable>("offer_type_e_OT_ALL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_event_type_e_ET_EVENT_get, JS_veto_set_variable>("event_type_e_ET_EVENT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_event_type_e_ET_SELECTIVE_EVENT_get, JS_veto_set_variable>("event_type_e_ET_SELECTIVE_EVENT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_event_type_e_ET_FIELD_get, JS_veto_set_variable>("event_type_e_ET_FIELD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_event_type_e_ET_UNKNOWN_get, JS_veto_set_variable>("event_type_e_ET_UNKNOWN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_security_mode_e_SM_OFF_get, JS_veto_set_variable>("security_mode_e_SM_OFF");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_security_mode_e_SM_ON_get, JS_veto_set_variable>("security_mode_e_SM_ON");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_security_mode_e_SM_AUDIT_get, JS_veto_set_variable>("security_mode_e_SM_AUDIT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_security_update_state_e_SU_SUCCESS_get, JS_veto_set_variable>("security_update_state_e_SU_SUCCESS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_security_update_state_e_SU_NOT_ALLOWED_get, JS_veto_set_variable>("security_update_state_e_SU_NOT_ALLOWED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_security_update_state_e_SU_UNKNOWN_USER_ID_get, JS_veto_set_variable>("security_update_state_e_SU_UNKNOWN_USER_ID");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_security_update_state_e_SU_INVALID_FORMAT_get, JS_veto_set_variable>("security_update_state_e_SU_INVALID_FORMAT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_reliability_type_e_RT_RELIABLE_get, JS_veto_set_variable>("reliability_type_e_RT_RELIABLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_reliability_type_e_RT_UNRELIABLE_get, JS_veto_set_variable>("reliability_type_e_RT_UNRELIABLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_reliability_type_e_RT_BOTH_get, JS_veto_set_variable>("reliability_type_e_RT_BOTH");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_reliability_type_e_RT_UNKNOWN_get, JS_veto_set_variable>("reliability_type_e_RT_UNKNOWN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_availability_state_e_AS_UNAVAILABLE_get, JS_veto_set_variable>("availability_state_e_AS_UNAVAILABLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_availability_state_e_AS_OFFERED_get, JS_veto_set_variable>("availability_state_e_AS_OFFERED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_availability_state_e_AS_AVAILABLE_get, JS_veto_set_variable>("availability_state_e_AS_AVAILABLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_availability_state_e_AS_UNKNOWN_get, JS_veto_set_variable>("availability_state_e_AS_UNKNOWN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_handler_registration_type_e_HRT_REPLACE_get, JS_veto_set_variable>("handler_registration_type_e_HRT_REPLACE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_handler_registration_type_e_HRT_PREPEND_get, JS_veto_set_variable>("handler_registration_type_e_HRT_PREPEND");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_handler_registration_type_e_HRT_APPEND_get, JS_veto_set_variable>("handler_registration_type_e_HRT_APPEND");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_handler_registration_type_e_HRT_UNKNOWN_get, JS_veto_set_variable>("handler_registration_type_e_HRT_UNKNOWN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_endianess_e_be_get, JS_veto_set_variable>("endianess_e_be");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_endianess_e_le_get, JS_veto_set_variable>("endianess_e_le");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("LoadDll", _wrap_LoadDll);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);


  return exports;
  goto fail;
fail:
  return Napi::Object();
}

NODE_API_MODULE(vsomeip, Init)
